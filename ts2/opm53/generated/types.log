// File written by stdump v2.1 on 2024-12-05
// 
// Input file:
//   TS2-OPM53-Beta.elf
// Toolchain version(s):
//   unknown
// Built-in types:
//   char                     8-bit integer
//   complex double           64-bit floating point
//   complex float            32-bit floating point
//   complex long double      64-bit floating point
//   double                   64-bit floating point
//   float                    32-bit floating point
//   int                      32-bit signed integer
//   long double              64-bit floating point
//   long int                 64-bit signed integer
//   long long int            64-bit signed integer
//   long long unsigned int   64-bit unsigned integer
//   long unsigned int        64-bit unsigned integer
//   long128                  128-bit integer
//   short int                16-bit signed integer
//   short unsigned int       16-bit unsigned integer
//   signed char              8-bit signed integer
//   u_long128                128-bit integer
//   unsigned char            8-bit unsigned integer
//   unsigned int             32-bit unsigned integer
//   void                     void

typedef struct { // 0x8
	/* 0x0 */ int real;
	/* 0x4 */ int imag;
} complex int;

typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef unsigned int size_t;
typedef int wchar_t;
typedef long unsigned int clock_t;
typedef long int time_t;

struct tm { // 0x24
	/* 0x00 */ int tm_sec;
	/* 0x04 */ int tm_min;
	/* 0x08 */ int tm_hour;
	/* 0x0c */ int tm_mday;
	/* 0x10 */ int tm_mon;
	/* 0x14 */ int tm_year;
	/* 0x18 */ int tm_wday;
	/* 0x1c */ int tm_yday;
	/* 0x20 */ int tm_isdst;
};

// warning: multiple differing types with the same name (type name not equal)
typedef __uint32_t ULong;

struct _glue { // 0xc
	/* 0x0 */ _glue *_next;
	/* 0x4 */ int _niobs;
	/* 0x8 */ __sFILE *_iobs;
};

typedef struct { // 0x18
	/* 0x00 */ _Bigint *_next;
	/* 0x04 */ int _k;
	/* 0x08 */ int _maxwds;
	/* 0x0c */ int _sign;
	/* 0x10 */ int _wds;
	/* 0x14 */ ULong _x[1];
} _Bigint;

struct _atexit { // 0x88
	/* 0x00 */ _atexit *_next;
	/* 0x04 */ int _ind;
	/* 0x08 */ void (*_fns[32])(/* parameters unknown */);
};

struct __sbuf { // 0x8
	/* 0x0 */ unsigned char *_base;
	/* 0x4 */ int _size;
};

typedef long int _fpos_t;

struct __sFILE { // 0x58
	/* 0x00 */ unsigned char *_p;
	/* 0x04 */ int _r;
	/* 0x08 */ int _w;
	/* 0x0c */ short int _flags;
	/* 0x0e */ short int _file;
	/* 0x10 */ __sbuf _bf;
	/* 0x18 */ int _lbfsize;
	/* 0x1c */ void *_cookie;
	/* 0x20 */ int (*_read)(/* parameters unknown */);
	/* 0x24 */ int (*_write)(/* parameters unknown */);
	/* 0x28 */ _fpos_t (*_seek)(/* parameters unknown */);
	/* 0x2c */ int (*_close)(/* parameters unknown */);
	/* 0x30 */ __sbuf _ub;
	/* 0x38 */ unsigned char *_up;
	/* 0x3c */ int _ur;
	/* 0x40 */ unsigned char _ubuf[3];
	/* 0x43 */ unsigned char _nbuf[1];
	/* 0x44 */ __sbuf _lb;
	/* 0x4c */ int _blksize;
	/* 0x50 */ int _offset;
	/* 0x54 */ _reent *_data;
};

struct _reent { // 0x2ec
	/* 0x000 */ int _errno;
	/* 0x004 */ __sFILE *_stdin;
	/* 0x008 */ __sFILE *_stdout;
	/* 0x00c */ __sFILE *_stderr;
	/* 0x010 */ int _inc;
	/* 0x014 */ char _emergency[25];
	/* 0x030 */ int _current_category;
	/* 0x034 */ char *_current_locale;
	/* 0x038 */ int __sdidinit;
	/* 0x03c */ void (*__cleanup)(/* parameters unknown */);
	/* 0x040 */ _Bigint *_result;
	/* 0x044 */ int _result_k;
	/* 0x048 */ _Bigint *_p5s;
	/* 0x04c */ _Bigint **_freelist;
	/* 0x050 */ int _cvtlen;
	/* 0x054 */ char *_cvtbuf;
	/* 0x058 */ union { // 0xf0
		/* 0x058 */ struct { // 0x4c
			/* 0x058 */ unsigned int _rand_next;
			/* 0x05c */ char *_strtok_last;
			/* 0x060 */ char _asctime_buf[26];
			/* 0x07c */ tm _localtime_buf;
			/* 0x0a0 */ int _gamma_signgam;
		} _reent;
		/* 0x058 */ struct { // 0xf0
			/* 0x058 */ unsigned char *_nextf[30];
			/* 0x0d0 */ unsigned int _nmalloc[30];
		} _unused;
	} _new;
	/* 0x148 */ _atexit *_atexit;
	/* 0x14c */ _atexit _atexit0;
	/* 0x1d4 */ void (**_sig_func)(/* parameters unknown */);
	/* 0x1d8 */ _glue __sglue;
	/* 0x1e4 */ __sFILE __sf[3];
};

typedef struct { // 0x8
	/* 0x0 */ int quot;
	/* 0x4 */ int rem;
} div_t;

typedef struct { // 0x10
	/* 0x0 */ long int quot;
	/* 0x8 */ long int rem;
} ldiv_t;

typedef char *__gnuc_va_list;
typedef _fpos_t fpos_t;
typedef __sFILE FILE;

union __dmath { // 0x8
	/* 0x0 */ __uint32_t i[2];
	/* 0x0 */ double d;
};

struct exception { // 0x28
	/* 0x00 */ int type;
	/* 0x04 */ char *name;
	/* 0x08 */ double arg1;
	/* 0x10 */ double arg2;
	/* 0x18 */ double retval;
	/* 0x20 */ int err;
};

enum __fdlibm_version {
	__fdlibm_ieee = -1,
	__fdlibm_svid = 0,
	__fdlibm_xopen = 1,
	__fdlibm_posix = 2
};

typedef unsigned char u_char;
typedef short unsigned int u_short;
typedef unsigned int u_int;
typedef long unsigned int u_long;

struct ThreadParam { // 0x30
	/* 0x00 */ int status;
	/* 0x04 */ void *entry;
	/* 0x08 */ void *stack;
	/* 0x0c */ int stackSize;
	/* 0x10 */ void *gpReg;
	/* 0x14 */ int initPriority;
	/* 0x18 */ int currentPriority;
	/* 0x1c */ u_int attr;
	/* 0x20 */ u_int option;
	/* 0x24 */ int waitType;
	/* 0x28 */ int waitId;
	/* 0x2c */ int wakeupCount;
};

struct SemaParam { // 0x18
	/* 0x00 */ int currentCount;
	/* 0x04 */ int maxCount;
	/* 0x08 */ int initCount;
	/* 0x0c */ int numWaitThreads;
	/* 0x10 */ u_int attr;
	/* 0x14 */ u_int option;
};

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int COUNT : 16;
	/* 0x2:0 */ unsigned int p0 : 16;
} tT_COUNT;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int CLKS : 2;
	/* 0x0:2 */ unsigned int GATE : 1;
	/* 0x0:3 */ unsigned int GATS : 1;
	/* 0x0:4 */ unsigned int GATM : 2;
	/* 0x0:6 */ unsigned int ZRET : 1;
	/* 0x0:7 */ unsigned int CUE : 1;
	/* 0x1:0 */ unsigned int CMPE : 1;
	/* 0x1:1 */ unsigned int OVFE : 1;
	/* 0x1:2 */ unsigned int EQUF : 1;
	/* 0x1:3 */ unsigned int OVFF : 1;
	/* 0x1:4 */ unsigned int p0 : 20;
} tT_MODE;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int COMP : 16;
	/* 0x2:0 */ unsigned int p0 : 16;
} tT_COMP;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int HOLD : 16;
	/* 0x2:0 */ unsigned int p0 : 16;
} tT_HOLD;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int OPTION : 28;
	/* 0x3:4 */ unsigned int CODE : 4;
} tIPU_CMD_write;

typedef struct { // 0x8
	/* 0x0 */ unsigned int DATA;
	/* 0x4:0 */ unsigned int p0 : 31;
	/* 0x7:7 */ unsigned int BUSY : 1;
} tIPU_CMD_read;

typedef struct { // 0x8
	/* 0x0 */ unsigned int BSTOP;
	/* 0x4:0 */ unsigned int p0 : 31;
	/* 0x7:7 */ unsigned int BUSY : 1;
} tIPU_TOP;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int IFC : 4;
	/* 0x0:4 */ unsigned int OFC : 4;
	/* 0x1:0 */ unsigned int CBP : 6;
	/* 0x1:6 */ unsigned int ECD : 1;
	/* 0x1:7 */ unsigned int SCD : 1;
	/* 0x2:0 */ unsigned int IDP : 2;
	/* 0x2:2 */ unsigned int p0 : 2;
	/* 0x2:4 */ unsigned int AS : 1;
	/* 0x2:5 */ unsigned int IVF : 1;
	/* 0x2:6 */ unsigned int QST : 1;
	/* 0x2:7 */ unsigned int MP1 : 1;
	/* 0x3:0 */ unsigned int PCT : 3;
	/* 0x3:3 */ unsigned int p1 : 3;
	/* 0x3:6 */ unsigned int RST : 1;
	/* 0x3:7 */ unsigned int BUSY : 1;
} tIPU_CTRL;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int BP : 7;
	/* 0x0:7 */ unsigned int p0 : 1;
	/* 0x1:0 */ unsigned int IFC : 4;
	/* 0x1:4 */ unsigned int p1 : 4;
	/* 0x2:0 */ unsigned int FP : 2;
	/* 0x2:2 */ unsigned int p2 : 14;
} tIPU_BP;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int RST : 1;
	/* 0x0:1 */ unsigned int p0 : 2;
	/* 0x0:3 */ unsigned int PSE : 1;
	/* 0x0:4 */ unsigned int p1 : 28;
} tGIF_CTRL;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int M3R : 1;
	/* 0x0:1 */ unsigned int p0 : 1;
	/* 0x0:2 */ unsigned int IMT : 1;
	/* 0x0:3 */ unsigned int p1 : 29;
} tGIF_MODE;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int M3R : 1;
	/* 0x0:1 */ unsigned int M3P : 1;
	/* 0x0:2 */ unsigned int IMT : 1;
	/* 0x0:3 */ unsigned int PSE : 1;
	/* 0x0:4 */ unsigned int p0 : 1;
	/* 0x0:5 */ unsigned int IP3 : 1;
	/* 0x0:6 */ unsigned int P3Q : 1;
	/* 0x0:7 */ unsigned int P2Q : 1;
	/* 0x1:0 */ unsigned int P1Q : 1;
	/* 0x1:1 */ unsigned int OPH : 1;
	/* 0x1:2 */ unsigned int APATH : 2;
	/* 0x1:4 */ unsigned int DIR : 1;
	/* 0x1:5 */ unsigned int p1 : 11;
	/* 0x3:0 */ unsigned int FQC : 5;
	/* 0x3:5 */ unsigned int p2 : 3;
} tGIF_STAT;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int NLOOP : 15;
	/* 0x1:7 */ unsigned int EOP : 1;
	/* 0x2:0 */ unsigned int tag : 16;
} tGIF_TAG0;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int tag : 14;
	/* 0x1:6 */ unsigned int PRE : 1;
	/* 0x1:7 */ unsigned int PRIM : 11;
	/* 0x3:2 */ unsigned int FLG : 2;
	/* 0x3:4 */ unsigned int NREG : 4;
} tGIF_TAG1;

typedef struct { // 0x4
	/* 0x0 */ unsigned int tag;
} tGIF_TAG2;

typedef struct { // 0x4
	/* 0x0 */ unsigned int tag;
} tGIF_TAG3;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int LOOPCNT : 15;
	/* 0x1:7 */ unsigned int p0 : 1;
	/* 0x2:0 */ unsigned int REGCNT : 4;
	/* 0x2:4 */ unsigned int VUADDR : 10;
	/* 0x3:6 */ unsigned int p1 : 2;
} tGIF_CNT;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int P3CNT : 15;
	/* 0x1:7 */ unsigned int p0 : 17;
} tGIF_P3CNT;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int LOOPCNT : 15;
	/* 0x1:7 */ unsigned int EOP : 1;
	/* 0x2:0 */ unsigned int p0 : 16;
} tGIF_P3TAG;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int VPS : 2;
	/* 0x0:2 */ unsigned int VEW : 1;
	/* 0x0:3 */ unsigned int p0 : 3;
	/* 0x0:6 */ unsigned int MRK : 1;
	/* 0x0:7 */ unsigned int p1 : 1;
	/* 0x1:0 */ unsigned int VSS : 1;
	/* 0x1:1 */ unsigned int VFS : 1;
	/* 0x1:2 */ unsigned int VIS : 1;
	/* 0x1:3 */ unsigned int INT : 1;
	/* 0x1:4 */ unsigned int ERO : 1;
	/* 0x1:5 */ unsigned int ER1 : 1;
	/* 0x1:6 */ unsigned int p2 : 10;
	/* 0x3:0 */ unsigned int FQC : 4;
	/* 0x3:4 */ unsigned int p3 : 4;
} tVIF0_STAT;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int RST : 1;
	/* 0x0:1 */ unsigned int FBK : 1;
	/* 0x0:2 */ unsigned int STP : 1;
	/* 0x0:3 */ unsigned int STC : 1;
	/* 0x0:4 */ unsigned int p0 : 28;
} tVIF0_FBRST;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int MII : 1;
	/* 0x0:1 */ unsigned int ME0 : 1;
	/* 0x0:2 */ unsigned int ME1 : 1;
	/* 0x0:3 */ unsigned int p0 : 29;
} tVIF0_ERR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int MARK : 16;
	/* 0x2:0 */ unsigned int p0 : 16;
} tVIF_MARK;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int CL : 8;
	/* 0x1:0 */ unsigned int WL : 8;
	/* 0x2:0 */ unsigned int p0 : 16;
} tVIF_CYCLE;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int MOD : 2;
	/* 0x0:2 */ unsigned int p0 : 30;
} tVIF_MODE;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int num : 8;
	/* 0x1:0 */ unsigned int p0 : 24;
} tVIF0_NUM;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int m0 : 2;
	/* 0x0:2 */ unsigned int m1 : 2;
	/* 0x0:4 */ unsigned int m2 : 2;
	/* 0x0:6 */ unsigned int m3 : 2;
	/* 0x1:0 */ unsigned int m4 : 2;
	/* 0x1:2 */ unsigned int m5 : 2;
	/* 0x1:4 */ unsigned int m6 : 2;
	/* 0x1:6 */ unsigned int m7 : 2;
	/* 0x2:0 */ unsigned int m8 : 2;
	/* 0x2:2 */ unsigned int m9 : 2;
	/* 0x2:4 */ unsigned int m10 : 2;
	/* 0x2:6 */ unsigned int m11 : 2;
	/* 0x3:0 */ unsigned int m12 : 2;
	/* 0x3:2 */ unsigned int m13 : 2;
	/* 0x3:4 */ unsigned int m14 : 2;
	/* 0x3:6 */ unsigned int m15 : 2;
} tVIF_MASK;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int immediate : 16;
	/* 0x2:0 */ unsigned int num : 8;
	/* 0x3:0 */ unsigned int CMD : 8;
} tVIF_CODE;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ITOPS : 10;
	/* 0x1:2 */ unsigned int p0 : 22;
} tVIF_ITOPS;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ITOP : 10;
	/* 0x1:2 */ unsigned int p0 : 22;
} tVIF_ITOP;

typedef struct { // 0x4
	/* 0x0 */ unsigned int R0;
} tVIF_R0;

typedef struct { // 0x4
	/* 0x0 */ unsigned int R1;
} tVIF_R1;

typedef struct { // 0x4
	/* 0x0 */ unsigned int R2;
} tVIF_R2;

typedef struct { // 0x4
	/* 0x0 */ unsigned int R3;
} tVIF_R3;

typedef struct { // 0x4
	/* 0x0 */ unsigned int C0;
} tVIF_C0;

typedef struct { // 0x4
	/* 0x0 */ unsigned int C1;
} tVIF_C1;

typedef struct { // 0x4
	/* 0x0 */ unsigned int C2;
} tVIF_C2;

typedef struct { // 0x4
	/* 0x0 */ unsigned int C3;
} tVIF_C3;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int VPS : 2;
	/* 0x0:2 */ unsigned int VEW : 1;
	/* 0x0:3 */ unsigned int VGW : 1;
	/* 0x0:4 */ unsigned int p0 : 2;
	/* 0x0:6 */ unsigned int MRK : 1;
	/* 0x0:7 */ unsigned int DBF : 1;
	/* 0x1:0 */ unsigned int VSS : 1;
	/* 0x1:1 */ unsigned int VFS : 1;
	/* 0x1:2 */ unsigned int VIS : 1;
	/* 0x1:3 */ unsigned int INT : 1;
	/* 0x1:4 */ unsigned int ERO : 1;
	/* 0x1:5 */ unsigned int ER1 : 1;
	/* 0x1:6 */ unsigned int p1 : 9;
	/* 0x2:7 */ unsigned int FDR : 1;
	/* 0x3:0 */ unsigned int FQC : 5;
	/* 0x3:5 */ unsigned int p2 : 3;
} tVIF1_STAT;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int RST : 1;
	/* 0x0:1 */ unsigned int FBK : 1;
	/* 0x0:2 */ unsigned int STP : 1;
	/* 0x0:3 */ unsigned int STC : 1;
	/* 0x0:4 */ unsigned int p0 : 28;
} tVIF1_FBRST;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int MII : 1;
	/* 0x0:1 */ unsigned int ME0 : 1;
	/* 0x0:2 */ unsigned int ME1 : 1;
	/* 0x0:3 */ unsigned int p0 : 29;
} tVIF1_ERR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int num : 8;
	/* 0x1:0 */ unsigned int p0 : 24;
} tVIF1_NUM;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int BASE : 10;
	/* 0x1:2 */ unsigned int p0 : 22;
} tVIF1_BASE;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int OFFSET : 10;
	/* 0x1:2 */ unsigned int p0 : 22;
} tVIF1_OFST;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int TOPS : 10;
	/* 0x1:2 */ unsigned int p0 : 22;
} tVIF1_TOPS;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int TOP : 10;
	/* 0x1:2 */ unsigned int p0 : 22;
} tVIF1_TOP;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int DIR : 1;
	/* 0x0:1 */ unsigned int p0 : 1;
	/* 0x0:2 */ unsigned int MOD : 2;
	/* 0x0:4 */ unsigned int ASP : 2;
	/* 0x0:6 */ unsigned int TTE : 1;
	/* 0x0:7 */ unsigned int TIE : 1;
	/* 0x1:0 */ unsigned int STR : 1;
	/* 0x1:1 */ unsigned int p1 : 7;
	/* 0x2:0 */ unsigned int TAG : 16;
} tD_CHCR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ADDR : 31;
	/* 0x3:7 */ unsigned int SPR : 1;
} tD_MADR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int QWC : 16;
	/* 0x2:0 */ unsigned int p0 : 16;
} tD_QWC;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ADDR : 31;
	/* 0x3:7 */ unsigned int SPR : 1;
} tD_TADR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ADDR : 31;
	/* 0x3:7 */ unsigned int SPR : 1;
} tD_ASR0;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ADDR : 31;
	/* 0x3:7 */ unsigned int SPR : 1;
} tD_ASR1;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ADDR : 14;
	/* 0x1:6 */ unsigned int p0 : 18;
} tD_SADR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int DMAE : 1;
	/* 0x0:1 */ unsigned int RELE : 1;
	/* 0x0:2 */ unsigned int MFD : 2;
	/* 0x0:4 */ unsigned int STS : 2;
	/* 0x0:6 */ unsigned int STD : 2;
	/* 0x1:0 */ unsigned int RCYC : 3;
	/* 0x1:3 */ unsigned int p0 : 21;
} tD_CTRL;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int CIS0 : 1;
	/* 0x0:1 */ unsigned int CIS1 : 1;
	/* 0x0:2 */ unsigned int CIS2 : 1;
	/* 0x0:3 */ unsigned int CIS3 : 1;
	/* 0x0:4 */ unsigned int CIS4 : 1;
	/* 0x0:5 */ unsigned int CIS5 : 1;
	/* 0x0:6 */ unsigned int CIS6 : 1;
	/* 0x0:7 */ unsigned int CIS7 : 1;
	/* 0x1:0 */ unsigned int CIS8 : 1;
	/* 0x1:1 */ unsigned int CIS9 : 1;
	/* 0x1:2 */ unsigned int p0 : 3;
	/* 0x1:5 */ unsigned int SIS : 1;
	/* 0x1:6 */ unsigned int MEIS : 1;
	/* 0x1:7 */ unsigned int BEIS : 1;
	/* 0x2:0 */ unsigned int CIM0 : 1;
	/* 0x2:1 */ unsigned int CIM1 : 1;
	/* 0x2:2 */ unsigned int CIM2 : 1;
	/* 0x2:3 */ unsigned int CIM3 : 1;
	/* 0x2:4 */ unsigned int CIM4 : 1;
	/* 0x2:5 */ unsigned int CIM5 : 1;
	/* 0x2:6 */ unsigned int CIM6 : 1;
	/* 0x2:7 */ unsigned int CIM7 : 1;
	/* 0x3:0 */ unsigned int CIM8 : 1;
	/* 0x3:1 */ unsigned int CIM9 : 1;
	/* 0x3:2 */ unsigned int p1 : 3;
	/* 0x3:5 */ unsigned int SIM : 1;
	/* 0x3:6 */ unsigned int MEIM : 1;
	/* 0x3:7 */ unsigned int p2 : 1;
} tD_STAT;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int CPC0 : 1;
	/* 0x0:1 */ unsigned int CPC1 : 1;
	/* 0x0:2 */ unsigned int CPC2 : 1;
	/* 0x0:3 */ unsigned int CPC3 : 1;
	/* 0x0:4 */ unsigned int CPC4 : 1;
	/* 0x0:5 */ unsigned int CPC5 : 1;
	/* 0x0:6 */ unsigned int CPC6 : 1;
	/* 0x0:7 */ unsigned int CPC7 : 1;
	/* 0x1:0 */ unsigned int CPC8 : 1;
	/* 0x1:1 */ unsigned int CPC9 : 1;
	/* 0x1:2 */ unsigned int p0 : 6;
	/* 0x2:0 */ unsigned int CDE0 : 1;
	/* 0x2:1 */ unsigned int CDE1 : 1;
	/* 0x2:2 */ unsigned int CDE2 : 1;
	/* 0x2:3 */ unsigned int CDE3 : 1;
	/* 0x2:4 */ unsigned int CDE4 : 1;
	/* 0x2:5 */ unsigned int CDE5 : 1;
	/* 0x2:6 */ unsigned int CDE6 : 1;
	/* 0x2:7 */ unsigned int CDE7 : 1;
	/* 0x3:0 */ unsigned int CDE8 : 1;
	/* 0x3:1 */ unsigned int CDE9 : 1;
	/* 0x3:2 */ unsigned int p1 : 5;
	/* 0x3:7 */ unsigned int PCE : 1;
} tD_PCR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int SQWC : 8;
	/* 0x1:0 */ unsigned int p0 : 8;
	/* 0x2:0 */ unsigned int TQWC : 8;
	/* 0x3:0 */ unsigned int p1 : 8;
} tD_SQWC;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int RMSK : 31;
	/* 0x3:7 */ unsigned int p0 : 1;
} tD_RBSR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ADDR : 31;
	/* 0x3:7 */ unsigned int p0 : 1;
} tD_RBOR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int ADDR : 31;
	/* 0x3:7 */ unsigned int p0 : 1;
} tD_STADR;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int p0 : 16;
	/* 0x2:0 */ unsigned int CPND : 1;
	/* 0x2:1 */ unsigned int p1 : 15;
} tD_ENABLER;

typedef struct { // 0x4
	/* 0x0:0 */ unsigned int p0 : 16;
	/* 0x2:0 */ unsigned int CPND : 1;
	/* 0x2:1 */ unsigned int p1 : 15;
} tD_ENABLEW;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int EN1 : 1;
	/* 0x0:1 */ unsigned int EN2 : 1;
	/* 0x0:2 */ unsigned int CRTMD : 3;
	/* 0x0:5 */ unsigned int MMOD : 1;
	/* 0x0:6 */ unsigned int AMOD : 1;
	/* 0x0:7 */ unsigned int SLBG : 1;
	/* 0x1:0 */ unsigned int ALP : 8;
	/* 0x2:0 */ unsigned int p0 : 16;
	/* 0x4 */ unsigned int p1;
} tGS_PMODE;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int INT : 1;
	/* 0x0:1 */ unsigned int FFMD : 1;
	/* 0x0:2 */ unsigned int DPMS : 2;
	/* 0x0:4 */ unsigned int p0 : 28;
	/* 0x4 */ unsigned int p1;
} tGS_SMODE2;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int FBP : 9;
	/* 0x1:1 */ unsigned int FBW : 6;
	/* 0x1:7 */ unsigned int PSM : 5;
	/* 0x2:4 */ unsigned int p0 : 12;
	/* 0x4:0 */ unsigned int DBX : 11;
	/* 0x5:3 */ unsigned int DBY : 11;
	/* 0x6:6 */ unsigned int p1 : 10;
} tGS_DISPFB1;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int DX : 12;
	/* 0x1:4 */ unsigned int DY : 11;
	/* 0x2:7 */ unsigned int MAGH : 4;
	/* 0x3:3 */ unsigned int MAGV : 2;
	/* 0x3:5 */ unsigned int p0 : 3;
	/* 0x4:0 */ unsigned int DW : 12;
	/* 0x5:4 */ unsigned int DH : 11;
	/* 0x6:7 */ unsigned int p1 : 9;
} tGS_DISPLAY1;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int FBP : 9;
	/* 0x1:1 */ unsigned int FBW : 6;
	/* 0x1:7 */ unsigned int PSM : 5;
	/* 0x2:4 */ unsigned int p0 : 12;
	/* 0x4:0 */ unsigned int DBX : 11;
	/* 0x5:3 */ unsigned int DBY : 11;
	/* 0x6:6 */ unsigned int p1 : 10;
} tGS_DISPFB2;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int DX : 12;
	/* 0x1:4 */ unsigned int DY : 11;
	/* 0x2:7 */ unsigned int MAGH : 4;
	/* 0x3:3 */ unsigned int MAGV : 2;
	/* 0x3:5 */ unsigned int p0 : 3;
	/* 0x4:0 */ unsigned int DW : 12;
	/* 0x5:4 */ unsigned int DH : 11;
	/* 0x6:7 */ unsigned int p1 : 9;
} tGS_DISPLAY2;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int EXBP : 14;
	/* 0x1:6 */ unsigned int EXBW : 6;
	/* 0x2:4 */ unsigned int FBIN : 2;
	/* 0x2:6 */ unsigned int WFFMD : 1;
	/* 0x2:7 */ unsigned int EMODA : 2;
	/* 0x3:1 */ unsigned int EMODC : 2;
	/* 0x3:3 */ unsigned int p0 : 5;
	/* 0x4:0 */ unsigned int WDX : 11;
	/* 0x5:3 */ unsigned int WDY : 11;
	/* 0x6:6 */ unsigned int p1 : 10;
} tGS_EXTBUF;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int SX : 12;
	/* 0x1:4 */ unsigned int SY : 11;
	/* 0x2:7 */ unsigned int SMPH : 4;
	/* 0x3:3 */ unsigned int SMPV : 2;
	/* 0x3:5 */ unsigned int p0 : 3;
	/* 0x4:0 */ unsigned int WW : 12;
	/* 0x5:4 */ unsigned int WH : 11;
	/* 0x6:7 */ unsigned int p1 : 9;
} tGS_EXTDATA;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int WRITE : 1;
	/* 0x0:1 */ unsigned int p0 : 31;
	/* 0x4 */ unsigned int p1;
} tGS_EXTWRITE;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int R : 8;
	/* 0x1:0 */ unsigned int G : 8;
	/* 0x2:0 */ unsigned int B : 8;
	/* 0x3:0 */ unsigned int p0 : 8;
	/* 0x4 */ unsigned int p1;
} tGS_BGCOLOR;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int SIGNAL : 1;
	/* 0x0:1 */ unsigned int FINISH : 1;
	/* 0x0:2 */ unsigned int HSINT : 1;
	/* 0x0:3 */ unsigned int VSINT : 1;
	/* 0x0:4 */ unsigned int EDWINT : 1;
	/* 0x0:5 */ unsigned int p0 : 3;
	/* 0x1:0 */ unsigned int FLUSH : 1;
	/* 0x1:1 */ unsigned int RESET : 1;
	/* 0x1:2 */ unsigned int p1 : 2;
	/* 0x1:4 */ unsigned int NFIELD : 1;
	/* 0x1:5 */ unsigned int FIELD : 1;
	/* 0x1:6 */ unsigned int FIFO : 2;
	/* 0x2:0 */ unsigned int REV : 8;
	/* 0x3:0 */ unsigned int ID : 8;
	/* 0x4 */ unsigned int p2;
} tGS_CSR;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int p0 : 8;
	/* 0x1:0 */ unsigned int SIGMSK : 1;
	/* 0x1:1 */ unsigned int FINISHMSK : 1;
	/* 0x1:2 */ unsigned int HSMSK : 1;
	/* 0x1:3 */ unsigned int VSMSK : 1;
	/* 0x1:4 */ unsigned int EDWMSK : 1;
	/* 0x1:5 */ unsigned int p1 : 19;
	/* 0x4 */ unsigned int p2;
} tGS_IMR;

typedef struct { // 0x8
	/* 0x0:0 */ unsigned int DIR : 1;
	/* 0x0:1 */ unsigned int p0 : 31;
	/* 0x4 */ unsigned int p1;
} tGS_BUSDIR;

typedef struct { // 0x8
	/* 0x0 */ unsigned int SIGID;
	/* 0x4 */ unsigned int LBLID;
} tGS_SIGLBLID;

struct _sceDmaTag { // 0x10
	/* 0x0 */ u_short qwc;
	/* 0x2 */ u_char mark;
	/* 0x3 */ u_char id;
	/* 0x4 */ _sceDmaTag *next;
	/* 0x8 */ u_int p[2];
};

typedef _sceDmaTag sceDmaTag;

typedef struct { // 0x14
	/* 0x00 */ u_char sts;
	/* 0x01 */ u_char std;
	/* 0x02 */ u_char mfd;
	/* 0x03 */ u_char rcycle;
	/* 0x04 */ u_short express;
	/* 0x06 */ u_short notify;
	/* 0x08 */ u_short sqwc;
	/* 0x0a */ u_short tqwc;
	/* 0x0c */ void *rbadr;
	/* 0x10 */ u_int rbmsk;
} sceDmaEnv;

typedef struct { // 0x90
	/* 0x00 */ tD_CHCR chcr;
	/* 0x04 */ u_int p0[3];
	/* 0x10 */ void *madr;
	/* 0x14 */ u_int p1[3];
	/* 0x20 */ u_int qwc;
	/* 0x24 */ u_int p2[3];
	/* 0x30 */ sceDmaTag *tadr;
	/* 0x34 */ u_int p3[3];
	/* 0x40 */ void *as0;
	/* 0x44 */ u_int p4[3];
	/* 0x50 */ void *as1;
	/* 0x54 */ u_int p5[3];
	/* 0x60 */ u_int p6[4];
	/* 0x70 */ u_int p7[4];
	/* 0x80 */ void *sadr;
	/* 0x84 */ u_int p8[3];
} sceDmaChan;

typedef struct { // 0x240
	/* 0x000 */ u_long128 vf[32];
	/* 0x200 */ u_int status;
	/* 0x204 */ u_int mac;
	/* 0x208 */ u_int clipping;
	/* 0x20c */ u_int r;
	/* 0x210 */ u_int i;
	/* 0x214 */ u_int q;
	/* 0x218 */ u_short vi[16];
} sceDevVu0Cnd;

typedef struct { // 0x240
	/* 0x000 */ u_long128 vf[32];
	/* 0x200 */ u_int status;
	/* 0x204 */ u_int mac;
	/* 0x208 */ u_int clipping;
	/* 0x20c */ u_int r;
	/* 0x210 */ u_int i;
	/* 0x214 */ u_int q;
	/* 0x218 */ u_int p;
	/* 0x21c */ u_short vi[16];
} sceDevVu1Cnd;

typedef struct { // 0x30
	/* 0x00 */ u_long128 tag;
	/* 0x10 */ u_int stat;
	/* 0x14 */ u_int count;
	/* 0x18 */ u_int p3count;
	/* 0x1c */ u_int p3tag;
	/* 0x20 */ u_int pad;
} sceDevGifCnd;

typedef struct { // 0x3c
	/* 0x00 */ u_int row[4];
	/* 0x10 */ u_int col[4];
	/* 0x20 */ u_int mask;
	/* 0x24 */ u_int code;
	/* 0x28 */ u_int stat;
	/* 0x2c */ u_short itop;
	/* 0x2e */ u_short itops;
	/* 0x30 */ u_short mark;
	/* 0x32 */ u_short num;
	/* 0x34 */ u_char error;
	/* 0x35 */ u_char cl;
	/* 0x36 */ u_char wl;
	/* 0x37 */ u_char cmod;
	/* 0x38 */ u_char pad;
} sceDevVif0Cnd;

typedef struct { // 0x44
	/* 0x00 */ u_int row[4];
	/* 0x10 */ u_int col[4];
	/* 0x20 */ u_int mask;
	/* 0x24 */ u_int code;
	/* 0x28 */ u_int stat;
	/* 0x2c */ u_short itop;
	/* 0x2e */ u_short itops;
	/* 0x30 */ u_short base;
	/* 0x32 */ u_short offset;
	/* 0x34 */ u_short top;
	/* 0x36 */ u_short tops;
	/* 0x38 */ u_short mark;
	/* 0x3a */ u_short num;
	/* 0x3c */ u_char error;
	/* 0x3d */ u_char cl;
	/* 0x3e */ u_char wl;
	/* 0x3f */ u_char cmod;
	/* 0x40 */ u_char pad;
} sceDevVif1Cnd;

typedef struct { // 0x10
	/* 0x0:0 */ long unsigned int NLOOP : 15;
	/* 0x1:7 */ long unsigned int EOP : 1;
	/* 0x2:0 */ long unsigned int pad16 : 16;
	/* 0x4:0 */ long unsigned int id : 14;
	/* 0x5:6 */ long unsigned int PRE : 1;
	/* 0x5:7 */ long unsigned int PRIM : 11;
	/* 0x7:2 */ long unsigned int FLG : 2;
	/* 0x7:4 */ long unsigned int NREG : 4;
	/* 0x8:0 */ long unsigned int REGS0 : 4;
	/* 0x8:4 */ long unsigned int REGS1 : 4;
	/* 0x9:0 */ long unsigned int REGS2 : 4;
	/* 0x9:4 */ long unsigned int REGS3 : 4;
	/* 0xa:0 */ long unsigned int REGS4 : 4;
	/* 0xa:4 */ long unsigned int REGS5 : 4;
	/* 0xb:0 */ long unsigned int REGS6 : 4;
	/* 0xb:4 */ long unsigned int REGS7 : 4;
	/* 0xc:0 */ long unsigned int REGS8 : 4;
	/* 0xc:4 */ long unsigned int REGS9 : 4;
	/* 0xd:0 */ long unsigned int REGS10 : 4;
	/* 0xd:4 */ long unsigned int REGS11 : 4;
	/* 0xe:0 */ long unsigned int REGS12 : 4;
	/* 0xe:4 */ long unsigned int REGS13 : 4;
	/* 0xf:0 */ long unsigned int REGS14 : 4;
	/* 0xf:4 */ long unsigned int REGS15 : 4;
} sceGifTag;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int A : 2;
	/* 0x0:2 */ long unsigned int B : 2;
	/* 0x0:4 */ long unsigned int C : 2;
	/* 0x0:6 */ long unsigned int D : 2;
	/* 0x1:0 */ long unsigned int pad8 : 24;
	/* 0x4:0 */ long unsigned int FIX : 8;
	/* 0x5:0 */ long unsigned int pad40 : 24;
} sceGsAlpha;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int SBP : 14;
	/* 0x1:6 */ long unsigned int pad14 : 2;
	/* 0x2:0 */ long unsigned int SBW : 6;
	/* 0x2:6 */ long unsigned int pad22 : 2;
	/* 0x3:0 */ long unsigned int SPSM : 6;
	/* 0x3:6 */ long unsigned int pad30 : 2;
	/* 0x4:0 */ long unsigned int DBP : 14;
	/* 0x5:6 */ long unsigned int pad46 : 2;
	/* 0x6:0 */ long unsigned int DBW : 6;
	/* 0x6:6 */ long unsigned int pad54 : 2;
	/* 0x7:0 */ long unsigned int DPSM : 6;
	/* 0x7:6 */ long unsigned int pad62 : 2;
} sceGsBitbltbuf;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int WMS : 2;
	/* 0x0:2 */ long unsigned int WMT : 2;
	/* 0x0:4 */ long unsigned int MINU : 10;
	/* 0x1:6 */ long unsigned int MAXU : 10;
	/* 0x3:0 */ long unsigned int MINV : 10;
	/* 0x4:2 */ long unsigned int MAXV : 10;
	/* 0x5:4 */ long unsigned int pad44 : 20;
} sceGsClamp;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int CLAMP : 1;
	/* 0x0:1 */ long unsigned int pad01 : 63;
} sceGsColclamp;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int DIMX00 : 3;
	/* 0x0:3 */ long unsigned int pad00 : 1;
	/* 0x0:4 */ long unsigned int DIMX01 : 3;
	/* 0x0:7 */ long unsigned int pad01 : 1;
	/* 0x1:0 */ long unsigned int DIMX02 : 3;
	/* 0x1:3 */ long unsigned int pad02 : 1;
	/* 0x1:4 */ long unsigned int DIMX03 : 3;
	/* 0x1:7 */ long unsigned int pad03 : 1;
	/* 0x2:0 */ long unsigned int DIMX10 : 3;
	/* 0x2:3 */ long unsigned int pad10 : 1;
	/* 0x2:4 */ long unsigned int DIMX11 : 3;
	/* 0x2:7 */ long unsigned int pad11 : 1;
	/* 0x3:0 */ long unsigned int DIMX12 : 3;
	/* 0x3:3 */ long unsigned int pad12 : 1;
	/* 0x3:4 */ long unsigned int DIMX13 : 3;
	/* 0x3:7 */ long unsigned int pad13 : 1;
	/* 0x4:0 */ long unsigned int DIMX20 : 3;
	/* 0x4:3 */ long unsigned int pad20 : 1;
	/* 0x4:4 */ long unsigned int DIMX21 : 3;
	/* 0x4:7 */ long unsigned int pad21 : 1;
	/* 0x5:0 */ long unsigned int DIMX22 : 3;
	/* 0x5:3 */ long unsigned int pad22 : 1;
	/* 0x5:4 */ long unsigned int DIMX23 : 3;
	/* 0x5:7 */ long unsigned int pad23 : 1;
	/* 0x6:0 */ long unsigned int DIMX30 : 3;
	/* 0x6:3 */ long unsigned int pad30 : 1;
	/* 0x6:4 */ long unsigned int DIMX31 : 3;
	/* 0x6:7 */ long unsigned int pad31 : 1;
	/* 0x7:0 */ long unsigned int DIMX32 : 3;
	/* 0x7:3 */ long unsigned int pad32 : 1;
	/* 0x7:4 */ long unsigned int DIMX33 : 3;
	/* 0x7:7 */ long unsigned int pad33 : 1;
} sceGsDimx;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int DTHE : 1;
	/* 0x0:1 */ long unsigned int pad01 : 63;
} sceGsDthe;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int FBA : 1;
	/* 0x0:1 */ long unsigned int pad01 : 63;
} sceGsFba;

typedef struct { // 0x8
	/* 0x0 */ long unsigned int pad00;
} sceGsFinish;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int pad00 : 56;
	/* 0x7:0 */ long unsigned int F : 8;
} sceGsFog;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int FCR : 8;
	/* 0x1:0 */ long unsigned int FCG : 8;
	/* 0x2:0 */ long unsigned int FCB : 8;
	/* 0x3:0 */ long unsigned int pad24 : 40;
} sceGsFogcol;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int FBP : 9;
	/* 0x1:1 */ long unsigned int pad09 : 7;
	/* 0x2:0 */ long unsigned int FBW : 6;
	/* 0x2:6 */ long unsigned int pad22 : 2;
	/* 0x3:0 */ long unsigned int PSM : 6;
	/* 0x3:6 */ long unsigned int pad30 : 2;
	/* 0x4:0 */ long unsigned int FBMSK : 32;
} sceGsFrame;

typedef struct { // 0x8
	/* 0x0 */ long unsigned int WDATA;
} sceGsHwreg;

typedef struct { // 0x8
	/* 0x0 */ u_int ID;
	/* 0x4 */ u_int IDMSK;
} sceGsLabel;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int TBP1 : 14;
	/* 0x1:6 */ long unsigned int TBW1 : 6;
	/* 0x2:4 */ long unsigned int TBP2 : 14;
	/* 0x4:2 */ long unsigned int TBW2 : 6;
	/* 0x5:0 */ long unsigned int TBP3 : 14;
	/* 0x6:6 */ long unsigned int TBW3 : 6;
	/* 0x7:4 */ long unsigned int pad60 : 4;
} sceGsMiptbp1;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int TBP4 : 14;
	/* 0x1:6 */ long unsigned int TBW4 : 6;
	/* 0x2:4 */ long unsigned int TBP5 : 14;
	/* 0x4:2 */ long unsigned int TBW5 : 6;
	/* 0x5:0 */ long unsigned int TBP6 : 14;
	/* 0x6:6 */ long unsigned int TBW6 : 6;
	/* 0x7:4 */ long unsigned int pad60 : 4;
} sceGsMiptbp2;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int PABE : 1;
	/* 0x0:1 */ long unsigned int pad01 : 63;
} sceGsPabe;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int PRIM : 3;
	/* 0x0:3 */ long unsigned int IIP : 1;
	/* 0x0:4 */ long unsigned int TME : 1;
	/* 0x0:5 */ long unsigned int FGE : 1;
	/* 0x0:6 */ long unsigned int ABE : 1;
	/* 0x0:7 */ long unsigned int AA1 : 1;
	/* 0x1:0 */ long unsigned int FST : 1;
	/* 0x1:1 */ long unsigned int CTXT : 1;
	/* 0x1:2 */ long unsigned int FIX : 1;
	/* 0x1:3 */ long unsigned int pad11 : 53;
} sceGsPrim;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int pad00 : 3;
	/* 0x0:3 */ long unsigned int IIP : 1;
	/* 0x0:4 */ long unsigned int TME : 1;
	/* 0x0:5 */ long unsigned int FGE : 1;
	/* 0x0:6 */ long unsigned int ABE : 1;
	/* 0x0:7 */ long unsigned int AA1 : 1;
	/* 0x1:0 */ long unsigned int FST : 1;
	/* 0x1:1 */ long unsigned int CTXT : 1;
	/* 0x1:2 */ long unsigned int FIX : 1;
	/* 0x1:3 */ long unsigned int pad11 : 53;
} sceGsPrmode;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int AC : 1;
	/* 0x0:1 */ long unsigned int pad01 : 63;
} sceGsPrmodecont;

typedef struct { // 0x8
	/* 0x0:0 */ u_int R : 8;
	/* 0x1:0 */ u_int G : 8;
	/* 0x2:0 */ u_int B : 8;
	/* 0x3:0 */ u_int A : 8;
	/* 0x4 */ float Q;
} sceGsRgbaq;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int MSK : 2;
	/* 0x0:2 */ long unsigned int pad02 : 62;
} sceGsScanmsk;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int SCAX0 : 11;
	/* 0x1:3 */ long unsigned int pad11 : 5;
	/* 0x2:0 */ long unsigned int SCAX1 : 11;
	/* 0x3:3 */ long unsigned int pad27 : 5;
	/* 0x4:0 */ long unsigned int SCAY0 : 11;
	/* 0x5:3 */ long unsigned int pad43 : 5;
	/* 0x6:0 */ long unsigned int SCAY1 : 11;
	/* 0x7:3 */ long unsigned int pad59 : 5;
} sceGsScissor;

typedef struct { // 0x8
	/* 0x0 */ u_int ID;
	/* 0x4 */ u_int IDMSK;
} sceGsSignal;

typedef struct { // 0x8
	/* 0x0 */ float S;
	/* 0x4 */ float T;
} sceGsSt;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int ATE : 1;
	/* 0x0:1 */ long unsigned int ATST : 3;
	/* 0x0:4 */ long unsigned int AREF : 8;
	/* 0x1:4 */ long unsigned int AFAIL : 2;
	/* 0x1:6 */ long unsigned int DATE : 1;
	/* 0x1:7 */ long unsigned int DATM : 1;
	/* 0x2:0 */ long unsigned int ZTE : 1;
	/* 0x2:1 */ long unsigned int ZTST : 2;
	/* 0x2:3 */ long unsigned int pad19 : 45;
} sceGsTest;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int TBP0 : 14;
	/* 0x1:6 */ long unsigned int TBW : 6;
	/* 0x2:4 */ long unsigned int PSM : 6;
	/* 0x3:2 */ long unsigned int TW : 4;
	/* 0x3:6 */ long unsigned int TH : 4;
	/* 0x4:2 */ long unsigned int TCC : 1;
	/* 0x4:3 */ long unsigned int TFX : 2;
	/* 0x4:5 */ long unsigned int CBP : 14;
	/* 0x6:3 */ long unsigned int CPSM : 4;
	/* 0x6:7 */ long unsigned int CSM : 1;
	/* 0x7:0 */ long unsigned int CSA : 5;
	/* 0x7:5 */ long unsigned int CLD : 3;
} sceGsTex0;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int LCM : 1;
	/* 0x0:1 */ long unsigned int pad01 : 1;
	/* 0x0:2 */ long unsigned int MXL : 3;
	/* 0x0:5 */ long unsigned int MMAG : 1;
	/* 0x0:6 */ long unsigned int MMIN : 3;
	/* 0x1:1 */ long unsigned int MTBA : 1;
	/* 0x1:2 */ long unsigned int pad10 : 9;
	/* 0x2:3 */ long unsigned int L : 2;
	/* 0x2:5 */ long unsigned int pad21 : 11;
	/* 0x4:0 */ long unsigned int K : 12;
	/* 0x5:4 */ long unsigned int pad44 : 20;
} sceGsTex1;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int pad00 : 20;
	/* 0x2:4 */ long unsigned int PSM : 6;
	/* 0x3:2 */ long unsigned int pad26 : 11;
	/* 0x4:5 */ long unsigned int CBP : 14;
	/* 0x6:3 */ long unsigned int CPSM : 4;
	/* 0x6:7 */ long unsigned int CSM : 1;
	/* 0x7:0 */ long unsigned int CSA : 5;
	/* 0x7:5 */ long unsigned int CLD : 3;
} sceGsTex2;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int TA0 : 8;
	/* 0x1:0 */ long unsigned int pad08 : 7;
	/* 0x1:7 */ long unsigned int AEM : 1;
	/* 0x2:0 */ long unsigned int pad16 : 16;
	/* 0x4:0 */ long unsigned int TA1 : 8;
	/* 0x5:0 */ long unsigned int pad40 : 24;
} sceGsTexa;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int CBW : 6;
	/* 0x0:6 */ long unsigned int COU : 6;
	/* 0x1:4 */ long unsigned int COV : 10;
	/* 0x2:6 */ long unsigned int pad22 : 42;
} sceGsTexclut;

typedef struct { // 0x8
	/* 0x0 */ long unsigned int pad00;
} sceGsTexflush;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int XDR : 2;
	/* 0x0:2 */ long unsigned int pad02 : 62;
} sceGsTrxdir;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int SSAX : 11;
	/* 0x1:3 */ long unsigned int pad11 : 5;
	/* 0x2:0 */ long unsigned int SSAY : 11;
	/* 0x3:3 */ long unsigned int pad27 : 5;
	/* 0x4:0 */ long unsigned int DSAX : 11;
	/* 0x5:3 */ long unsigned int pad43 : 5;
	/* 0x6:0 */ long unsigned int DSAY : 11;
	/* 0x7:3 */ long unsigned int DIR : 2;
	/* 0x7:5 */ long unsigned int pad61 : 3;
} sceGsTrxpos;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int RRW : 12;
	/* 0x1:4 */ long unsigned int pad12 : 20;
	/* 0x4:0 */ long unsigned int RRH : 12;
	/* 0x5:4 */ long unsigned int pad44 : 20;
} sceGsTrxreg;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int U : 14;
	/* 0x1:6 */ long unsigned int pad14 : 2;
	/* 0x2:0 */ long unsigned int V : 14;
	/* 0x3:6 */ long unsigned int pad30 : 34;
} sceGsUv;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int OFX : 16;
	/* 0x2:0 */ long unsigned int pad16 : 16;
	/* 0x4:0 */ long unsigned int OFY : 16;
	/* 0x6:0 */ long unsigned int pad48 : 16;
} sceGsXyoffset;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int X : 16;
	/* 0x2:0 */ long unsigned int Y : 16;
	/* 0x4:0 */ long unsigned int Z : 32;
} sceGsXyz;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int X : 16;
	/* 0x2:0 */ long unsigned int Y : 16;
	/* 0x4:0 */ long unsigned int Z : 24;
	/* 0x7:0 */ long unsigned int F : 8;
} sceGsXyzf;

typedef struct { // 0x8
	/* 0x0:0 */ long unsigned int ZBP : 9;
	/* 0x1:1 */ long unsigned int pad09 : 15;
	/* 0x3:0 */ long unsigned int PSM : 4;
	/* 0x3:4 */ long unsigned int pad28 : 4;
	/* 0x4:0 */ long unsigned int ZMSK : 1;
	/* 0x4:1 */ long unsigned int pad33 : 31;
} sceGsZbuf;

typedef struct { // 0x28
	/* 0x00 */ tGS_PMODE pmode;
	/* 0x08 */ tGS_SMODE2 smode2;
	/* 0x10 */ tGS_DISPFB2 dispfb;
	/* 0x18 */ tGS_DISPLAY2 display;
	/* 0x20 */ tGS_BGCOLOR bgcolor;
} sceGsDispEnv;

typedef struct { // 0x80
	/* 0x00 */ sceGsFrame frame1;
	/* 0x08 */ u_long frame1addr;
	/* 0x10 */ sceGsZbuf zbuf1;
	/* 0x18 */ long int zbuf1addr;
	/* 0x20 */ sceGsXyoffset xyoffset1;
	/* 0x28 */ long int xyoffset1addr;
	/* 0x30 */ sceGsScissor scissor1;
	/* 0x38 */ long int scissor1addr;
	/* 0x40 */ sceGsPrmodecont prmodecont;
	/* 0x48 */ long int prmodecontaddr;
	/* 0x50 */ sceGsColclamp colclamp;
	/* 0x58 */ long int colclampaddr;
	/* 0x60 */ sceGsDthe dthe;
	/* 0x68 */ long int dtheaddr;
	/* 0x70 */ sceGsTest test1;
	/* 0x78 */ long int test1addr;
} sceGsDrawEnv1;

typedef struct { // 0x80
	/* 0x00 */ sceGsFrame frame2;
	/* 0x08 */ u_long frame2addr;
	/* 0x10 */ sceGsZbuf zbuf2;
	/* 0x18 */ long int zbuf2addr;
	/* 0x20 */ sceGsXyoffset xyoffset2;
	/* 0x28 */ long int xyoffset2addr;
	/* 0x30 */ sceGsScissor scissor2;
	/* 0x38 */ long int scissor2addr;
	/* 0x40 */ sceGsPrmodecont prmodecont;
	/* 0x48 */ long int prmodecontaddr;
	/* 0x50 */ sceGsColclamp colclamp;
	/* 0x58 */ long int colclampaddr;
	/* 0x60 */ sceGsDthe dthe;
	/* 0x68 */ long int dtheaddr;
	/* 0x70 */ sceGsTest test2;
	/* 0x78 */ long int test2addr;
} sceGsDrawEnv2;

typedef struct { // 0x60
	/* 0x00 */ sceGsTest testa;
	/* 0x08 */ long int testaaddr;
	/* 0x10 */ sceGsPrim prim;
	/* 0x18 */ long int primaddr;
	/* 0x20 */ sceGsRgbaq rgbaq;
	/* 0x28 */ long int rgbaqaddr;
	/* 0x30 */ sceGsXyz xyz2a;
	/* 0x38 */ long int xyz2aaddr;
	/* 0x40 */ sceGsXyz xyz2b;
	/* 0x48 */ long int xyz2baddr;
	/* 0x50 */ sceGsTest testb;
	/* 0x58 */ long int testbaddr;
} sceGsClear;

typedef struct { // 0x230
	/* 0x000 */ sceGsDispEnv disp[2];
	/* 0x050 */ sceGifTag giftag0;
	/* 0x060 */ sceGsDrawEnv1 draw0;
	/* 0x0e0 */ sceGsClear clear0;
	/* 0x140 */ sceGifTag giftag1;
	/* 0x150 */ sceGsDrawEnv1 draw1;
	/* 0x1d0 */ sceGsClear clear1;
} sceGsDBuff;

typedef struct { // 0x330
	/* 0x000 */ sceGsDispEnv disp[2];
	/* 0x050 */ sceGifTag giftag0;
	/* 0x060 */ sceGsDrawEnv1 draw01;
	/* 0x0e0 */ sceGsDrawEnv2 draw02;
	/* 0x160 */ sceGsClear clear0;
	/* 0x1c0 */ sceGifTag giftag1;
	/* 0x1d0 */ sceGsDrawEnv1 draw11;
	/* 0x250 */ sceGsDrawEnv2 draw12;
	/* 0x2d0 */ sceGsClear clear1;
} sceGsDBuffDc;

typedef struct { // 0x40
	/* 0x00 */ sceGsTexflush texflush;
	/* 0x08 */ long int texflushaddr;
	/* 0x10 */ sceGsTex1 tex11;
	/* 0x18 */ long int tex11addr;
	/* 0x20 */ sceGsTex0 tex01;
	/* 0x28 */ long int tex01addr;
	/* 0x30 */ sceGsClamp clamp1;
	/* 0x38 */ long int clamp1addr;
} sceGsTexEnv;

typedef struct { // 0x40
	/* 0x00 */ sceGsTexflush texflush;
	/* 0x08 */ long int texflushaddr;
	/* 0x10 */ sceGsTex1 tex12;
	/* 0x18 */ long int tex12addr;
	/* 0x20 */ sceGsTex0 tex02;
	/* 0x28 */ long int tex02addr;
	/* 0x30 */ sceGsClamp clamp2;
	/* 0x38 */ long int clamp2addr;
} sceGsTexEnv2;

typedef struct { // 0x40
	/* 0x00 */ sceGsAlpha alpha1;
	/* 0x08 */ long int alpha1addr;
	/* 0x10 */ sceGsPabe pabe;
	/* 0x18 */ long int pabeaddr;
	/* 0x20 */ sceGsTexa texa;
	/* 0x28 */ long int texaaddr;
	/* 0x30 */ sceGsFba fba1;
	/* 0x38 */ long int fba1addr;
} sceGsAlphaEnv;

typedef struct { // 0x40
	/* 0x00 */ sceGsAlpha alpha2;
	/* 0x08 */ long int alpha2addr;
	/* 0x10 */ sceGsPabe pabe;
	/* 0x18 */ long int pabeaddr;
	/* 0x20 */ sceGsTexa texa;
	/* 0x28 */ long int texaaddr;
	/* 0x30 */ sceGsFba fba2;
	/* 0x38 */ long int fba2addr;
} sceGsAlphaEnv2;

typedef struct { // 0x60
	/* 0x00 */ sceGifTag giftag0;
	/* 0x10 */ sceGsBitbltbuf bitbltbuf;
	/* 0x18 */ long int bitbltbufaddr;
	/* 0x20 */ sceGsTrxpos trxpos;
	/* 0x28 */ long int trxposaddr;
	/* 0x30 */ sceGsTrxreg trxreg;
	/* 0x38 */ long int trxregaddr;
	/* 0x40 */ sceGsTrxdir trxdir;
	/* 0x48 */ long int trxdiraddr;
	/* 0x50 */ sceGifTag giftag1;
} sceGsLoadImage;

typedef struct { // 0x70
	/* 0x00 */ u_int vifcode[4];
	/* 0x10 */ sceGifTag giftag;
	/* 0x20 */ sceGsBitbltbuf bitbltbuf;
	/* 0x28 */ long int bitbltbufaddr;
	/* 0x30 */ sceGsTrxpos trxpos;
	/* 0x38 */ long int trxposaddr;
	/* 0x40 */ sceGsTrxreg trxreg;
	/* 0x48 */ long int trxregaddr;
	/* 0x50 */ sceGsFinish finish;
	/* 0x58 */ long int finishaddr;
	/* 0x60 */ sceGsTrxdir trxdir;
	/* 0x68 */ long int trxdiraddr;
} sceGsStoreImage;

typedef struct { // 0x10
	/* 0x0 */ short int sceGsInterMode;
	/* 0x2 */ short int sceGsOutMode;
	/* 0x4 */ short int sceGsFFMode;
	/* 0x6 */ short int sceGsVersion;
	/* 0x8 */ int (*sceGsVSCfunc)(/* parameters unknown */);
	/* 0xc */ int sceGsVSCid;
} sceGsGParam;

typedef struct { // 0x10
	/* 0x0 */ u_int *pCurrent;
	/* 0x4 */ u_long128 *pBase;
	/* 0x8 */ u_long128 *pDmaTag;
	/* 0xc */ u_long *pGifTag;
} sceGifPacket;

typedef struct { // 0x180
	/* 0x000 */ u_char y[256];
	/* 0x100 */ u_char cb[64];
	/* 0x140 */ u_char cr[64];
} sceIpuRAW8;

typedef struct { // 0x300
	/* 0x000 */ short int y[256];
	/* 0x200 */ short int cb[64];
	/* 0x280 */ short int cr[64];
} sceIpuRAW16;

typedef struct { // 0x400
	/* 0x000 */ u_int pix[256];
} sceIpuRGB32;

typedef struct { // 0x200
	/* 0x000 */ u_short pix[256];
} sceIpuRGB16;

typedef struct { // 0x80
	/* 0x00 */ u_int pix[32];
} sceIpuINDX4;

typedef struct { // 0x24
	/* 0x00 */ u_int d4madr;
	/* 0x04 */ u_int d4tadr;
	/* 0x08 */ u_int d4qwc;
	/* 0x0c */ u_int d4chcr;
	/* 0x10 */ u_int d3madr;
	/* 0x14 */ u_int d3qwc;
	/* 0x18 */ u_int d3chcr;
	/* 0x1c */ u_int ipubp;
	/* 0x20 */ u_int ipuctrl;
} sceIpuDmaEnv;

struct sce_stat { // 0x40
	/* 0x00 */ unsigned int st_mode;
	/* 0x04 */ unsigned int st_attr;
	/* 0x08 */ unsigned int st_size;
	/* 0x0c */ unsigned char st_ctime[8];
	/* 0x14 */ unsigned char st_atime[8];
	/* 0x1c */ unsigned char st_mtime[8];
	/* 0x24 */ unsigned int st_hisize;
	/* 0x28 */ unsigned int st_private[6];
};

struct sce_dirent { // 0x144
	/* 0x000 */ sce_stat d_stat;
	/* 0x040 */ char d_name[256];
	/* 0x140 */ void *d_private;
};

typedef struct { // 0x10
	/* 0x0 */ unsigned int epc;
	/* 0x4 */ unsigned int gp;
	/* 0x8 */ unsigned int sp;
	/* 0xc */ unsigned int dummy;
} sceExecData;

typedef int _iconVu0IVECTOR[4];
typedef float _iconVu0FVECTOR[4];

typedef struct { // 0x3c4
	/* 0x000 */ unsigned char Head[4];
	/* 0x004 */ short unsigned int Reserv1;
	/* 0x006 */ short unsigned int OffsLF;
	/* 0x008 */ unsigned int Reserv2;
	/* 0x00c */ unsigned int TransRate;
	/* 0x010 */ _iconVu0IVECTOR BgColor[4];
	/* 0x050 */ _iconVu0FVECTOR LightDir[3];
	/* 0x080 */ _iconVu0FVECTOR LightColor[3];
	/* 0x0b0 */ _iconVu0FVECTOR Ambient;
	/* 0x0c0 */ unsigned char TitleName[68];
	/* 0x104 */ unsigned char FnameView[64];
	/* 0x144 */ unsigned char FnameCopy[64];
	/* 0x184 */ unsigned char FnameDel[64];
	/* 0x1c4 */ unsigned char Reserve3[512];
} sceMcIconSys;

typedef struct { // 0x40
	/* 0x00 */ struct { // 0x8
		/* 0x00 */ unsigned char Resv2;
		/* 0x01 */ unsigned char Sec;
		/* 0x02 */ unsigned char Min;
		/* 0x03 */ unsigned char Hour;
		/* 0x04 */ unsigned char Day;
		/* 0x05 */ unsigned char Month;
		/* 0x06 */ short unsigned int Year;
	} _Create;
	/* 0x08 */ struct { // 0x8
		/* 0x08 */ unsigned char Resv2;
		/* 0x09 */ unsigned char Sec;
		/* 0x0a */ unsigned char Min;
		/* 0x0b */ unsigned char Hour;
		/* 0x0c */ unsigned char Day;
		/* 0x0d */ unsigned char Month;
		/* 0x0e */ short unsigned int Year;
	} _Modify;
	/* 0x10 */ unsigned int FileSizeByte;
	/* 0x14 */ short unsigned int AttrFile;
	/* 0x16 */ short unsigned int Reserve1;
	/* 0x18 */ unsigned int Reserve2;
	/* 0x1c */ unsigned int PdaAplNo;
	/* 0x20 */ unsigned char EntryName[32];
} sceMcTblGetDir;

typedef int qword[4];
typedef int sceVu0IVECTOR[4];
typedef float sceVu0FVECTOR[4];
typedef float sceVu0FMATRIX[4][4];

struct _sif_rpc_data { // 0x10
	/* 0x0 */ void *paddr;
	/* 0x4 */ unsigned int pid;
	/* 0x8 */ int tid;
	/* 0xc */ unsigned int mode;
};

typedef _sif_rpc_data sceSifRpcData;
typedef void (*sceSifEndFunc)(/* parameters unknown */);

struct _sif_client_data { // 0x28
	/* 0x00 */ _sif_rpc_data rpcd;
	/* 0x10 */ unsigned int command;
	/* 0x14 */ void *buff;
	/* 0x18 */ void *cbuff;
	/* 0x1c */ sceSifEndFunc func;
	/* 0x20 */ void *para;
	/* 0x24 */ _sif_serve_data *serve;
};

typedef _sif_client_data sceSifClientData;

struct _sif_receive_data { // 0x1c
	/* 0x00 */ _sif_rpc_data rpcd;
	/* 0x10 */ void *src;
	/* 0x14 */ void *dest;
	/* 0x18 */ int size;
};

typedef _sif_receive_data sceSifReceiveData;
typedef void* (*sceSifRpcFunc)(/* parameters unknown */);

struct _sif_serve_data { // 0x44
	/* 0x00 */ unsigned int command;
	/* 0x04 */ sceSifRpcFunc func;
	/* 0x08 */ void *buff;
	/* 0x0c */ int size;
	/* 0x10 */ sceSifRpcFunc cfunc;
	/* 0x14 */ void *cbuff;
	/* 0x18 */ int csize;
	/* 0x1c */ sceSifClientData *client;
	/* 0x20 */ void *paddr;
	/* 0x24 */ unsigned int fno;
	/* 0x28 */ void *receive;
	/* 0x2c */ int rsize;
	/* 0x30 */ int rmode;
	/* 0x34 */ unsigned int rid;
	/* 0x38 */ _sif_serve_data *link;
	/* 0x3c */ _sif_serve_data *next;
	/* 0x40 */ _sif_queue_data *base;
};

typedef _sif_serve_data sceSifServeData;

struct _sif_queue_data { // 0x18
	/* 0x00 */ int key;
	/* 0x04 */ int active;
	/* 0x08 */ _sif_serve_data *link;
	/* 0x0c */ _sif_serve_data *start;
	/* 0x10 */ _sif_serve_data *end;
	/* 0x14 */ _sif_queue_data *next;
};

typedef _sif_queue_data sceSifQueueData;

typedef struct { // 0x10
	/* 0x0:0 */ unsigned int psize : 8;
	/* 0x1:0 */ unsigned int dsize : 24;
	/* 0x4 */ unsigned int daddr;
	/* 0x8 */ unsigned int fcode;
	/* 0xc */ unsigned int opt;
} sceSifCmdHdr;

typedef void (*sceSifCmdHandler)(/* parameters unknown */);

typedef struct { // 0x8
	/* 0x0 */ sceSifCmdHandler func;
	/* 0x4 */ void *data;
} sceSifCmdData;

typedef struct { // 0x14
	/* 0x00 */ sceSifCmdHdr chdr;
	/* 0x10 */ void *newaddr;
} sceSifCmdCSData;

typedef struct { // 0x18
	/* 0x00 */ sceSifCmdHdr chdr;
	/* 0x10 */ int rno;
	/* 0x14 */ unsigned int value;
} sceSifCmdSRData;

typedef struct { // 0x68
	/* 0x00 */ sceSifCmdHdr chdr;
	/* 0x10 */ int size;
	/* 0x14 */ int flag;
	/* 0x18 */ char arg[80];
} sceSifCmdResetData;

enum {
	LANG_ENGLISH = 0,
	LANG_FRENCH = 1,
	LANG_GERMAN = 2,
	LANG_ITALIAN = 3,
	LANG_SPANISH = 4,
	LANG_NUM = 5
};

enum {
	STR_NULL = 0,
	STR_TILES_START_ALL = 1,
	STR_TILES_START_TEAM_RED = 2,
	STR_TILES_START_TEAM_BLUE = 3,
	STR_TILES_START_TEAM_YELLOW = 4,
	STR_TILES_START_TEAM_GREEN = 5,
	STR_TILES_BAG_BASE_RED = 6,
	STR_TILES_BAG_BASE_BLUE = 7,
	STR_TILES_BAG_BASE_YELLOW = 8,
	STR_TILES_BAG_BASE_GREEN = 9,
	STR_TILES_TELEPORT_A = 10,
	STR_TILES_TELEPORT_B = 11,
	STR_TILES_TELEPORT_C = 12,
	STR_TILES_TELEPORT_D = 13,
	STR_TILES_TELEPORT_E = 14,
	STR_TILES_TELEPORT_F = 15,
	STR_TILES_TELEPORT_G = 16,
	STR_TILES_TELEPORT_H = 17,
	STR_TILES_TELEPORT_I = 18,
	STR_TILES_TELEPORT_J = 19,
	STR_TILES_PICKUP_GUN_1 = 20,
	STR_TILES_PICKUP_GUN_2 = 21,
	STR_TILES_PICKUP_GUN_3 = 22,
	STR_TILES_PICKUP_GUN_4 = 23,
	STR_TILES_PICKUP_GUN_5 = 24,
	STR_TILES_PICKUP_AMMO_1 = 25,
	STR_TILES_PICKUP_AMMO_2 = 26,
	STR_TILES_PICKUP_AMMO_3 = 27,
	STR_TILES_PICKUP_AMMO_4 = 28,
	STR_TILES_PICKUP_AMMO_5 = 29,
	STR_TILES_KEYCARD_1 = 30,
	STR_TILES_KEYCARD_2 = 31,
	STR_TILES_KEYCARD_3 = 32,
	STR_TILES_KEYCARD_4 = 33,
	STR_TILES_BAG_BAGTAG = 34,
	STR_TILES_BAG_KNOCKOUT = 35,
	STR_TILES_HEALTH_LO = 36,
	STR_TILES_HEALTH_HI = 37,
	STR_TILES_ARMOUR_LO = 38,
	STR_TILES_ARMOUR_HI = 39,
	STR_TILES_POWERUP_1 = 40,
	STR_TILES_POWERUP_2 = 41,
	STR_TILES_POWERUP_3 = 42,
	STR_TILES_POWERUP_4 = 43,
	STR_TILES_POWERUP_5 = 44,
	STR_TILES_ITEM_PROP = 45,
	STR_TILES_ITEM_FIXEDGUN = 46,
	STR_TILES_ITEM_AUTOGUN = 47,
	STR_TILES_NPC_1 = 48,
	STR_TILES_NPC_2 = 49,
	STR_TILES_NPC_3 = 50,
	STR_TILES_NPC_4 = 51,
	STR_TILES_NPC_5 = 52,
	STR_TILES_NPC_6 = 53,
	STR_CHR_EVIL_COWBOY = 54,
	STR_CHR_JUNGLE_QUEEN = 55,
	STR_CHR_MONKEY = 56,
	STR_CHR_STONE_GOLEM = 57,
	STR_CHR_WOOD_GOLEM = 58,
	STR_CHR_COWGIRL = 59,
	STR_CHR_MAIN_COWBOY = 60,
	STR_CHR_MEXICAN = 61,
	STR_CHR_CURTAINS_COWBOY = 62,
	STR_CHR_MINER = 63,
	STR_CHR_SALOON_HOOER = 64,
	STR_CHR_SKINNY_HOOER = 65,
	STR_CHR_BRACES_THUG = 66,
	STR_CHR_GODFATHER = 67,
	STR_CHR_JESTER = 68,
	STR_CHR_WITCH = 69,
	STR_CHR_BARREL_ROBOT = 70,
	STR_CHR_RAILSPIDER_ROBOT = 71,
	STR_CHR_BERET_SOLDIER_ARTIC = 72,
	STR_CHR_BERET_SOLDIER_DESERT = 73,
	STR_CHR_BERET_SOLDIER_WOOD = 74,
	STR_CHR_BERET_SOLDIER_SPFORCE = 75,
	STR_CHR_BERET_SOLDIER_ZOMBIE = 76,
	STR_CHR_HELMET_SOLDIER_DESERT = 77,
	STR_CHR_HELMET_SOLDIER_ARTIC = 78,
	STR_CHR_HELMET_SOLDIER_WOOD = 79,
	STR_CHR_HELMET_SOLDIER_SPFORCE = 80,
	STR_CHR_HELMET_SOLDIER_ZOMBIE = 81,
	STR_CHR_FEMALE_SOLDIER_ARTIC = 82,
	STR_CHR_FEMALE_SOLDIER_DESERT = 83,
	STR_CHR_FEMALE_SOLDIER_HAT = 84,
	STR_CHR_FEMALE_SOLDIER_SPFORCE = 85,
	STR_CHR_FEMALE_SOLDIER_WOOD = 86,
	STR_CHR_FEMALE_SOLDIER_ZOMBIE = 87,
	STR_CHR_FEMALE_SOLDIER_ZOMBIEHAT = 88,
	STR_CHR_GASMASK_SOLDIER_ARTIC = 89,
	STR_CHR_GASMASK_SOLDIER_DESERT = 90,
	STR_CHR_GASMASK_SOLDIER_SPFORCE = 91,
	STR_CHR_GASMASK_SOLDIER_WOOD = 92,
	STR_CHR_GASMASK_SOLDIER_ZOMBIE = 93,
	STR_CHR_VEIL_SOLDIER_ARTIC = 94,
	STR_CHR_VEIL_SOLDIER_DESERT = 95,
	STR_CHR_VEIL_SOLDIER_SPFORCE = 96,
	STR_CHR_VEIL_SOLDIER_WOOD = 97,
	STR_CHR_VEIL_SOLDIER_ZOMBIE = 98,
	STR_CHR_SOLDIER_MUTANT = 99,
	STR_CHR_ILSA_NADIR = 100,
	STR_CHR_BIG_ROBOT = 101,
	STR_CHR_KID_ROBOT = 102,
	STR_CHR_JACQUES_MISERE = 103,
	STR_CHR_OLGA_STROM = 104,
	STR_CHR_MALEHOOD = 105,
	STR_CHR_CULTIST = 106,
	STR_CHR_DUCKMAN_DRAKE = 107,
	STR_CHR_DUCKMAN = 108,
	STR_CHR_THE_IMPERSONATOR = 109,
	STR_CHR_IMPERSONATOR = 110,
	STR_CHR_GINGERBREAD_MAN = 111,
	STR_CHR_GINGER = 112,
	STR_CHR_FARRAH_FUN_BUNNY = 113,
	STR_CHR_FUN_BUNNY = 114,
	STR_CHR_ROBOFISH = 115,
	STR_CHR_NONAME = 116,
	STR_CHR_PRIESTESS = 117,
	STR_CHR_LUMBERJACK = 118,
	STR_CHR_CHINESE_WAITER = 119,
	STR_CHR_WAITER = 120,
	STR_CHR_MR_BIG = 121,
	STR_CHR_FEMALE_ALIEN = 122,
	STR_CHR_PILLAR_ALIEN = 123,
	STR_CHR_FLOAT_ALIEN = 124,
	STR_CHR_RED_ALIEN = 125,
	STR_CHR_GREEN_ALIEN = 126,
	STR_CHR_FEMALE_CYBORG = 127,
	STR_CHR_SIAMESE_CYBORG = 128,
	STR_CHR_TUXEDO_CYBORG = 129,
	STR_CHR_BADASS_CYBORG = 130,
	STR_CHR_POLICE_ZOMBIE = 131,
	STR_CHR_GIRL_ZOMBIE = 132,
	STR_CHR_JACKET_ZOMBIE = 133,
	STR_CHR_BROWN_ZOMBIE = 134,
	STR_CHR_GREEN_ZOMBIE = 135,
	STR_CHR_HICK_MUTANT = 136,
	STR_CHR_FISHWIFE_MUTANT = 137,
	STR_CHR_INSECT_MUTANT = 138,
	STR_CHR_OVERALL_MUTANT = 139,
	STR_CHR_PRIEST_MUTANT = 140,
	STR_CHR_MALE_SWAT = 141,
	STR_CHR_GASMASK_SWAT = 142,
	STR_CHR_VEILED_SWAT = 143,
	STR_CHR_FEMALE_SWAT = 144,
	STR_CHR_SPACEWAYS_STEWARDESS = 145,
	STR_CHR_STEWARDESS = 146,
	STR_CHR_MALE_SOLDIER = 147,
	STR_CHR_GASMASK_SOLDIER = 148,
	STR_CHR_SHOCK_TROOPER = 149,
	STR_CHR_FEMALE_SOLDIER = 150,
	STR_CHR_TEETH_MUMMY = 151,
	STR_CHR_EYES_MUMMY = 152,
	STR_CHR_SUIT_HOODLUM = 153,
	STR_CHR_CHINESE_CHEF = 154,
	STR_CHR_CHEF = 155,
	STR_CHR_SKULL_ZOMBIE = 156,
	STR_CHR_TIMESPLITTER = 157,
	STR_CHR_BLUEROBOT = 158,
	STR_ENEMY_PHASE = 159,
	STR_ENEMY_COMPLETE = 160,
	STR_ENEMY_PHASE_BONUS = 161,
	STR_ENEMY_POINTS = 162,
	STR_FRONT_NONE1 = 163,
	STR_FRONT_ON1 = 164,
	STR_FRONT_OFF = 165,
	STR_FRONT_YES = 166,
	STR_FRONT_NO = 167,
	STR_FRONT_STATISTICS1 = 168,
	STR_FRONT_SAVING_GAME_STATUS = 169,
	STR_FRONT_SIGN_ON1 = 170,
	STR_FRONT_SELECT_GAME_TYPE = 171,
	STR_FRONT_AUDIO_VIDEO_OPTIONS1 = 172,
	STR_FRONT_SELECT_LEVEL = 173,
	STR_FRONT_SELECT_CHALLENGE = 174,
	STR_FRONT_MAPMAKER1 = 175,
	STR_FRONT_OPTIONS = 176,
	STR_FRONT_SETUP_WEAPONS = 177,
	STR_FRONT_SETUP_BOTS = 178,
	STR_FRONT_2_START = 179,
	STR_FRONT_2_SELECT = 180,
	STR_FRONT_2_ENTER = 181,
	STR_FRONT_CHEATS = 182,
	STR_FRONT_ON2 = 183,
	STR_FRONT_KILLS_LOSSES = 184,
	STR_FRONT_KILLS = 185,
	STR_FRONT_1_CHEATS_MENU = 186,
	STR_FRONT_PLAYER1 = 187,
	STR_FRONT_TIMESPLITTERS_SIGN_ONS_ON = 188,
	STR_FRONT_MEMORY_CARD_PS2_IN1 = 189,
	STR_FRONT_MAY_BE_CORRUPTED = 190,
	STR_FRONT_NO_TIMESPLITTERS_SIGN_ONS_ON = 191,
	STR_FRONT_MEMORY_CARD_PS2_IN2 = 192,
	STR_FRONT_TIMESPLITTERS_SIGN_ONS_IN = 193,
	STR_FRONT_HAVE = 194,
	STR_FRONT_ALREADY_BEEN_LOADED = 195,
	STR_FRONT_SAVE_PLAYER = 196,
	STR_FRONT_CAN_NOT_SAVE_SIGN_ON = 197,
	STR_FRONT_ALL_16_SIGN_ON_SLOTS_ARE_USED = 198,
	STR_FRONT_ON3 = 199,
	STR_FRONT_DELETE_A_SIGN_ON_AND_TRY_AGAIN = 200,
	STR_FRONT_A_SIGN_ON_NAMED = 201,
	STR_FRONT_ALREADY_EXISTS_ON_MEMORY_CARD_PS2 = 202,
	STR_FRONT_IN1 = 203,
	STR_FRONT_MEMORY_CARD_PS2_IN3 = 204,
	STR_FRONT_HAS_BEEN_CHANGED1 = 205,
	STR_FRONT_PLEASE_INSERT_MEMORY_CARD_PS2_CONTAINING1 = 206,
	STR_FRONT_INTO1 = 207,
	STR_FRONT_MEMORY_CARD_PS2_IN4 = 208,
	STR_FRONT_HAS_BEEN_REMOVED1 = 209,
	STR_FRONT_PLEASE_INSERT_MEMORY_CARD_PS2_CONTAINING2 = 210,
	STR_FRONT_INTO2 = 211,
	STR_FRONT_PLAYER2 = 212,
	STR_FRONT_MEMORY_CARD_PS2 = 213,
	STR_FRONT_IN2 = 214,
	STR_FRONT_HAS_BEEN_CHANGED2 = 215,
	STR_FRONT_DELETE_FAILED1 = 216,
	STR_FRONT_MEMORY_CARD_PS2_IN5 = 217,
	STR_FRONT_HAS_BEEN_REMOVED2 = 218,
	STR_FRONT_DELETE_FAILED2 = 219,
	STR_FRONT_EXIT1 = 220,
	STR_FRONT_2_SELECT_BOT = 221,
	STR_FRONT_2_OK_3_CANCEL = 222,
	STR_FRONT_2_MOVE_1_COPY_TO_ALL_4_CLEAR = 223,
	STR_FRONT_2_CHANGE_1_COPY_TO_ALL = 224,
	STR_FRONT_2_CHANGE_1_COPY_TO_ALL_4_CLEAR = 225,
	STR_FRONT_MUSIC = 226,
	STR_FRONT_MUSIC_VOLUME = 227,
	STR_FRONT_SOUND = 228,
	STR_FRONT_SOUND_VOLUME = 229,
	STR_FRONT_4_CHANNEL_SOUND = 230,
	STR_FRONT_SCREEN_ADJUST = 231,
	STR_FRONT_EXIT2 = 232,
	STR_FRONT_3_BACK1 = 233,
	STR_FRONT_2_START_GAME = 234,
	STR_FRONT_3_BACK2 = 235,
	STR_FRONT_2_OK_3_BACK1 = 236,
	STR_FRONT_2_OK1 = 237,
	STR_FRONT_2_OK_3_BACK2 = 238,
	STR_FRONT_2_OK_3_BACK3 = 239,
	STR_FRONT_WEAPON_SET = 240,
	STR_FRONT_BOT_SET = 241,
	STR_FRONT_GO = 242,
	STR_FRONT_BACK1 = 243,
	STR_FRONT_TIME_LIMIT1 = 244,
	STR_FRONT_BAG_CARRIER_CAN_SHOOT = 245,
	STR_FRONT_TEAMPLAY1 = 246,
	STR_FRONT_USE_TEAM_STARTS1 = 247,
	STR_FRONT_FRIENDLY_FIRE_DAMAGE = 248,
	STR_FRONT_ALWAYS_START_WITH_GUN1 = 249,
	STR_FRONT_DISPLAY_RADAR1 = 250,
	STR_FRONT_HANDICAPS1 = 251,
	STR_FRONT_SCORE_LIMIT1 = 252,
	STR_FRONT_TIME_LIMIT2 = 253,
	STR_FRONT_FRIENDLY_FIRE_DAMAGE1 = 254,
	STR_FRONT_ALWAYS_START_WITH_GUN2 = 255,
	STR_FRONT_DISPLAY_RADAR2 = 256,
	STR_FRONT_HANDICAPS2 = 257,
	STR_FRONT_SCORE_LIMIT2 = 258,
	STR_FRONT_SCORE_METHOD = 259,
	STR_FRONT_TIME_LIMIT3 = 260,
	STR_FRONT_TEAMPLAY2 = 261,
	STR_FRONT_USE_TEAM_STARTS2 = 262,
	STR_FRONT_FRIENDLY_FIRE_DAMAGE2 = 263,
	STR_FRONT_ALWAYS_START_WITH_GUN3 = 264,
	STR_FRONT_DISPLAY_RADAR3 = 265,
	STR_FRONT_ONE_SHOT_KILL = 266,
	STR_FRONT_HANDICAPS3 = 267,
	STR_FRONT_FRIENDLY_FIRE_DAMAGE3 = 268,
	STR_FRONT_ALWAYS_START_WITH_GUN4 = 269,
	STR_FRONT_DISPLAY_RADAR4 = 270,
	STR_FRONT_HANDICAPS4 = 271,
	STR_FRONT_SCORE_LIMIT3 = 272,
	STR_FRONT_TIME_LIMIT4 = 273,
	STR_FRONT_FRIENDLY_FIRE_DAMAGE4 = 274,
	STR_FRONT_ALWAYS_START_WITH_GUN5 = 275,
	STR_FRONT_DISPLAY_RADAR5 = 276,
	STR_FRONT_HANDICAPS5 = 277,
	STR_FRONT_FRIENDLY_FIRE_DAMAGE5 = 278,
	STR_FRONT_DISPLAY_RADAR6 = 279,
	STR_FRONT_HANDICAPS6 = 280,
	STR_FRONT_MINS1 = 281,
	STR_FRONT_POINTS = 282,
	STR_FRONT_2_EDIT = 283,
	STR_FRONT_BACK2 = 284,
	STR_FRONT_ARCADE_CHEATS = 285,
	STR_FRONT_STORY_CHEATS = 286,
	STR_FRONT_NO_TIMESPLITTERS_MAPS = 287,
	STR_FRONT_3_EXIT_4_CHANGE_MEMORY_CARD_PS2 = 288,
	STR_FRONT_MORE_UP = 289,
	STR_FRONT_MORE_DOWN = 290,
	STR_FRONT_DIRECTORY_IS_CORRUPT_2_OK = 291,
	STR_FRONT_THERE_IS_NO_MEMORY_CARD_PS2_2_OK = 292,
	STR_FRONT_MAPS_ON = 293,
	STR_FRONT_DATA_IS_CORRUPT_LOAD_FAILED_2_OK = 294,
	STR_FRONT_LOAD_FAILED_2_OK = 295,
	STR_FRONT_MAPMAKER2 = 296,
	STR_FRONT_LOAD_MAP = 297,
	STR_FRONT_EDIT_MAP = 298,
	STR_FRONT_EXIT3 = 299,
	STR_FRONT_TILE_SET = 300,
	STR_FRONT_BACK3 = 301,
	STR_FRONT_MAPMAKER3 = 302,
	STR_FRONT_2_SELECT_A_MAP = 303,
	STR_FRONT_ARCADE1 = 304,
	STR_FRONT_EASY = 305,
	STR_FRONT_NORMAL = 306,
	STR_FRONT_HARD = 307,
	STR_FRONT_BACK4 = 308,
	STR_FRONT_DASH1 = 309,
	STR_FRONT_STORY1 = 310,
	STR_FRONT_BACK5 = 311,
	STR_FRONT_BEST = 312,
	STR_FRONT_DASH2 = 313,
	STR_FRONT_PLAYER3 = 314,
	STR_FRONT_GAME_TYPE = 315,
	STR_FRONT_PAGE = 316,
	STR_FRONT_BACK6 = 317,
	STR_FRONT_FAVOURITE_CHARACTER = 318,
	STR_FRONT_NONE2 = 319,
	STR_FRONT_PLAYED_FOR = 320,
	STR_FRONT_NO_TIME = 321,
	STR_FRONT_DAYS = 322,
	STR_FRONT_HOURS = 323,
	STR_FRONT_MINS2 = 324,
	STR_FRONT_SECS = 325,
	STR_FRONT_TOTAL_GAMES = 326,
	STR_FRONT_TOTAL_KILLS = 327,
	STR_FRONT_TOTAL_LOSSES = 328,
	STR_FRONT_MOST_KILLS_WITHOUT_DYING = 329,
	STR_FRONT_MOST_KILLS_WITHIN_3_SECONDS = 330,
	STR_FRONT_LONGEST_KILLING_SPREE = 331,
	STR_FRONT_SUCCESS_RATE = 332,
	STR_FRONT_NOT_AVAILABLE1 = 333,
	STR_FRONT_NOT_APPLICABLE1 = 334,
	STR_FRONT_TIMESPLITTERS_DISPATCHED = 335,
	STR_FRONT_NOT_APPLICABLE2 = 336,
	STR_FRONT_FAVOURITE_WEAPON = 337,
	STR_FRONT_UNARMED = 338,
	STR_FRONT_AWARDS_EARNED = 339,
	STR_FRONT_NOT_APPLICABLE3 = 340,
	STR_FRONT_TOTAL_BULLETS_FIRED = 341,
	STR_FRONT_ACCURACY = 342,
	STR_FRONT_NOT_AVAILABLE2 = 343,
	STR_FRONT_HEAD_SHOTS = 344,
	STR_FRONT_NOT_AVAILABLE3 = 345,
	STR_FRONT_BODY_SHOTS = 346,
	STR_FRONT_NOT_AVAILABLE4 = 347,
	STR_FRONT_ARM_SHOTS = 348,
	STR_FRONT_NOT_AVAILABLE5 = 349,
	STR_FRONT_LEG_SHOTS = 350,
	STR_FRONT_NOT_AVAILABLE6 = 351,
	STR_FRONT_HEADS_SHOT_OFF = 352,
	STR_FRONT_HEADS_PUNCHED_OFF = 353,
	STR_FRONT_GLASS_PANES_BROKEN = 354,
	STR_FRONT_DISTANCE_TRAVELLED = 355,
	STR_FRONT_MILES = 356,
	STR_FRONT_AVERAGE_SPEED = 357,
	STR_FRONT_MPH = 358,
	STR_FRONT_STATISTICS2 = 359,
	STR_FRONT_OVERALL = 360,
	STR_FRONT_STORY2 = 361,
	STR_FRONT_ARCADE2 = 362,
	STR_FRONT_CHALLENGE1 = 363,
	STR_FRONT_STORY3 = 364,
	STR_FRONT_ARCADE3 = 365,
	STR_FRONT_CHALLENGE2 = 366,
	STR_FRONT_VIEW_STATISTICS = 367,
	STR_FRONT_AUDIO_VIDEO_OPTIONS2 = 368,
	STR_FRONT_DEBUG_IMITATE_END_OF_LEVEL_FOR_FASTER_SAVE_TESTING = 369,
	STR_FRONT_BACK7 = 370,
	STR_FRONT_STORY4 = 371,
	STR_FRONT_ARCADE4 = 372,
	STR_FRONT_CHALLENGE3 = 373,
	STR_FRONT_VIEW_CREDITS = 374,
	STR_FRONT_3_BACK3 = 375,
	STR_FRONT_NEW_PLAYER = 376,
	STR_FRONT_LOAD_SIGN_ONS = 377,
	STR_FRONT_PLAYER4 = 378,
	STR_FRONT_4_DELETE_SIGN_ON = 379,
	STR_FRONT_MAXIMUM_OF_16_UNSAVED_SIGN_ONS_REACHED = 380,
	STR_FRONT_SIGN_ON2 = 381,
	STR_FRONT_CAN_NOT_BE_CREATED = 382,
	STR_FRONT_2_3_OK1 = 383,
	STR_FRONT_SIGN_ON_NAME = 384,
	STR_FRONT_IS_ALREADY_USED = 385,
	STR_FRONT_2_3_OK2 = 386,
	STR_FRONT_PLAYER5 = 387,
	STR_FRONT_ARE_YOU_SURE_YOU_WANT_TO_DELETE1 = 388,
	STR_FRONT_FROM_MEMORY_CARD_PS2_IN = 389,
	STR_FRONT_QUESTION = 390,
	STR_FRONT_2_YES_3_NO1 = 391,
	STR_FRONT_PLAYER6 = 392,
	STR_FRONT_ARE_YOU_SURE_YOU_WANT_TO_DELETE2 = 393,
	STR_FRONT_FROM_MEMORY = 394,
	STR_FRONT_2_YES_3_NO2 = 395,
	STR_FRONT_1UP = 396,
	STR_FRONT_2UP = 397,
	STR_FRONT_3UP = 398,
	STR_FRONT_4UP = 399,
	STR_FRONT_PLAYER7 = 400,
	STR_FRONT_UPDATE_SAVED_GAME_DATA = 401,
	STR_FRONT_2_YES_3_NO3 = 402,
	STR_FRONT_2_OK2 = 403,
	STR_FRONT_CUSTOM1 = 404,
	STR_FRONT_CUSTOM2 = 405,
	STR_FRONT_PLAYER8 = 406,
	STR_FRONT_PLAYER9 = 407,
	STR_FRONT_FAVOURITE_LEVEL = 408,
	STR_FRONT_NONE3 = 409,
	STR_FRONT_NONE4 = 410,
	STR_FRONT_NOT_APPLICABLE4 = 411,
	STR_FRONT_NOT_AVAILABLE7 = 412,
	STR_FRONT_NOT_APPLICABLE5 = 413,
	STR_FRONT_BOTS = 414,
	STR_FRONT_NO_BOTS = 415,
	STR_GUI_LOADING = 416,
	STR_MCSEQ_MEMORY_CARD_SLOT = 417,
	STR_MCSEQ_MEMORY_CARD_PS2_IN1 = 418,
	STR_MCSEQ_IS_UNFORMATTED1 = 419,
	STR_MCSEQ_DO_YOU_WANT_TO_FORMAT = 420,
	STR_MCSEQ_1_YES_3_NO1 = 421,
	STR_MCSEQ_2_ACCEPT_3_CANCEL = 422,
	STR_MCSEQ_3_CANCEL = 423,
	STR_MCSEQ_OPERATION_CANCELLED = 424,
	STR_MCSEQ_PLEASE_WAIT = 425,
	STR_MCSEQ_NO_MEMORY_CARD_PS2_INSERTED1 = 426,
	STR_MCSEQ_NO_MEMORY_CARD_PS2_INSERTED2 = 427,
	STR_MCSEQ_INTO = 428,
	STR_MCSEQ_MEMORY_CARD_PS2_IN2 = 429,
	STR_MCSEQ_IS_UNFORMATTED2 = 430,
	STR_MCSEQ_LOAD_FAILED = 431,
	STR_MCSEQ_LOAD_COMPLETED = 432,
	STR_MCSEQ_SAVE_FAILED1 = 433,
	STR_MCSEQ_SAVE_FAILED2 = 434,
	STR_MCSEQ_2_OK_3_BACK = 435,
	STR_MCSEQ_SAVE_COMPLETED = 436,
	STR_MCSEQ_DELETE_FAILED = 437,
	STR_MCSEQ_DELETE_COMPLETED = 438,
	STR_MCSEQ_TIMESPLITTERS_SIGN_ONS_ON = 439,
	STR_MCSEQ_MEMORY_CARD_PS2_IN3 = 440,
	STR_MCSEQ_MAY_BE_CORRUPTED = 441,
	STR_MCSEQ_WOULD_YOU_LIKE_TO_OVERWRITE = 442,
	STR_MCSEQ_INSUFFICIENT_FREE_SPACE_ON1 = 443,
	STR_MCSEQ_MEMORY_CARD_PS2_IN4 = 444,
	STR_MCSEQ_TIMESPLITTERS_SIGN_ONS_REQUIRE = 445,
	STR_MCSEQ_KB_OF1 = 446,
	STR_MCSEQ_FREE_SPACE_ON_THE_MEMORY_CARD_PS21 = 447,
	STR_MCSEQ_INSUFFICIENT_FREE_SPACE_ON2 = 448,
	STR_MCSEQ_MEMORY_CARD_PS2_IN5 = 449,
	STR_MCSEQ_TIMESPLITTERS_MAPS_REQUIRE = 450,
	STR_MCSEQ_KB_OF2 = 451,
	STR_MCSEQ_FREE_SPACE_ON_THE_MEMORY_CARD_PS22 = 452,
	STR_MCSEQ_2_OK1 = 453,
	STR_MCSEQ_OPERATION_FAILED = 454,
	STR_MCSEQ_2_OK2 = 455,
	STR_MCSEQ_2_RETRY_3_CANCEL = 456,
	STR_MCSEQ_2_YES_3_NO2 = 457,
	STR_MCSEQ_1_YES_3_NO2 = 458,
	STR_MESSAGES_CHEATS_ON = 459,
	STR_MESSAGES_LOAD_MAP = 460,
	STR_MESSAGES_EDIT_CREATE_NEW_MAP = 461,
	STR_MESSAGES_CURRENT_WEAPON_SET = 462,
	STR_MESSAGES_AVAILABLE_WEAPONS = 463,
	STR_MESSAGES_PRESET_WEAPONS = 464,
	STR_MESSAGES_SELECTED_WEAPONS = 465,
	STR_MESSAGES_2_EDIT_WEAPONS = 466,
	STR_MESSAGES_2_ADD_WEAPON_4_REMOVE_WEAPON = 467,
	STR_MESSAGES_CURRENT_BOT_SET = 468,
	STR_MESSAGES_AVAILABLE_BOTS = 469,
	STR_MESSAGES_PRESET_BOTS = 470,
	STR_MESSAGES_SELECTED_BOTS = 471,
	STR_MESSAGES_2_EDIT_BOTS = 472,
	STR_MESSAGES_SELECT_HANDICAP = 473,
	STR_MESSAGES_AWAITING_OTHER_PLAYERS = 474,
	STR_MESSAGES_DEFENDERS = 475,
	STR_MESSAGES_ATTACKERS = 476,
	STR_MESSAGES_DEFENDERS_TEAM = 477,
	STR_MESSAGES_ATTACKERS_TEAM = 478,
	STR_MESSAGES_NOT_AN_ESCORT_TEAM = 479,
	STR_MESSAGES_TEAM_NOT_SET_IN_MAP = 480,
	STR_MESSAGES_THERE_ARE_NO_BOTS_IN_THE_ATTACKER_TEAM = 481,
	STR_MESSAGES_THERE_ARE_NO_BOTS_IN_THE_DEFENDERS_TEAM = 482,
	STR_MESSAGES_THERE_ARE_NO_BOTS_ACTIVATED = 483,
	STR_MESSAGES_THERE_ARE_TEAM_STARTS_FOR_ONLY_ONE_TEAM = 484,
	STR_MESSAGES_NEW_CHEAT_AVAILABLE = 485,
	STR_MESSAGES_NEW_ARCADE_LEVEL_AVAILABLE = 486,
	STR_MESSAGES_NEW_ARCADE_BOT_AVAILABLE = 487,
	STR_MESSAGES_NEW_PLAYABLE_CHARACTER_AVAILABLE = 488,
	STR_MESSAGES_THE_BRICK_IS_NOW_AVAILABLE = 489,
	STR_MESSAGES_CHALLENGE_MODE_AVAILABLE = 490,
	STR_MESSAGES_NEW_ARCADE_BOT_SET_AVAILABLE = 491,
	STR_MESSAGES_DASH = 492,
	STR_MESSAGES_1_MINUTE_LEFT = 493,
	STR_MESSAGES_10_SECONDS_LEFT = 494,
	STR_MESSAGES_FIRST_KILL = 495,
	STR_MESSAGES_2_RESTART = 496,
	STR_MESSAGES_3_QUIT = 497,
	STR_MESSAGES_PRESS_2_TO_END_GAME = 498,
	STR_MESSAGES_PRESS_2_TO_RETURN_TO_MAPMAKER = 499,
	STR_MESSAGES_MISSION_BRIEFING = 500,
	STR_MESSAGES_YOUR_TIME_SO_FAR = 501,
	STR_MESSAGES_LEVEL_COMPLETED = 502,
	STR_MESSAGES_GAME_OVER1 = 503,
	STR_MESSAGES_YOUR_TIME = 504,
	STR_MESSAGES_BEST_TIME = 505,
	STR_MESSAGES_NEW_BEST_TIME = 506,
	STR_MESSAGES_DEFENDERS_WIN = 507,
	STR_MESSAGES_DEFENDERS_LOSE = 508,
	STR_MESSAGES_ESCORTEE_HEALTH_LEFT = 509,
	STR_MESSAGES_ESCORTEE_DIED = 510,
	STR_MESSAGES_LASTSTAND_OBJECTIVE = 511,
	STR_MESSAGES_GAME_OVER2 = 512,
	STR_MESSAGES_COMPLETED = 513,
	STR_MESSAGES_FAILED = 514,
	STR_MESSAGES_YOUR_SCORE = 515,
	STR_MESSAGES_BEST_SCORE = 516,
	STR_MESSAGES_NEW_BEST_SCORE = 517,
	STR_MESSAGES_HURRY_UP = 518,
	STR_MESSAGES_ENTER_MAP_DESCRIPTION = 519,
	STR_MESSAGES_MEMORY_CARD_PS2 = 520,
	STR_MESSAGES_MEMORY_CARD_SLOT = 521,
	STR_MESSAGES_NO_MEMORY_CARD_PS2_INSERTED = 522,
	STR_MESSAGES_SELECT_MEMORY_CARD_PS2 = 523,
	STR_MESSAGES_LOADING = 524,
	STR_MESSAGES_SAVING = 525,
	STR_MESSAGES_DELETING = 526,
	STR_MESSAGES_CHECKING = 527,
	STR_MESSAGES_FORMATTING = 528,
	STR_MESSAGES_PLEASE_INSERT_MEMORY_CARD_PS2 = 529,
	STR_MESSAGES_DO_NOT_REMOVE_MEMORY_CARD = 530,
	STR_MESSAGES_LOAD_SIGN_ONS = 531,
	STR_MESSAGES_SAVE_SIGN_ON = 532,
	STR_MESSAGES_UPDATE_SAVED_GAME_DATA_2_YES_3_NO = 533,
	STR_MESSAGES_DONT_SAVE = 534,
	STR_MESSAGES_TIMESPLITTERS = 535,
	STR_MESSAGES_TIMESPLITTERS_SIGN_ONS = 536,
	STR_MESSAGES_TIMESPLITTERS_MAPS = 537,
	STR_MESSAGES_LOAD_MAPMAKER_MAP = 538,
	STR_MESSAGES_SAVE_MAPMAKER_MAP = 539,
	STR_MESSAGES_SAMPLE_MAPS = 540,
	STR_MESSAGES_3_EXIT_4_CHANGE_MEMORY_CARD_PS2 = 541,
	STR_MESSAGES_INSERT_MEMORY_CARD_PS2_AND_PRESS_4 = 542,
	STR_MESSAGES_4_CHECK_MEMORY_CARD_PS2S = 543,
	STR_TEXTBOX_DELETE = 544,
	STR_TEXTBOX_SPACE = 545,
	STR_TEXTBOX_CAPS_ON = 546,
	STR_TEXTBOX_CAPS_OFF = 547,
	STR_TEXTBOX_END = 548,
	STR_TEXTBOX_2_ADD_3_CANCEL = 549,
	STR_CREDITS_FREE_RADICAL_DESIGN_STAFF = 550,
	STR_CREDITS_STEPHEN_ELLIS = 551,
	STR_CREDITS_LEAD_PROGRAMMER = 552,
	STR_CREDITS_DAVID_DOAK = 553,
	STR_CREDITS_DESIGNER_PROGRAMMER = 554,
	STR_CREDITS_KARL_HILTON = 555,
	STR_CREDITS_LEAD_ARTIST = 556,
	STR_CREDITS_GRAEME_NORGATE = 557,
	STR_CREDITS_SOUND_MUSIC = 558,
	STR_CREDITS_LEE_RAY = 559,
	STR_CREDITS_SENIOR_ARTIST = 560,
	STR_CREDITS_HASIT_ZALA = 561,
	STR_CREDITS_SENIOR_PROGRAMMER = 562,
	STR_CREDITS_JAMES_CUNLIFFE = 563,
	STR_CREDITS_LEAD_ANIMATOR = 564,
	STR_CREDITS_BEN_NEWMAN = 565,
	STR_CREDITS_LEAD_CHARACTER_ARTIST = 566,
	STR_CREDITS_EZRA_ALLEN = 567,
	STR_CREDITS_ANIMATOR = 568,
	STR_CREDITS_LES_SPINK = 569,
	STR_CREDITS_CHARACTER_ARTIST = 570,
	STR_CREDITS_DENIS_FABRICE = 571,
	STR_CREDITS_PROGRAMMER1 = 572,
	STR_CREDITS_PAUL_HANSHAW = 573,
	STR_CREDITS_PROGRAMMER2 = 574,
	STR_CREDITS_JOE_MOULDING = 575,
	STR_CREDITS_PROGRAMMER3 = 576,
	STR_CREDITS_BRAD_WARREN = 577,
	STR_CREDITS_BACKGROUND_ARTIST1 = 578,
	STR_CREDITS_ROB_STEPTOE = 579,
	STR_CREDITS_BACKGROUND_ARTIST2 = 580,
	STR_CREDITS_THOMAS_HOUGHTON = 581,
	STR_CREDITS_LEVEL_SETUP = 582,
	STR_CREDITS_VOICE_TALENT = 583,
	STR_CREDITS_BARBARA_WHITEHILL = 584,
	STR_CREDITS_ELAINE_MARSH = 585,
	STR_CREDITS_ANDY_WHITEHILL = 586,
	STR_CREDITS_KEVIN_CLARKE = 587,
	STR_CREDITS_JO_WHITEHILL = 588,
	STR_CREDITS_LUCY_YOUNG = 589,
	STR_CREDITS_MALIKA_DJELLALI = 590,
	STR_CREDITS_ANA_LOUISE_MARSH = 591,
	STR_CREDITS_JENNY_SACKIN = 592,
	STR_CREDITS_ILKE_DECKER = 593,
	STR_CREDITS_TONI_MORGAN = 594,
	STR_CREDITS_BRIGITTE_JUERGENSEN = 595,
	STR_CREDITS_IMME_DAHLBERG = 596,
	STR_CREDITS_KEVIN_ELLIS = 597,
	STR_CREDITS_STEWART_GRAHAM = 598,
	STR_CREDITS_PAUL_ELLIS = 599,
	STR_CREDITS_ROB_MOYE = 600,
	STR_CREDITS_NEIL_HILL = 601,
	STR_CREDITS_HELEN_JACKSON = 602,
	STR_CREDITS_LYNDSAY_COOPER = 603,
	STR_CREDITS_EIDOS_STAFF = 604,
	STR_CREDITS_RICHARD_CARTER = 605,
	STR_CREDITS_PRODUCER = 606,
	STR_CREDITS_FRANK_HOM = 607,
	STR_CREDITS_SHADOW_PRODUCER = 608,
	STR_CREDITS_ED_BAINBRIDGE = 609,
	STR_CREDITS_EXECUTIVE_PRODUCER = 610,
	STR_CREDITS_MICHAEL_NEWEY = 611,
	STR_CREDITS_BRAND_MANAGER = 612,
	STR_CREDITS_GREG_RIZZER = 613,
	STR_CREDITS_US_PUBLICITY = 614,
	STR_CREDITS_STEVE_STARVIS = 615,
	STR_CREDITS_UK_PUBLICITY = 616,
	STR_CREDITS_DAVE_DEPAULIS = 617,
	STR_CREDITS_US_PRODUCT_MANAGER = 618,
	STR_CREDITS_EIDOS_QA_UK = 619,
	STR_CREDITS_DAVID_PETTIT = 620,
	STR_CREDITS_PHIL_MASKELL = 621,
	STR_CREDITS_ALEX_HOOD = 622,
	STR_CREDITS_DAVID_BABAJEE = 623,
	STR_CREDITS_JOHN_WAGLAND = 624,
	STR_CREDITS_MIKE_OWUSU = 625,
	STR_CREDITS_DERREN_TOUSSAINT = 626,
	STR_CREDITS_ABRUS_ALI = 627,
	STR_CREDITS_GORDON_GRAM = 628,
	STR_CREDITS_KEIR_EDMONDS = 629,
	STR_CREDITS_MATTHEW_IBBS = 630,
	STR_CREDITS_JURIE_GELDENHUYS = 631,
	STR_CREDITS_EIDOS_QA_US = 632,
	STR_CREDITS_CARLO_DELALLANA = 633,
	STR_CREDITS_CLIFTON_WHERRY = 634,
	STR_CREDITS_FRANKLIN_VASQUEZ = 635,
	STR_CREDITS_NEVIN_CHOU = 636,
	STR_CREDITS_TAMARA_WILLIAMSON = 637,
	STR_CREDITS_JONNY_COSTA = 638,
	STR_CREDITS_ERUCH_ADAMS = 639,
	STR_CREDITS_ALEXANDER_STRAYER = 640,
	STR_CREDITS_GENNADY_SHEYNER = 641,
	STR_CREDITS_CHRISTINE_FRAZIER = 642,
	STR_CREDITS_JESSE_ANDREWS = 643,
	STR_CREDITS_SPECIAL_THANKS1 = 644,
	STR_CREDITS_ALISTAIR_BODIN = 645,
	STR_CREDITS_ZENO_COLECO = 646,
	STR_CREDITS_PAUL_HOLMAN = 647,
	STR_CREDITS_COLIN_HUGHES = 648,
	STR_CREDITS_MIKE_KAVALLIEROU = 649,
	STR_CREDITS_MARK_BREUGELMANS = 650,
	STR_CREDITS_GEORGE_BAIN = 651,
	STR_CREDITS_SPECIAL_THANKS2 = 652,
	STR_CREDITS_GILLIAN_CORDALL = 653,
	STR_CREDITS_JONAS_ENEROTH = 654,
	STR_CREDITS_EMMI = 655,
	STR_CREDITS_TIMESPLITTERS_WILL_RETURN = 656,
	STR_INTRO_DAM_1 = 657,
	STR_BRIEFING_DAM = 658,
	STR_CHALLENGE_1A = 659,
	STR_CHALLENGE_1A_DESC = 660,
	STR_CHALLENGE_1B = 661,
	STR_CHALLENGE_1B_DESC = 662,
	STR_CHALLENGE_1C = 663,
	STR_CHALLENGE_1C_DESC = 664,
	STR_CHALLENGE_2A = 665,
	STR_CHALLENGE_2A_DESC = 666,
	STR_CHALLENGE_2B = 667,
	STR_CHALLENGE_2B_DESC = 668,
	STR_CHALLENGE_2C = 669,
	STR_CHALLENGE_2C_DESC = 670,
	STR_CHALLENGE_3A = 671,
	STR_CHALLENGE_3A_DESC = 672,
	STR_CHALLENGE_3B = 673,
	STR_CHALLENGE_3B_DESC = 674,
	STR_CHALLENGE_3C = 675,
	STR_CHALLENGE_3C_DESC = 676,
	STR_CHALLENGE_4A = 677,
	STR_CHALLENGE_4A_DESC = 678,
	STR_CHALLENGE_4B = 679,
	STR_CHALLENGE_4B_DESC = 680,
	STR_CHALLENGE_4C = 681,
	STR_CHALLENGE_4C_DESC = 682,
	STR_CHALLENGE_5A = 683,
	STR_CHALLENGE_5A_DESC = 684,
	STR_CHALLENGE_5B = 685,
	STR_CHALLENGE_5B_DESC = 686,
	STR_CHALLENGE_5C = 687,
	STR_CHALLENGE_5C_DESC = 688,
	STR_CHALLENGE_6A = 689,
	STR_CHALLENGE_6A_DESC = 690,
	STR_CHALLENGE_6B = 691,
	STR_CHALLENGE_6B_DESC = 692,
	STR_CHALLENGE_6C = 693,
	STR_CHALLENGE_6C_DESC = 694,
	STR_CHALLENGE_7A = 695,
	STR_CHALLENGE_7A_DESC = 696,
	STR_CHALLENGE_7B = 697,
	STR_CHALLENGE_7B_DESC = 698,
	STR_CHALLENGE_7C = 699,
	STR_CHALLENGE_7C_DESC = 700,
	STR_CHALLENGE_8A = 701,
	STR_CHALLENGE_8A_DESC = 702,
	STR_CHALLENGE_8B = 703,
	STR_CHALLENGE_8B_DESC = 704,
	STR_CHALLENGE_8C = 705,
	STR_CHALLENGE_8C_DESC = 706,
	STR_CHALLENGE_9A = 707,
	STR_CHALLENGE_9A_DESC = 708,
	STR_CHALLENGE_9B = 709,
	STR_CHALLENGE_9B_DESC = 710,
	STR_CHALLENGE_9C = 711,
	STR_CHALLENGE_9C_DESC = 712,
	STR_CHALLENGE_KILLS = 713,
	STR_CHALLENGE_HEALTH = 714,
	STR_CHALLENGE_HEADS = 715,
	STR_CHALLENGE_GLASS_LEFT = 716,
	STR_CHALLENGE_BARRELS_LEFT = 717,
	STR_CHALLENGE_BAGS_LOST = 718,
	STR_CHALLENGE_DIED = 719,
	STR_CHALLENGE_THE_KING_DIED = 720,
	STR_CHALLENGE_DO_NOT_COMPETE_WITH_THE_KING = 721,
	STR_CHALLENGE_KILLS2 = 722,
	STR_CHEATS_INVINCIBLE = 723,
	STR_CHEATS_BIG_HEADS = 724,
	STR_CHEATS_SMALL_HEADS = 725,
	STR_CHEATS_BIG_HANDS = 726,
	STR_CHEATS_INFINITE_AMMO = 727,
	STR_CHEATS_PAINTBALL = 728,
	STR_CHEATS_GUN_SOUNDS = 729,
	STR_CHEATS_ENEMY_ROCKETS = 730,
	STR_CHEATS_ENEMY_BRICKS = 731,
	STR_CHEATS_ALL_ENEMIES_ARE_IMPERSONATORS = 732,
	STR_CHEATS_ALL_ENEMIES_ARE_BUNNIES = 733,
	STR_CHEATS_ALL_ENEMIES_ARE_GINGERBREADS = 734,
	STR_CHEATS_ALL_ENEMIES_ARE_DUCKS = 735,
	STR_CHEATS_ALL_ENEMIES_ARE_ROBOFISH = 736,
	STR_CHEATS_ALL_CHARACTERS_HEADLESS = 737,
	STR_CHEATS_ALL_HEADS_DETACHABLE = 738,
	STR_GAME_1935_TOMB = 739,
	STR_GAME_1970_CHINESE = 740,
	STR_GAME_2005_CYBERDEN = 741,
	STR_GAME_1950_VILLAGE = 742,
	STR_GAME_1985_CHEMICAL_PLANT = 743,
	STR_GAME_2020_PLANET_X = 744,
	STR_GAME_1965_MANSION = 745,
	STR_GAME_2000_DOCKS = 746,
	STR_GAME_2035_SPACEWAYS = 747,
	STR_GAME_RED = 748,
	STR_GAME_BLUE = 749,
	STR_GAME_YELLOW = 750,
	STR_GAME_GREEN = 751,
	STR_GAME_GREY = 752,
	STR_GAME_BAGTAG = 753,
	STR_GAME_CAPTURE_THE_BAG = 754,
	STR_GAME_DEATHMATCH = 755,
	STR_GAME_ESCORT = 756,
	STR_GAME_KNOCKOUT = 757,
	STR_GAME_LASTSTAND = 758,
	STR_GAME_ZONES = 759,
	STR_GAME_STORY = 760,
	STR_GAME_TEAM = 761,
	STR_GAME_SECS = 762,
	STR_GAME_3_MORE_KILLS_TO_GO = 763,
	STR_GAME_2_MORE_KILLS_TO_GO = 764,
	STR_GAME_GOING_FOR_THE_LAST_KILL = 765,
	STR_GAME_GOT_THE_BAG1 = 766,
	STR_GAME_GOT_THE_BAG2 = 767,
	STR_GAME_TOO_LATE = 768,
	STR_GAME_YOU_HAVE = 769,
	STR_GAME_SECONDS_TO_RETURN = 770,
	STR_STATS_NO_AWARD = 771,
	STR_STATS_MOST_LETHAL = 772,
	STR_STATS_MOST_LOSSES = 773,
	STR_STATS_LEMMING_AWARD = 774,
	STR_STATS_MOST_PROFESSIONAL = 775,
	STR_STATS_MULTI_KILL = 776,
	STR_STATS_LONGEST_SPREE = 777,
	STR_STATS_MOST_EFFECTIVE = 778,
	STR_STATS_PATHETIC_SHOT = 779,
	STR_STATS_MANIAC = 780,
	STR_STATS_BRAIN_SURGEON = 781,
	STR_STATS_FISTS_OF_FURY = 782,
	STR_STATS_GLASS_JAW = 783,
	STR_STATS_DECAPITATOR = 784,
	STR_STATS_FISTS_OF_STEEL = 785,
	STR_STATS_BETRAYER = 786,
	STR_STATS_VANDALISM_AWARD = 787,
	STR_STATS_HYPOCHONDRIAC = 788,
	STR_STATS_AC_10_AWARD = 789,
	STR_STATS_WHERES_THE_HEALTH = 790,
	STR_STATS_WHERES_THE_ARMOUR = 791,
	STR_STATS_HOARDER = 792,
	STR_STATS_SLOTH = 793,
	STR_STATS_MOST_FRANTIC = 794,
	STR_STATS_BACKPEDDLER = 795,
	STR_STATS_SIDESTEPPER = 796,
	STR_STATS_LEDGEHOPPER = 797,
	STR_STATS_MOST_SNEAKY = 798,
	STR_STATS_MOST_COWARDLY = 799,
	STR_STATS_DODGER = 800,
	STR_STATS_MOST_OUTGUNNED = 801,
	STR_STATS_BEST_EQUIPPED = 802,
	STR_STATS_UNLUCKY_TO_LOSE = 803,
	STR_STATS_WEAPONS_EXPERT = 804,
	STR_STATS_PORTER = 805,
	STR_STATS_BAG_MAN = 806,
	STR_STATS_MOST_USELESS = 807,
	STR_STATS_RICOCHET_KING = 808,
	STR_STATS_UNDEREQUIPPED = 809,
	STR_STATS_VICTIM = 810,
	STR_STATS_BULLY = 811,
	STR_STATS_MOST_PEACEFUL = 812,
	STR_STATS_MOST_DISHONOURABLE = 813,
	STR_STATS_MOST_MANIC = 814,
	STR_STATS_CARTOGRAPHER = 815,
	STR_STATS_SHORTEST_INNINGS = 816,
	STR_STATS_LONGEST_INNINGS = 817,
	STR_STATS_SURVIVOR = 818,
	STR_STATS_MARKSMANSHIP_AWARD = 819,
	STR_STATS_NO_MEDAL_AWARDED1 = 820,
	STR_STATS_NO_COMMENT = 821,
	STR_STATS_UNDESERVING_OF_A_MEDAL = 822,
	STR_STATS_UNLIKELY_TO_GET_A_MEDAL = 823,
	STR_STATS_NO_MEDAL_AWARDED2 = 824,
	STR_STATS_NONE = 825,
	STR_GUN_GUN_TURRET = 826,
	STR_GUN_PUNCH = 827,
	STR_GUN_PISTOL = 828,
	STR_GUN_PISTOL_X2 = 829,
	STR_GUN_FLAREPISTOL = 830,
	STR_GUN_FLAREPISTOL_X2 = 831,
	STR_GUN_MAGNUM = 832,
	STR_GUN_MAGNUM_X2 = 833,
	STR_GUN_ASSAULT_RIFLE = 834,
	STR_GUN_SNIPER_RIFLE = 835,
	STR_GUN_FLAMETHROWER = 836,
	STR_GUN_FIRE_EXTINGUISHER = 837,
	STR_GUN_AK47 = 838,
	STR_GUN_AK47_X2 = 839,
	STR_GUN_ELECTROGUN = 840,
	STR_GUN_SCIFI_HANDGUN = 841,
	STR_GUN_ROCKET_LAUNCHER = 842,
	STR_GUN_HOMING_ROCKET_LAUNCHER = 843,
	STR_GUN_LASER = 844,
	STR_GUN_PLASMA_MACHINEGUN = 845,
	STR_GUN_PLASMA_MACHINEGUN_X2 = 846,
	STR_GUN_DISCTHROWER = 847,
	STR_GUN_DISCTHROWER_X2 = 848,
	STR_GUN_GRENADE_LAUNCHER = 849,
	STR_GUN_GRENADE_THROW = 850,
	STR_GUN_PROXIMITY_MINE = 851,
	STR_GUN_REMOTE_MINE = 852,
	STR_GUN_TIMED_MINE = 853,
	STR_GUN_TNT = 854,
	STR_GUN_TOMMY_GUN = 855,
	STR_GUN_TOMMY_GUN_X2 = 856,
	STR_GUN_ASSAULT_SHOTGUN = 857,
	STR_GUN_UZI = 858,
	STR_GUN_UZI_X2 = 859,
	STR_GUN_BLUNDERBUSS = 860,
	STR_GUN_BLUNDERBUSS_X2 = 861,
	STR_GUN_GATLING = 862,
	STR_GUN_GATLING_X2 = 863,
	STR_GUN_SHOTGUN = 864,
	STR_GUN_SHOTGUN_X2 = 865,
	STR_GUN_BRICK = 866,
	STR_AMMO_SMALLBULLET = 867,
	STR_AMMO_BIGBULLET = 868,
	STR_AMMO_SHELL = 869,
	STR_AMMO_PLASMA = 870,
	STR_AMMO_ROCKET = 871,
	STR_AMMO_GRENADE = 872,
	STR_AMMO_BRICK = 873,
	STR_AMMO_REMOTEMINE = 874,
	STR_AMMO_TIMEDMINE = 875,
	STR_AMMO_PROXIMITYMINE = 876,
	STR_AMMO_TNT = 877,
	STR_AMMO_FLARE = 878,
	STR_AMMO_DISC = 879,
	STR_AMMO_ELECTRIC = 880,
	STR_AMMO_PETROL = 881,
	STR_AMMO_FIREEXTINGUISHER = 882,
	STR_COMPUTERDISK = 883,
	STR_HUD_ESCORTEE = 884,
	STR_HUD_BASE = 885,
	STR_HUD_BAG_TIME = 886,
	STR_HUD_SCORE1 = 887,
	STR_HUD_TIME_LEFT = 888,
	STR_HUD_SCORE2 = 889,
	STR_HUD_RANK = 890,
	STR_HUD_DEMO = 891,
	STR_LV_PRISON = 892,
	STR_LV_VILLAGE = 893,
	STR_LV_NSA1 = 894,
	STR_LV_OUTSKIRTS = 895,
	STR_LV_CHEMICAL_PLANT = 896,
	STR_LV_TEST = 897,
	STR_LV_ASYLUM = 898,
	STR_LV_MANSION = 899,
	STR_LV_PLANET_X = 900,
	STR_LV_COMPOUND = 901,
	STR_LV_STREETS = 902,
	STR_LV_WARZONE = 903,
	STR_LV_SITE = 904,
	STR_LV_CYBERDEN = 905,
	STR_LV_BANK = 906,
	STR_LV_GRAVEYARD = 907,
	STR_LV_SPACESHIP = 908,
	STR_LV_MALL = 909,
	STR_LV_TILE_TEST = 910,
	STR_LV_WAREHOUSE = 911,
	STR_LV_CHINESE = 912,
	STR_LV_CASTLE = 913,
	STR_LV_TOMB1 = 914,
	STR_LV_DOCKS = 915,
	STR_LV_RON = 916,
	STR_LV_TOMB2 = 917,
	STR_LV_SPACEWAYS = 918,
	STR_LV_TECH = 919,
	STR_LV_AZTEC = 920,
	STR_LV_OUTPOST = 921,
	STR_LV_ATOMSMASHER = 922,
	STR_LV_WILDWEST = 923,
	STR_LV_HANGAR = 924,
	STR_LV_NOTREDAME = 925,
	STR_LV_DAM = 926,
	STR_LV_PIVOTAL = 927,
	STR_LV_TUBE = 928,
	STR_LV_NEOTOKYO = 929,
	STR_LV_SPACESTATION = 930,
	STR_LV_PLANET2 = 931,
	STR_LV_RFACTORY = 932,
	STR_LV_MEXICAN = 933,
	STR_LV_NIGHTCLUB = 934,
	STR_LV_MARTIAN = 935,
	STR_LV_HOSPITAL = 936,
	STR_LV_SCRAPYARD = 937,
	STR_LV_CIRCUS = 938,
	STR_LV_TILESET = 939,
	STR_LV_FRONTRED = 940,
	STR_LV_FRONTMPG = 941,
	STR_LV_MAPMAKER = 942,
	STR_LV_DUMMY = 943,
	STR_LV_CREDITS = 944,
	STR_LV_TIMESPLITTERS = 945,
	STR_LV_LOADING = 946,
	STR_LV_LEGAL = 947,
	STR_LVSETUP_DEFAULT = 948,
	STR_LVSETUP_PERIOD_HORROR = 949,
	STR_LVSETUP_USUAL_SUSPECTS = 950,
	STR_LVSETUP_SPACE_OPERA = 951,
	STR_LVSETUP_HORROR_SHOCKER = 952,
	STR_LVSETUP_LAW_AND_ORDER = 953,
	STR_LVSETUP_THE_LIVING_DEAD = 954,
	STR_LVSETUP_TIMESPLITTERS = 955,
	STR_LVSETUP_RETRO = 956,
	STR_LVSETUP_HEAT = 957,
	STR_LVSETUP_PLASMA = 958,
	STR_LVSETUP_HANDGUNS = 959,
	STR_LVSETUP_REMOTE_MINES = 960,
	STR_LVSETUP_PROXIMITY_MINES = 961,
	STR_LVSETUP_TIMED_MINES = 962,
	STR_LVSETUP_BRICKS = 963,
	STR_MM_NO_MORE_FREE_MEMORY_2_OK = 964,
	STR_MM_CAN_NOT_PLACE_MORE_THAN = 965,
	STR_MM_3_BACK1 = 966,
	STR_MM_2_EDIT_COLOUR = 967,
	STR_MM_2_SELECT = 968,
	STR_MM_1_NEXT_PAGE = 969,
	STR_MM_RESET_PALETTE = 970,
	STR_MM_YOU_HAVENT_PLACED_ANY_TILE_YET = 971,
	STR_MM_STARTS = 972,
	STR_MM_BASES = 973,
	STR_MM_WEAPONS = 974,
	STR_MM_HEALTH1 = 975,
	STR_MM_ARMOUR1 = 976,
	STR_MM_BAGTAG_BAG = 977,
	STR_MM_KNOCKOUT_BAGS = 978,
	STR_MM_CLEAR1 = 979,
	STR_MM_PLACE1 = 980,
	STR_MM_EXIT1 = 981,
	STR_MM_COPY1 = 982,
	STR_MM_2_PLACE_ITEM_3_EXIT = 983,
	STR_MM_3_EXIT = 984,
	STR_MM_TILE = 985,
	STR_MM_ITEM = 986,
	STR_MM_LIGHT1 = 987,
	STR_MM_FREE = 988,
	STR_MM_LIGHT2 = 989,
	STR_MM_PHASE1 = 990,
	STR_MM_CLEAR2 = 991,
	STR_MM_SELECT_ITEM = 992,
	STR_MM_RESET_LIGHT = 993,
	STR_MM_PHASE2 = 994,
	STR_MM_COPY2 = 995,
	STR_MM_SET_LIGHT = 996,
	STR_MM_SELECT_LIGHT = 997,
	STR_MM_DELETE1 = 998,
	STR_MM_ROTATE = 999,
	STR_MM_PLACE2 = 1000,
	STR_MM_DELETE_MARKED = 1001,
	STR_MM_DELETE2 = 1002,
	STR_MM_MARK = 1003,
	STR_MM_GRAB = 1004,
	STR_MM_COPY3 = 1005,
	STR_MM_SELECT_TILE = 1006,
	STR_MM_PLACE_TILES_WITHOUT_THE_ITEMS_2_OK_3_CANCEL = 1007,
	STR_MM_PLACE_A_BAG_BAGTAG_TO_ENABLE_BAGTAG_2_OK = 1008,
	STR_MM_PLACE_AT_LEAST_2_BAG_BASES_PLUS = 1009,
	STR_MM_PLACE_AT_LEAST_2_BAG_BASES = 1010,
	STR_MM_ESCORT_IS_NOT_AVAILABLE_2_OK = 1011,
	STR_MM_LASTSTAND_IS_NOT_AVAILABLE_2_OK = 1012,
	STR_MM_VIRTUAL1 = 1013,
	STR_MM_INDUSTRIAL1 = 1014,
	STR_MM_GOTHIC1 = 1015,
	STR_MM_ALIEN1 = 1016,
	STR_MM_SPACEPORT1 = 1017,
	STR_MM_DEFAULT = 1018,
	STR_MM_GOTHIC2 = 1019,
	STR_MM_INDUSTRIAL2 = 1020,
	STR_MM_VIRTUAL2 = 1021,
	STR_MM_SPACEPORT2 = 1022,
	STR_MM_ALIEN2 = 1023,
	STR_MM_STREETS = 1024,
	STR_MM_THE_BANK = 1025,
	STR_MM_CHINESE = 1026,
	STR_MM_GRAVEYARD = 1027,
	STR_MM_CYBERDEN = 1028,
	STR_MM_MANSION = 1029,
	STR_MM_PLANET_X = 1030,
	STR_MM_CASTLE = 1031,
	STR_MM_VILLAGE = 1032,
	STR_MM_TOMB = 1033,
	STR_MM_WARZONE = 1034,
	STR_MM_BUILDING_SITE = 1035,
	STR_MM_DOCKS = 1036,
	STR_MM_SPACEWAYS = 1037,
	STR_MM_SPACESHIP = 1038,
	STR_MM_COMPOUND = 1039,
	STR_MM_CHEMICAL_PLANT = 1040,
	STR_MM_MALL = 1041,
	STR_MM_GRID_INTENSITY = 1042,
	STR_MM_BACK1 = 1043,
	STR_MM_TILE_SET = 1044,
	STR_MM_MUSIC = 1045,
	STR_MM_EDIT_MAP_DESCRIPTION = 1046,
	STR_MM_BACK2 = 1047,
	STR_MM_GAME_MODES = 1048,
	STR_MM_BACK3 = 1049,
	STR_MM_2_HELP = 1050,
	STR_MM_2_FOR_INFO = 1051,
	STR_MM_OK = 1052,
	STR_MM_NEW_FILE = 1053,
	STR_MM_NO_TIMESPLITTERS_MAPS = 1054,
	STR_MM_3_BACK2 = 1055,
	STR_MM_3_BACK_4_DELETE_MAP = 1056,
	STR_MM_MORE_UP = 1057,
	STR_MM_MORE_DOWN = 1058,
	STR_MM_DIRECTORY_IS_CORRUPT_2_OK = 1059,
	STR_MM_THERE_IS_NO_MEMORY_CARD_2_OK = 1060,
	STR_MM_MEMORY_CARD_PS2_IN = 1061,
	STR_MM_IS_UNFORMATTED = 1062,
	STR_MM_2_OK1 = 1063,
	STR_MM_MAPS_ON = 1064,
	STR_MM_ARE_YOU_SURE_YOU_WANT_TO_DELETE = 1065,
	STR_MM_FROM_MEMORY_CARD_PS2_IN = 1066,
	STR_MM_2_YES_3_NO1 = 1067,
	STR_MM_DO_YOU_WANT_TO_OVERWRITE_THE_MAP = 1068,
	STR_MM_ON_MEMORY_CARD_PS2_IN = 1069,
	STR_MM_1_YES_3_NO2 = 1070,
	STR_MM_SAVE_COMPLETED_2_OK = 1071,
	STR_MM_TIMESPLITTERS_MAP = 1072,
	STR_MM_MAY_BE_CORRUPTED = 1073,
	STR_MM_LOAD_FAILED = 1074,
	STR_MM_2_OK2 = 1075,
	STR_MM_LOAD_COMPLETED_2_OK = 1076,
	STR_MM_MAP_FILE_VERSION_OUTDATED_2_OK = 1077,
	STR_MM_MAP_SETTINGS = 1078,
	STR_MM_PREVIEW_MAP = 1079,
	STR_MM_UNDO_LAST_CHANGE = 1080,
	STR_MM_CENTER_MAP = 1081,
	STR_MM_CLEAR_MAP = 1082,
	STR_MM_OPTIONS = 1083,
	STR_MM_LOAD_MAP = 1084,
	STR_MM_SAVE_MAP = 1085,
	STR_MM_HELP = 1086,
	STR_MM_QUIT_MAPMAKER = 1087,
	STR_MM_BACK4 = 1088,
	STR_MM_ARE_YOU_SURE_YOU_WANT_TO_CLEAR_THE_MAP_2_YES_3_NO = 1089,
	STR_MM_HELP_SCREEN = 1090,
	STR_MM_YOU_HAVE_MADE_CHANGES_THAT_HAVE_NOT_BEEN_SAVED = 1091,
	STR_MM_ALL = 1092,
	STR_MM_RED1 = 1093,
	STR_MM_BLUE1 = 1094,
	STR_MM_YELLOW1 = 1095,
	STR_MM_GREEN1 = 1096,
	STR_MM_RED2 = 1097,
	STR_MM_BLUE2 = 1098,
	STR_MM_YELLOW2 = 1099,
	STR_MM_GREEN2 = 1100,
	STR_MM_LOW = 1101,
	STR_MM_HI = 1102,
	STR_MM_CLEAR3 = 1103,
	STR_MM_START = 1104,
	STR_MM_BAG_BASE = 1105,
	STR_MM_HEALTH2 = 1106,
	STR_MM_BAG_BAGTAG = 1107,
	STR_MM_BAG_KNOCKOUT = 1108,
	STR_MM_ARMOUR2 = 1109,
	STR_MM_GUN = 1110,
	STR_MM_EXIT2 = 1111,
	STR_MM_START_ITEMS = 1112,
	STR_MM_PICKUP_GUN_ITEMS = 1113,
	STR_MM_HEALTH_ITEMS = 1114,
	STR_MM_ARMOUR_ITEMS = 1115,
	STR_MM_SAMPLE_MAP_1 = 1116,
	STR_MM_SAMPLE_MAP_2 = 1117,
	STR_MM_SAMPLE_MAP_3 = 1118,
	STR_MM_SAMPLE_MAP_4 = 1119,
	STR_MM_SAMPLE_MAP_5 = 1120,
	STR_MM_SAMPLE_MAP_6 = 1121,
	STR_MM_SAMPLE_MAP_7 = 1122,
	STR_MM_SAMPLE_MAP_8 = 1123,
	STR_MM_SAMPLE_MAP_9 = 1124,
	STR_MM_SAMPLE_MAP_10 = 1125,
	STR_BACK = 1126,
	STR_MENU_YES = 1127,
	STR_MENU_NO = 1128,
	STR_MENU_CANCEL_CHANGES = 1129,
	STR_MENU_SELECT = 1130,
	STR_MENU_CHANGEPAGE = 1131,
	STR_MENU_CHANGEITEM = 1132,
	STR_MENU_TITLE_OPTIONS = 1133,
	STR_MENU_CONTINUE = 1134,
	STR_MENU_CONTINUE_QUESTION = 1135,
	STR_MENU_REMATCH = 1136,
	STR_MENU_RETRY = 1137,
	STR_MENU_CONTROLS = 1138,
	STR_MENU_PREFS = 1139,
	STR_MENU_RESTART = 1140,
	STR_MENU_TITLE_ENDGAME = 1141,
	STR_MENU_TITLE_PREFS = 1142,
	STR_MENU_TITLE_RESTART = 1143,
	STR_MENU_QUIT = 1144,
	STR_MENU_ENDPREVIEW = 1145,
	STR_MENU_TITLE_QUIT = 1146,
	STR_MENU_TITLE_STATISTICS = 1147,
	STR_MENU_P_LOSSES = 1148,
	STR_MENU_P_KILLS = 1149,
	STR_MENU_TITLE_STATUS = 1150,
	STR_MENU_TITLE_SCORES = 1151,
	STR_MENU_TITLE_INVENTORY = 1152,
	STR_MENU_STORY = 1153,
	STR_MENU_CHALLENGE = 1154,
	STR_MENU_PAUSE = 1155,
	STR_MENU_END_GAME = 1156,
	STR_MENU_TITLE_BRIEFING = 1157,
	STR_MENU_TITLE_AWARDS = 1158,
	STR_MENU_PRESS_START = 1159,
	STR_MENU_3_CANCEL = 1160,
	STR_MENU_3_BACK_2_EDIT = 1161,
	STR_MENU_3_BACK = 1162,
	STR_MENU_KILLS = 1163,
	STR_MENU_SETUP_MAIN_OPTIONS = 1164,
	STR_MENU_SETUP_AIM_CONTROL_OPTIONS = 1165,
	STR_MENU_SETUP_SWITCH_CONTROLS = 1166,
	STR_MENU_LEFT_ANALOG_STICK = 1167,
	STR_MENU_RIGHT_ANALOG_STICK = 1168,
	STR_MENU_DIRECTIONAL_BUTTONS = 1169,
	STR_MENU_UP_DIRECTIONAL_BUTTON = 1170,
	STR_MENU_DOWN_DIRECTIONAL_BUTTON = 1171,
	STR_MENU_LEFT_DIRECTIONAL_BUTTON = 1172,
	STR_MENU_RIGHT_DIRECTIONAL_BUTTON = 1173,
	STR_MENU_RUN = 1174,
	STR_MENU_TURN = 1175,
	STR_MENU_SIDE_STEP = 1176,
	STR_MENU_LOOK = 1177,
	STR_MENU_RUN_AIMING = 1178,
	STR_MENU_TURN_AIMING = 1179,
	STR_MENU_SIDE_STEP_AIMING = 1180,
	STR_MENU_LOOK_AIMING = 1181,
	STR_MENU_AIM = 1182,
	STR_MENU_ZOOM_IN = 1183,
	STR_MENU_ZOOM_OUT = 1184,
	STR_MENU_ZOOM_INOUT = 1185,
	STR_MENU_FIRE1 = 1186,
	STR_MENU_ALTERNATE_FIRE = 1187,
	STR_MENU_MANUAL_RELOAD = 1188,
	STR_MENU_CROUCH = 1189,
	STR_MENU_ACTIVATE = 1190,
	STR_MENU_PREV_WEAPON = 1191,
	STR_MENU_NEXT_WEAPON = 1192,
	STR_MENU_SWAP_WEAPON = 1193,
	STR_MENU_RUN_FORWARD = 1194,
	STR_MENU_RUN_BACKWARD = 1195,
	STR_MENU_TURN_LEFT = 1196,
	STR_MENU_TURN_RIGHT = 1197,
	STR_MENU_STEP_LEFT = 1198,
	STR_MENU_STEP_RIGHT = 1199,
	STR_MENU_LOOK_UP = 1200,
	STR_MENU_LOOK_DOWN = 1201,
	STR_MENU_ACCEPT_CHANGES = 1202,
	STR_MENU_TOGGLE = 1203,
	STR_MENU_HOLD = 1204,
	STR_MENU_CUSTOM = 1205,
	STR_MENU_DEFAULT = 1206,
	STR_MENU_DEFAULT_LH = 1207,
	STR_MENU_EXPERT = 1208,
	STR_MENU_EXPERT_B = 1209,
	STR_MENU_DIGITAL = 1210,
	STR_MENU_DIGITAL_LH = 1211,
	STR_MENU_CONFIGURATION = 1212,
	STR_MENU_INVERSE_LOOK = 1213,
	STR_MENU_AIM_MODE = 1214,
	STR_MENU_CROUCH_MODE = 1215,
	STR_MENU_AUTO_LOOKAHEAD = 1216,
	STR_MENU_ALWAYS = 1217,
	STR_MENU_NEVER = 1218,
	STR_MENU_BEST = 1219,
	STR_MENU_OFF = 1220,
	STR_MENU_FIRE2 = 1221,
	STR_MENU_HIT = 1222,
	STR_MENU_FIRE_HIT = 1223,
	STR_MENU_AUTO_AIM = 1224,
	STR_MENU_WEAPON_CHANGE = 1225,
	STR_MENU_VIBRATION = 1226,
	STR_MENU_VIBRATION_MODE = 1227,
	STR_MENU_CANCEL = 1228,
	STR_MENU_CONFIRM = 1229,
	STR_MENU_FOLLOWING_CONTROLS_NOT_ASSIGNED1 = 1230,
	STR_MENU_FOLLOWING_CONTROLS_NOT_ASSIGNED2 = 1231,
	STR_MENU_SEVERAL_CONTROLS_NOT_ASSIGNED1 = 1232,
	STR_MENU_SEVERAL_CONTROLS_NOT_ASSIGNED2 = 1233,
	STR_MENU_SEVERAL_CONTROLS_NOT_ASSIGNED3 = 1234,
	STR_MENU_PRESS_2_TO_END_GAME = 1235,
	STR_MENU_BAG_SCORED = 1236,
	STR_MENU_TIME1 = 1237,
	STR_MENU_TIMES1 = 1238,
	STR_MENU_BAG_GRABBED = 1239,
	STR_MENU_TIME2 = 1240,
	STR_MENU_TIMES2 = 1241,
	STR_MENU_BAG_SECURED = 1242,
	STR_MENU_TIME3 = 1243,
	STR_MENU_TIMES3 = 1244,
	STR_MENU_MOST_KILLS_WITHOUT_DYING = 1245,
	STR_MENU_MOST_KILLS_WITHIN_3_SECS = 1246,
	STR_MENU_MOST_KILLS_WITHIN_3_SECONDS = 1247,
	STR_MENU_LONGEST_KILLING_SPREE = 1248,
	STR_MENU_ACCURACY = 1249,
	STR_MENU_NOT_AVAILABLE = 1250,
	STR_MENU_HEAD_SHOTS = 1251,
	STR_MENU_NONE = 1252,
	STR_MENU_FAVOURITE_WEAPON = 1253,
	STR_MENU_NOITEMS = 1254,
	STR_MENU_UNARMED = 1255,
	STR_MENU_DEBUG_MENU = 1256,
	STR_MENU_SETUP_CONTROLS = 1257,
	STR_MENU_PREFERENCES = 1258,
	STR_MENU_GAME_PAUSED = 1259,
	STR_MENU_FAILED = 1260,
	STR_MENU_SUCCESS = 1261,
	STR_MENU_FIND_THE_CULTISTS_ANKH = 1262,
	STR_MENU_SEIZE_THE_GANGS_FILES_AS_EVIDENCE = 1263,
	STR_MENU_GET_THE_CYBORGS_PLANS_AND = 1264,
	STR_MENU_FIND_THE_CURSED_ARTEFACT_AND = 1265,
	STR_MENU_RECLAIM_THE_CASE_OF_STOLEN_JEWELS = 1266,
	STR_MENU_RECOVER_THE_HOSTAGE_CYBERBRAIN_AND = 1267,
	STR_MENU_RETURN_THE_MURDERERS_REMAINS_TO_THE = 1268,
	STR_MENU_MAKE_THE_RANSOM_PICKUP_AND_PROCEED = 1269,
	STR_MENU_GRAB_YOUR_DUTY_FREE_GOODS = 1270,
	STR_MENU_YOUR_ARE_DOOMED_FIGHT_THE_ZOMBIE_ONSLAUGHT = 1271,
	STR_MENU_DEFEND_BASES_FOR_AS_LONG_AS_POSSIBLE = 1272,
	STR_MENU_AWARDS_EARNED = 1273,
	STR_PLAYER_ROOKIE_HEALTH_PLUS_10 = 1274,
	STR_PLAYER_NOVICE_HEALTH_PLUS_5 = 1275,
	STR_PLAYER_NOVICE_HEALTH_PLUS_1 = 1276,
	STR_PLAYER_NORMAL = 1277,
	STR_PLAYER_VETERAN_HEALTH_MINUS_1 = 1278,
	STR_PLAYER_VETERAN_HEALTH_MINUS_5 = 1279,
	STR_PLAYER_HERO_HEALTH_MINUS_10 = 1280,
	STR_PLAYER_KILLED_BY = 1281,
	STR_PROP_YOUR_BAG_HAS_BEEN_STOLEN = 1282,
	STR_PROP_GOT_THE_BAG = 1283,
	STR_PROP_GOT_THE = 1284,
	STR_PROP_RED = 1285,
	STR_PROP_BLUE = 1286,
	STR_PROP_YELLOW = 1287,
	STR_PROP_GREEN = 1288,
	STR_PROP_SCORED_WITH_YOUR_BAG = 1289,
	STR_PROP_SCORE = 1290,
	STR_PROP_BAG_SECURED_BY_TEAMMATE = 1291,
	STR_PROP_BAG_SECURED = 1292,
	STR_PROP_TEAM = 1293,
	STR_PROP_IS_GOING_FOR_THE_LAST_KILL1 = 1294,
	STR_PROP_IS_GOING_FOR_THE_LAST_KILL2 = 1295,
	STR_PROP_INDIRECT_SCORE = 1296,
	STR_MISC_MAX = 1297,
	STR_MISC_MISC = 1298,
	STR_MISC_TRAVERSALS_BASE = 1299,
	STR_MISC_TRAVERSALS_M1 = 1300,
	STR_MISC_TRAVERSALS_M1A = 1301,
	STR_MISC_TRAVERSALS_M2A = 1302,
	STR_MISC_TRAVERSALS_M2 = 1303,
	STR_MISC_TRAVERSALS_M1B = 1304,
	STR_MISC_TRAVERSALS_M2B = 1305,
	STR_MISC_TRAVERSALS_M0F = 1306,
	STR_MISC_TRAVERSALS_M1F = 1307,
	STR_MISC_TRAVERSALS_M2F = 1308,
	STR_MISC_CROUCHES_BASE = 1309,
	STR_MISC_CROUCHES_M1 = 1310,
	STR_MISC_CROUCHES_M1A = 1311,
	STR_MISC_CROUCHES_M2A = 1312,
	STR_MISC_CROUCHES_M2 = 1313,
	STR_MISC_CROUCHES_M1B = 1314,
	STR_MISC_CROUCHES_M2B = 1315,
	STR_MISC_CROUCHES_M0F = 1316,
	STR_MISC_CROUCHES_M1F = 1317,
	STR_MISC_CROUCHES_M2F = 1318,
	STR_MISC_DEATHS = 1319,
	STR_MISC_ANIM_BIND_POSE = 1320,
	STR_MISC_ANIM_STAND = 1321,
	STR_MISC_ANIM_STANDB = 1322,
	STR_MISC_ANIM_RUN = 1323,
	STR_MISC_ANIM_RUNBACK = 1324,
	STR_MISC_ANIM_RUNSTRAFERIGHT = 1325,
	STR_MISC_ANIM_RUNSTRAFELEFT = 1326,
	STR_MISC_ANIM_SNEAK = 1327,
	STR_MISC_ANIM_SNEAKBACK = 1328,
	STR_MISC_ANIM_SNEAKSTRAFERIGHT = 1329,
	STR_MISC_ANIM_SNEAKSTRAFELEFT = 1330,
	STR_MISC_ANIM_TURNLEFT = 1331,
	STR_MISC_ANIM_TURNRIGHT = 1332,
	STR_MISC_ANIM_CROUCHPOSE = 1333,
	STR_MISC_ANIM_CROUCHPOSEB = 1334,
	STR_MISC_ANIM_CROUCHRUN = 1335,
	STR_MISC_ANIM_CROUCHRUNBACK = 1336,
	STR_MISC_ANIM_CROUCHSTRAFELEFT = 1337,
	STR_MISC_ANIM_CROUCHSTRAFERIGHT = 1338,
	STR_MISC_ANIM_CROUCHRUNSTRAFELEFT = 1339,
	STR_MISC_ANIM_CROUCHRUNSTRAFERIGHT = 1340,
	STR_MISC_ANIM_CROUCHSNEAK = 1341,
	STR_MISC_ANIM_CROUCHSNEAKBACK = 1342,
	STR_MISC_ANIM_CROUCHTURNLEFT = 1343,
	STR_MISC_ANIM_CROUCHTURNRIGHT = 1344,
	STR_MISC_ANIM_SHOTHEAD = 1345,
	STR_MISC_ANIM_SHOTHEAD2 = 1346,
	STR_MISC_ANIM_SHOTGUT = 1347,
	STR_MISC_ANIM_SHOTCHEST = 1348,
	STR_MISC_ANIM_SHOT1 = 1349,
	STR_MISC_ANIM_SHOT2 = 1350,
	STR_MISC_ANIM_SHOT3 = 1351,
	STR_MISC_ANIM_SHOT4 = 1352,
	STR_MISC_ANIM_SHOT5 = 1353,
	STR_MISC_ANIM_SHOT6 = 1354,
	STR_MISC_ANIM_SHOT7 = 1355,
	STR_MISC_ANIM_SHOT8 = 1356,
	STR_MISC_ANIM_SHOT9 = 1357,
	STR_MISC_ANIM_SHOT10 = 1358,
	STR_MISC_ANIM_SHOT11 = 1359,
	STR_MISC_ANIM_SHOT12 = 1360,
	STR_MISC_ANIM_SHOT13 = 1361,
	STR_MISC_ANIM_SHOT14 = 1362,
	STR_MISC_ANIM_SHOT15 = 1363,
	STR_MISC_ANIM_SHOT16 = 1364,
	STR_MISC_ANIM_SHOT17 = 1365,
	STR_MISC_ANIM_SHOT18 = 1366,
	STR_MISC_ANIM_SHOT19 = 1367,
	STR_MISC_ANIM_SHOT20 = 1368,
	STR_MISC_ANIM_SHOT21 = 1369,
	STR_MISC_FIRST_PERSON = 1370,
	STR_MISC_PROP_VIEW = 1371,
	STR_MISC_FLOOR = 1372,
	STR_MISC_FLOATING = 1373,
	STR_MISC_CONTROL_PAD = 1374,
	STR_MISC_GAME = 1375,
	STR_MISC_3 = 1376,
	STR_MISC_2 = 1377,
	STR_MISC_4 = 1378,
	STR_MISC_1 = 1379,
	STR_MISC_L1 = 1380,
	STR_MISC_L2 = 1381,
	STR_MISC_R1 = 1382,
	STR_MISC_R2 = 1383,
	STR_MISC_L3 = 1384,
	STR_MISC_R3 = 1385,
	STR_NUM = 1386
};

typedef u_long128 u128;
typedef long long unsigned int u64;
typedef long long int s64;
typedef unsigned int u32;
typedef int s32;
typedef short unsigned int u16;
typedef short int s16;
typedef unsigned char u8;
typedef char s8;
typedef unsigned int boolean;
typedef void *DecalID;
typedef int fix_t;
typedef void (*CdlCB)(/* parameters unknown */);

typedef struct { // 0x4
	/* 0x0 */ u_char trycount;
	/* 0x1 */ u_char spindlctrl;
	/* 0x2 */ u_char datapattern;
	/* 0x3 */ u_char pad;
} sceCdRMode;

typedef struct { // 0x4
	/* 0x0 */ u_char minute;
	/* 0x1 */ u_char second;
	/* 0x2 */ u_char sector;
	/* 0x3 */ u_char track;
} sceCdlLOCCD;

typedef struct { // 0x24
	/* 0x00 */ u_int lsn;
	/* 0x04 */ u_int size;
	/* 0x08 */ char name[16];
	/* 0x18 */ u_char date[8];
	/* 0x20 */ u_int flag;
} sceCdlFILE;

typedef struct { // 0x8
	/* 0x0 */ u_char stat;
	/* 0x1 */ u_char second;
	/* 0x2 */ u_char minute;
	/* 0x3 */ u_char hour;
	/* 0x4 */ u_char pad;
	/* 0x5 */ u_char day;
	/* 0x6 */ u_char month;
	/* 0x7 */ u_char year;
} sceCdCLOCK;

enum {
	POS_ABSOLUTE = 0,
	POS_STARTOFFSTART = 1,
	POS_STARTOFFMID = 2,
	POS_STARTOFFEND = 3,
	POS_MIDOFFSTART = 4,
	POS_MIDOFFMID = 5,
	POS_MIDOFFEND = 6,
	POS_ENDOFFSTART = 7,
	POS_ENDOFFMID = 8,
	POS_ENDOFFEND = 9,
	POS_NUM = 10
};

struct menuitemsize_s { // 0x8
	/* 0x0 */ int width;
	/* 0x4 */ int height;
};

typedef menuitemsize_s menuitemsize;

// warning: multiple differing types with the same name (fields size not equal)
struct menuitem_s { // 0x20
	/* 0x00 */ u8 *text;
	/* 0x04 */ u8 xpostype;
	/* 0x06 */ u16 xpos;
	/* 0x08 */ void *xposref;
	/* 0x0c */ u8 ypostype;
	/* 0x0e */ u16 ypos;
	/* 0x10 */ void *yposref;
	/* 0x14 */ u8 flags;
	/* 0x18 */ void *actiondata;
	/* 0x1c */ u32 spare;
};

typedef menuitem_s menuitem;

// warning: multiple differing types with the same name (fields size not equal)
struct menu_s { // 0x10
	/* 0x0 */ u8 *title;
	/* 0x4 */ u8 numitems;
	/* 0x8 */ menuitem *curitem;
	/* 0xc */ u32 spare;
	/* 0x10 */ menuitem items[0];
};

typedef menu_s menu;
typedef void (*menuMsgTicker)(/* parameters unknown */);

enum {
	JOYMODE_GAME = 0,
	JOYMODE_DEBUGMENU = 1,
	JOYMODE_MOVEVIEW = 2,
	JOYMODE_MAX = 3
};

enum {
	MEM_PER_LOCAL = 0,
	MEM_PER_LEV = 1,
	MEM_PER_ETER = 2,
	MEM_PER_MAX = 3
};

enum memdbstate {
	MEMDB_LOADING = 0,
	MEMDB_FRONTEND = 1,
	MEMDB_LEVEL = 2
};

enum joyaxisnum {
	JOYAXIS_NONE = 0,
	JOYAXIS_X1 = 1,
	JOYAXIS_Y1 = 2,
	JOYAXIS_X2 = 3,
	JOYAXIS_Y2 = 4,
	JOYAXIS_NUM = 5
};

enum {
	RM_NONE = 0,
	RM_REPLAY = 1,
	RM_RECORD = 2,
	RM_NUM = 3
};

struct texinfo_s { // 0x10
	/* 0x0 */ int id;
	/* 0x4 */ int clampu;
	/* 0x8 */ int clampv;
	/* 0xc */ int flags;
};

typedef texinfo_s texinfo;

typedef union { // 0x4
	/* 0x0 */ struct { // 0x4
		/* 0x0 */ u8 r;
		/* 0x1 */ u8 g;
		/* 0x2 */ u8 b;
		/* 0x3 */ u8 a;
	} c;
	/* 0x0 */ u32 rgba;
} rgba_t;

enum {
	UCODE_NORMAL = 0,
	UCODE_REFLECT = 1,
	UCODE_LIT = 2,
	UCODE_LITFILLET = 3,
	UCODE_LITNEARCLIP = 4,
	UCODE_CUTSCENE = 5,
	UCODE_NUM = 6
};

struct fields_s { // 0x4
	/* 0x0 */ u16 qwc;
	/* 0x2 */ u8 mark;
	/* 0x3 */ u8 id;
};

union word1_u { // 0x4
	/* 0x0 */ u32 val;
	/* 0x0 */ fields_s fields;
};

struct dlDmaTag_s { // 0x10
	/* 0x0 */ word1_u word1;
	/* 0x4 */ dlDmaTag_s *next;
	/* 0x8 */ u_int p[2];
};

typedef dlDmaTag_s dlDmaTag;

struct gfxchunk_s { // 0xa
	/* 0x0 */ short int texture;
	/* 0x2 */ short int giftagoffset;
	/* 0x4 */ short int vtxoffset;
	/* 0x6 */ short int numvtx;
	/* 0x8 */ short int ucodetype;
};

typedef gfxchunk_s gfxchunk;

enum {
	DMTX_NULL = -1,
	DMTX_NONE = 0,
	DMTX_NORMAL = 1,
	DMTX_OVERLAY = 2
};

enum {
	BLENDMODE_NULL = -1,
	BLENDMODE_RGB = 0,
	BLENDMODE_RGBA = 1,
	BLENDMODE_ADDRGBA = 2,
	BLENDMODE_INVERSE_ADDRGBA = 3,
	BLENDMODE_FRAMEBUFFER_USES_ALPHA = 4,
	BLENDMODE_LIGHTEN_WITH_ALPHA = 5,
	BLENDMODE_DARKEN_WITH_ALPHA = 6,
	BLENDMODE_RGB_EXTRA = 7,
	BLENDMODE_SUBTRACTION = 8,
	BLENDMODE_RGBFIXA = 9,
	BLENDMODE_ADDRGBFIXA = 10,
	BLENDMODE_INVERSE_ADDRGBFIXA = 11,
	BLENDMODE_FRAMEBUFFER_USES_FIXED_ALPHA = 12,
	BLENDMODE_LIGHTEN_WITH_FIXED_ALPHA = 13,
	BLENDMODE_DARKEN_WITH_FIXED_ALPHA = 14,
	BLENDMODE_RGB_EXTRA_FIXED = 15,
	BLENDMODE_SUBTRACTION_FIXED = 16
};

typedef struct { // 0x34
	/* 0x00 */ u32 width;
	/* 0x04 */ u32 height;
	/* 0x08 */ u32 mask;
	/* 0x0c */ int numfit;
	/* 0x10 */ u8 fit[32];
	/* 0x30 */ int extents;
} texsize_t;

typedef struct { // 0x4c
	/* 0x00 */ u32 blocks;
	/* 0x04 */ u32 flags;
	/* 0x08 */ texsize_t *size;
	/* 0x0c */ s16 texid[32];
} pageinfo;

typedef struct { // 0x40
	/* 0x00 */ u32 *pTags;
	/* 0x04 */ u8 *pData;
	/* 0x08 */ int DataSize;
	/* 0x0c */ int NumFrames;
	/* 0x10 */ int Frame;
	/* 0x14 */ float Rate;
	/* 0x18 */ float Count;
	/* 0x1c */ sceIpuDmaEnv Env;
} MovieData;

struct emTexture_s { // 0xac
	/* 0x00 */ int flags;
	/* 0x04 */ int TexNum;
	/* 0x08 */ u32 *vifdata;
	/* 0x0c */ u32 clampx;
	/* 0x10 */ u32 clampy;
	/* 0x14 */ u8 *data;
	/* 0x18 */ u32 palpos;
	/* 0x1c */ rgba_t *palette;
	/* 0x20 */ void *pInfo;
	/* 0x24 */ u32 miptbp[7];
	/* 0x40 */ u32 miptbw[7];
	/* 0x5c */ u16 pow2width[7];
	/* 0x6a */ u16 pow2height[7];
	/* 0x78 */ u16 sizeX[7];
	/* 0x86 */ u16 sizeY[7];
	/* 0x94 */ u16 loadsizeX[7];
	/* 0xa2 */ s8 size[7];
	/* 0xa9 */ u8 SwapFlags;
	/* 0xaa */ u8 texformat;
	/* 0xab */ u8 miplevels;
};

typedef emTexture_s emTexture;

struct texbuffer_s { // 0x1a0
	/* 0x000 */ emTexture *textures;
	/* 0x004 */ pageinfo *pages;
	/* 0x008 */ u8 *textypes;
	/* 0x00c */ int nexttexid;
	/* 0x010 */ int firstpage;
	/* 0x014 */ int numpages;
	/* 0x018 */ int max_texid;
	/* 0x01c */ boolean HasUnusedPage;
	/* 0x020 */ int CurrentFillPalettePage;
	/* 0x024 */ int CurrentSwapPalettePage;
	/* 0x028 */ int CurrentSwapPaletteNum;
	/* 0x02c */ int CurrentFillTexturePage[31];
	/* 0x0a8 */ int CurrentSwapTexturePage[31];
	/* 0x124 */ int CurrentSwapTextureNum[31];
};

typedef texbuffer_s texbuffer;

enum {
	ZB_NULL = -1,
	ZB_NOTEST_NOWRITE = 0,
	ZB_NOTEST_WRITE = 1,
	ZB_TEST_NOWRITE = 2,
	ZB_TEST_WRITE = 3,
	ZB_TEST_WRITE_ALPHATEST = 4,
	ZB_NOTEST_NOWRITE_DEST_ALPHATEST = 5,
	ZB_TEST_WRITE_GREATER = 6,
	ZB_NUMMODES = 7
};

struct rect_s { // 0x10
	/* 0x0 */ int x1;
	/* 0x4 */ int y1;
	/* 0x8 */ int x2;
	/* 0xc */ int y2;
};

typedef rect_s rect_t;

struct window_s { // 0x44
	/* 0x00 */ int left;
	/* 0x04 */ int right;
	/* 0x08 */ int midx;
	/* 0x0c */ int width;
	/* 0x10 */ int halfwidth;
	/* 0x14 */ int top;
	/* 0x18 */ int bottom;
	/* 0x1c */ int midy;
	/* 0x20 */ int height;
	/* 0x24 */ int halfheight;
	/* 0x28 */ float scalex;
	/* 0x2c */ float scaley;
	/* 0x30 */ int scaleshiftx;
	/* 0x34 */ int scaleshifty;
	/* 0x38 */ float zbufferrange;
	/* 0x3c */ float zbufferoffset;
	/* 0x40 */ float zbufferbias;
};

typedef window_s window_t;

typedef enum {
	GS_INDETERMINED = 0,
	GS_NOTINLEVEL = 1,
	GS_LOADING = 2,
	GS_LEVEL = 3,
	GS_COMPLETED = 4,
	GS_LEVELOUT = 5,
	GS_LOADINGSCREENIN = 6,
	GS_ENDLEVEL = 7,
	GS_ENDLEVELCOUNT = 8
} gamestate_t;

enum {
	GAMESKILL_EASY = 0,
	GAMESKILL_NORMAL = 1,
	GAMESKILL_HARD = 2,
	GAMESKILL_NUM = 3
};

enum {
	BOTSKILL_PATHETIC = 0,
	BOTSKILL_EASY = 1,
	BOTSKILL_AVERAGE = 2,
	BOTSKILL_GOOD = 3,
	BOTSKILL_TOUGH = 4,
	BOTSKILL_NUM = 5
};

typedef enum {
	GM_INDETERMINED = 0,
	GM_BAGTAG = 1,
	GM_CTF = 2,
	GM_DEATHMATCH = 3,
	GM_ESCORT = 4,
	GM_KNOCKOUT = 5,
	GM_LASTSTAND = 6,
	GM_ZONES = 7,
	GM_STORY = 8,
	NUM_GAMEMODES = 9
} gamemode_t;

struct gamemodeinfo_s { // 0xc
	/* 0x0 */ short int name;
	/* 0x4 */ int useteamspawns;
	/* 0x8 */ int useteamdrops;
};

typedef gamemodeinfo_s gamemodeinfo_t;

struct storyinfo_s { // 0x8
	/* 0x0 */ short int title;
	/* 0x2 */ short int levelnum;
	/* 0x4 */ u16 male;
	/* 0x6 */ u16 female;
};

typedef storyinfo_s storyinfo_t;

struct teaminfo_s { // 0x8
	/* 0x0 */ short int name;
	/* 0x4 */ u32 colour;
};

typedef teaminfo_s teaminfo_t;

struct resetgameparms_s { // 0x6c
	/* 0x00 */ int numplayers;
	/* 0x04 */ int numlocalplayers;
	/* 0x08 */ int numbots;
	/* 0x0c */ int numteams;
	/* 0x10 */ u8 teamnums[5];
	/* 0x15 */ u8 chrtypes[14];
	/* 0x23 */ u8 chrteams[14];
	/* 0x34 */ int levelnum;
	/* 0x38 */ int challengenum;
	/* 0x3c */ int gamemode;
	/* 0x40 */ int gameskill;
	/* 0x44 */ u32 gameflags;
	/* 0x48 */ u32 miscflags;
	/* 0x4c */ int timelimit;
	/* 0x50 */ int killlimit;
	/* 0x54 */ int scorelimit;
	/* 0x58 */ int inactivitytimer;
	/* 0x5c */ int demonum;
	/* 0x60 */ u8 teamactive[5];
	/* 0x68 */ int totalbotskill;
};

typedef resetgameparms_s resetgameparms;

struct bubblesort_s { // 0x8
	/* 0x0 */ int value;
	/* 0x4 */ u32 data;
};

typedef bubblesort_s bubblesort_t;

enum {
	SKELTYPE_NONE = -1,
	SKELTYPE_HUMAN19 = 0,
	SKELTYPE_BARRELROBOT = 1,
	SKELTYPE_RAILSPIDER = 2,
	SKELTYPE_SPIDER = 3,
	SKELTYPE_LIMBRELOCATED = 4,
	SKELTYPE_NUM = 5
};

enum {
	CHANNEL_TYPE_NULL = 0,
	CHANNEL_TYPE_QUATERNION_LINEAR = 1,
	CHANNEL_TYPE_QUATERNION_SPHERICAL = 2,
	CHANNEL_TYPE_MATRIX = 3,
	CHANNEL_TYPE_TRANSFORM_XYZ = 4,
	CHANNEL_TYPE_TRANSFORM_X = 5,
	CHANNEL_TYPE_TRANSFORM_Y = 6,
	CHANNEL_TYPE_TRANSFORM_Z = 7,
	CHANNEL_TYPE_QUATERNION_SPHERICAL_TRANSFORM_XYZ = 8,
	CHANNEL_TYPE_NUM = 9
};

struct animData_s { // 0x1c
	/* 0x00 */ float x;
	/* 0x04 */ float y;
	/* 0x08 */ float z;
	/* 0x0c */ float qx;
	/* 0x10 */ float qy;
	/* 0x14 */ float qz;
	/* 0x18 */ float qw;
};

typedef animData_s animData;

struct channel_s { // 0x20
	/* 0x00 */ int id;
	/* 0x04 */ int type;
	/* 0x08 */ float duration;
	/* 0x0c */ int numKeyframes;
	/* 0x10 */ int *keyframeList;
	/* 0x14 */ float *data;
	/* 0x18 */ channel *prev;
	/* 0x1c */ channel *next;
};

typedef channel_s channel;

typedef struct { // 0x24
	/* 0x00 */ int totalFrames;
	/* 0x04 */ int numKeyframes;
	/* 0x08 */ int numJoints;
	/* 0x0c */ int fAnimProp;
	/* 0x10 */ float length;
	/* 0x14 */ int *pKeyframes;
	/* 0x18 */ int framelastplayed;
	/* 0x1c */ int numChannels;
	/* 0x20 */ channel *pChannel;
} animInfoProp;

typedef struct { // 0x80
	/* 0x00 */ float m[4][4];
	/* 0x40 */ float m2[4][4];
} animRawCSCam_t;

typedef struct { // 0x18
	/* 0x00 */ float dx;
	/* 0x04 */ float dy;
	/* 0x08 */ float dz;
	/* 0x0c */ float r;
	/* 0x10 */ float g;
	/* 0x14 */ float b;
} animRawCSLight_t;

typedef struct { // 0x28
	/* 0x00 */ char id[4];
	/* 0x04 */ int animHeaderOfs;
	/* 0x08 */ int animRawCSCamOfs;
	/* 0x0c */ int animRawCSCamLen;
	/* 0x10 */ int animRawCSLightOfs[3];
	/* 0x1c */ int animRawCSLightLen[3];
} animRawHeader_t;

struct animHeader_s { // 0x24
	/* 0x00 */ int totalFrames;
	/* 0x04 */ int numKeyframes;
	/* 0x08 */ int numJoints;
	/* 0x0c */ int fAnimProp;
	/* 0x10 */ float length;
	/* 0x14 */ int *pKeyframes;
	/* 0x18 */ int unused;
	/* 0x1c */ int numChannels;
	/* 0x20 */ channel *pChannel;
};

typedef animHeader_s animHeader;

struct animChannel_s { // 0x20
	/* 0x00 */ int id;
	/* 0x04 */ int type;
	/* 0x08 */ float duration;
	/* 0x0c */ int numKeyframes;
	/* 0x10 */ int *keyframeList;
	/* 0x14 */ float *data;
	/* 0x18 */ channel *prev;
	/* 0x1c */ channel *next;
};

typedef animChannel_s animChannel;

struct bglighttest_s { // 0x34
	/* 0x00 */ int Room;
	/* 0x04 */ int ID;
	/* 0x08 */ float Col[3];
	/* 0x14 */ float Dir[3];
	/* 0x20 */ float Dir1[3];
	/* 0x2c */ float Dist;
	/* 0x30 */ float Brightness;
};

typedef bglighttest_s bglighttest;

struct light_s { // 0xa8
	/* 0x00 */ int type;
	/* 0x04 */ short int subtype;
	/* 0x06 */ short int directional;
	/* 0x08 */ float lightpos[5][3];
	/* 0x44 */ float glowpos[5][3];
	/* 0x80 */ float normal[3];
	/* 0x8c */ u32 col;
	/* 0x90 */ float size;
	/* 0x94 */ float penumbra;
	/* 0x98 */ float falloffNear;
	/* 0x9c */ float falloffFar;
	/* 0xa0 */ u8 intensitycontroller;
	/* 0xa1 */ u8 intensity;
	/* 0xa2 */ char intensityvel;
	/* 0xa3 */ char spare[1];
	/* 0xa4 */ char PrevAlpha[4];
};

typedef light_s light;

enum {
	LIGHTTYPE_GLOW = 0,
	LIGHTTYPE_NOGLOW = 1,
	LIGHTTYPE_TORCH = 2,
	LIGHTTYPE_FLARE = 3,
	LIGHTTYPE_NUM = 4
};

enum {
	FLARETYPE_SUN = 0,
	FLARETYPE_COPTER = 1,
	FLARETYPE_EVENINGSUN = 2,
	FLARETYPE_CAR = 3,
	FLARE_TYPES = 4
};

enum {
	GLOWTYPE_NORMAL = 0,
	GLOWTYPE_VOLGLOW = 1,
	GLOWTYPE_4STAR = 2,
	GLOWTYPE_6STAR = 3,
	GLOWTYPE_RING = 4,
	GLOW_TYPES = 5
};

struct dof_s { // 0xc
	/* 0x0 */ float pos[3];
};

typedef dof_s dof;

struct gfxpointers_s { // 0x14
	/* 0x00 */ u32 *giftags;
	/* 0x04 */ float *xyz;
	/* 0x08 */ float *st;
	/* 0x0c */ u32 *rgba;
	/* 0x10 */ float *norm;
};

typedef gfxpointers_s gfxpointers;
typedef u8 vindex;

typedef struct { // 0x5
	/* 0x0 */ u8 Vertex1;
	/* 0x1 */ u8 Vertex2;
	/* 0x2 */ u8 Part;
	/* 0x3 */ u8 Chunk;
	/* 0x4 */ u8 Poly;
} AdjPoly;

typedef struct { // 0x20
	/* 0x00 */ s8 NumVertices;
	/* 0x01 */ s8 x;
	/* 0x02 */ s8 y;
	/* 0x03 */ s8 z;
	/* 0x04 */ float Norm[3];
	/* 0x10 */ float d;
	/* 0x14 */ vindex *pVertices;
	/* 0x18 */ int NumAdjPolys;
	/* 0x1c */ AdjPoly *pAdjPolys;
} ColPoly;

struct obbounds_s { // 0x20
	/* 0x00 */ float mins[3];
	/* 0x0c */ float maxs[3];
	/* 0x18 */ int NumPolys;
	/* 0x1c */ ColPoly *pColPolys;
};

typedef obbounds_s obbounds;

struct glasspointdef_s { // 0x1c
	/* 0x00 */ float pos[3];
	/* 0x0c */ float stnorm[3];
	/* 0x18 */ u32 rgba;
};

typedef glasspointdef_s glasspointdef;

struct glassdef_s { // 0x24
	/* 0x00 */ float state;
	/* 0x04 */ int texture;
	/* 0x08 */ int reflect;
	/* 0x0c */ DecalID glassdecalID[4];
	/* 0x1c */ int flags;
	/* 0x20 */ u32 numpoints;
	/* 0x24 */ glasspointdef points[0];
};

typedef glassdef_s glassdef;

struct glassHit_s { // 0x30
	/* 0x00 */ prop_s *prop;
	/* 0x04 */ float hitpos[3];
	/* 0x10 */ float hitdir[3];
	/* 0x1c */ float hitnorm[3];
	/* 0x28 */ int room;
	/* 0x2c */ glassdef *glass;
};

typedef glassHit_s glassHit;

struct glassResults_s { // 0xf8
	/* 0x00 */ int numHits;
	/* 0x04 */ int hitReverse;
	/* 0x08 */ glassHit hits[5];
};

typedef glassResults_s glassResults;

struct specialpointdef_s { // 0x18
	/* 0x00 */ float pos[3];
	/* 0x0c */ float norm[3];
};

typedef specialpointdef_s specialpointdef;

struct specialdef_s { // 0x10
	/* 0x0 */ int type;
	/* 0x4 */ int subtype;
	/* 0x8 */ int flags;
	/* 0xc */ u32 numpoints;
	/* 0x10 */ specialpointdef points[0];
};

typedef specialdef_s specialdef;

struct weatherdef_s { // 0x18
	/* 0x00 */ float bb[2][3];
};

typedef weatherdef_s weatherdef;

struct bumppointdef_s { // 0x1c
	/* 0x00 */ float pos[3];
	/* 0x0c */ float stnorm[3];
	/* 0x18 */ u32 rgba;
};

typedef bumppointdef_s bumppointdef;

struct bumppolydef_s { // 0x10
	/* 0x0 */ int texture;
	/* 0x4 */ int flags;
	/* 0x8 */ int planeid;
	/* 0xc */ u32 numpoints;
	/* 0x10 */ bumppointdef points[0];
};

typedef bumppolydef_s bumppolydef;

enum {
	GFX_OPA = 0,
	GFX_XLU = 1,
	GFX_SEMIOPA = 2,
	GFX_NUM = 3
};

struct partdef_s { // 0x90
	/* 0x00 */ char type;
	/* 0x01 */ char matrixnum;
	/* 0x02 */ char parent;
	/* 0x03 */ char child;
	/* 0x04 */ char next;
	/* 0x05 */ char prev;
	/* 0x06 */ char numlights;
	/* 0x07 */ char numdofs;
	/* 0x08 */ s16 numfloors;
	/* 0x0a */ s16 numwalls;
	/* 0x0c */ s16 numglass;
	/* 0x0e */ s16 numspecial;
	/* 0x10 */ s16 numbumppolys;
	/* 0x12 */ s16 spare;
	/* 0x14 */ gfxchunk *chunklists[3];
	/* 0x20 */ light *lights;
	/* 0x24 */ gfxpointers pointers[3];
	/* 0x60 */ u16 switchmask;
	/* 0x62 */ u16 numvtxs;
	/* 0x64 */ u16 numtris;
	/* 0x66 */ u16 pad;
	/* 0x68 */ dof *dofs;
	/* 0x6c */ floordef_s **floors;
	/* 0x70 */ walldef_s **walls;
	/* 0x74 */ glassdef **glass;
	/* 0x78 */ specialdef **special;
	/* 0x7c */ bumppolydef **bumppolys;
	/* 0x80 */ obbounds *bounds[3];
	/* 0x8c */ float weight;
};

typedef partdef_s partdef;

struct obdef_s { // 0x30
	/* 0x00 */ int numparts;
	/* 0x04 */ int nummatrices;
	/* 0x08 */ int lit;
	/* 0x0c */ texinfo *texlist;
	/* 0x10 */ u32 ***dmapointers[2][3];
	/* 0x28 */ float globalscale;
	/* 0x2c */ void *bounds;
};

typedef obdef_s obdef;

struct animinfo_s { // 0x40
	/* 0x00 */ int num;
	/* 0x04 */ float time;
	/* 0x08 */ float curpos[3];
	/* 0x14 */ float lastpos[3];
	/* 0x20 */ float relpos[3];
	/* 0x2c */ float speed;
	/* 0x30 */ float tagtime;
	/* 0x34 */ float lastrot;
	/* 0x38 */ int fAnimLooped;
	/* 0x3c */ int flag;
};

typedef animinfo_s animinfo;

struct skeleton_s { // 0x14
	/* 0x00 */ mtx_u *matrices;
	/* 0x04 */ animData *ad;
	/* 0x08 */ int id;
	/* 0x0c */ int type;
	/* 0x10 */ u8 *bindfile;
};

typedef skeleton_s skeleton;

struct skelmtx_s { // 0x64
	/* 0x00 */ int *mindex;
	/* 0x04 */ int *bindex;
	/* 0x08 */ float baseheight;
	/* 0x0c */ int basemtx;
	/* 0x10 */ int hipmtx;
	/* 0x14 */ int waistmtx;
	/* 0x18 */ int neckmtx;
	/* 0x1c */ int lwristmtx;
	/* 0x20 */ int rwristmtx;
	/* 0x24 */ int lelbowmtx;
	/* 0x28 */ int relbowmtx;
	/* 0x2c */ int lkneemtx;
	/* 0x30 */ int rkneemtx;
	/* 0x34 */ int lheelmtx;
	/* 0x38 */ int rheelmtx;
	/* 0x3c */ int headmtx;
	/* 0x40 */ int *partclosestbead;
	/* 0x44 */ mtx_u *bindneckmtx;
	/* 0x48 */ mtx_u *bindheadmtx;
	/* 0x4c */ mtx_u *bindlarmmtx;
	/* 0x50 */ mtx_u *bindrarmmtx;
	/* 0x54 */ mtx_u *bindllegmtx;
	/* 0x58 */ mtx_u *bindrlegmtx;
	/* 0x5c */ mtx_u *bindwaistmtx;
	/* 0x60 */ mtx_u *bindmtx;
};

typedef skelmtx_s skelmatrices;

enum {
	OVERRIDEFX_FRAMEMASK = 1
};

enum {
	AIMING_NOTPOINTING = 1,
	AIMING_SET = 2,
	AIMING_TWEENUP = 4,
	AIMING_TWEENDOWN = 8,
	AIMING_OVERWRITEANGLECALCED = 16
};

struct obinst_s { // 0x178
	/* 0x000 */ obdef *ob;
	/* 0x004 */ mtx_u *matrices;
	/* 0x008 */ mtx_u *rmatrices;
	/* 0x00c */ mtx_u *lightdir;
	/* 0x010 */ mtx_u *lightcol;
	/* 0x014 */ int lastlight[2];
	/* 0x01c */ float lastlightpos[2][3];
	/* 0x034 */ float lastlightcol[2][3];
	/* 0x04c */ skeleton_s *skel;
	/* 0x050 */ skelmatrices *skelmtx;
	/* 0x054 */ int overwriteparts;
	/* 0x058 */ int overwriteanimnum;
	/* 0x05c */ float overwriteanglex;
	/* 0x060 */ float overwriteangley;
	/* 0x064 */ float lastoverwriteanglex;
	/* 0x068 */ float lastoverwriteangley;
	/* 0x06c */ float aimingtweentime;
	/* 0x070 */ float aimingtweencurrtime;
	/* 0x074 */ int aimingStatus;
	/* 0x078 */ animinfo anim1;
	/* 0x0b8 */ animinfo anim2;
	/* 0x0f8 */ int animdelaynum;
	/* 0x0fc */ float animdelayblendtime;
	/* 0x100 */ float animdelayspeed;
	/* 0x104 */ float animblendtime;
	/* 0x108 */ float animblendfrac;
	/* 0x10c */ float animblendcurrtime;
	/* 0x110 */ prop_s *prop;
	/* 0x114 */ gfxpointers *override;
	/* 0x118 */ u32 ***overridedma[2][2][3];
	/* 0x148 */ u32 **overridergb[2][3];
	/* 0x160 */ int overridetile;
	/* 0x164 */ int overridebuf;
	/* 0x168 */ u16 switchflags;
	/* 0x16a */ u16 overrideflags;
	/* 0x16c */ s8 overridealphastate;
	/* 0x16d */ s8 overridezbstate;
	/* 0x16e */ s8 spare;
	/* 0x16f */ u8 fixedalpha;
	/* 0x170 */ float overrideambientscale;
	/* 0x174 */ u8 overrideambientCol[4];
};

typedef obinst_s obinst;

enum {
	UCODETYPE_CLIP = 0,
	UCODETYPE_NOCLIP = 1
};

enum {
	PARTTYPE_BEAD = 0,
	PARTTYPE_FILLET = 1,
	PARTTYPE_DOUBLEFILLET = 2,
	PARTTYPE_SPECIALFILLET = 3,
	PARTTYPE_NULL = 4
};

struct manualLighting_s { // 0x54
	/* 0x00 */ float ambient[3];
	/* 0x0c */ float col1[3];
	/* 0x18 */ float col2[3];
	/* 0x24 */ float col3[3];
	/* 0x30 */ float theta1;
	/* 0x34 */ float theta2;
	/* 0x38 */ float theta3;
	/* 0x3c */ float phi1;
	/* 0x40 */ float phi2;
	/* 0x44 */ float phi3;
	/* 0x48 */ float dist1;
	/* 0x4c */ float dist2;
	/* 0x50 */ float dist3;
};

typedef manualLighting_s manualLighting;

typedef struct { // 0x14
	/* 0x00 */ obinst *pInst;
	/* 0x04 */ int Part;
	/* 0x08 */ int GFXType;
	/* 0x0c */ int Chunk;
	/* 0x10 */ int Poly;
} HitInfoDef;

union mtx_u { // 0x40
	/* 0x00 */ float f[4][4];
	/* 0x00 */ u32 l[16];
	/* 0x00 */ u16 s[32];
};

typedef mtx_u mtx;

struct vector3_u { // 0xc
	/* 0x0 */ float v[3];
};

typedef vector3_u vector3;

enum {
	DAXIS_X = 0,
	DAXIS_Y = 1,
	DAXIS_Z = 2
};

enum {
	ANIMFLAG_TURNLEFT = 1,
	ANIMFLAG_TURNRIGHT = 2,
	ANIMFLAG_HASROTATED = 4
};

enum {
	ANIM_TYPE_TRAVERSAL = 0,
	ANIM_TYPE_DEATH = 1
};

enum {
	ANIMPARTHIT_BODY = 1,
	ANIMPARTHIT_LARM = 2,
	ANIMPARTHIT_RARM = 3,
	ANIMPARTHIT_HEAD = 4,
	ANIMPARTHIT_LLEG = 5,
	ANIMPARTHIT_RLEG = 6
};

enum {
	GUNOPTION_ALWAYS_CHANGE_ON_PICKUP = 0,
	GUNOPTION_KEEP_CURRENT_WEAPON_ON_PICKUP = 1,
	GUNOPTION_USE_BEST_ON_PICKUP = 2,
	GUNOPTION_NUM = 3
};

enum {
	AMMOTYPE_NONE = 0,
	AMMOTYPE_SMALLBULLET = 1,
	AMMOTYPE_BIGBULLET = 2,
	AMMOTYPE_SHELL = 3,
	AMMOTYPE_PLASMA = 4,
	AMMOTYPE_ROCKET = 5,
	AMMOTYPE_GRENADE = 6,
	AMMOTYPE_BRICK = 7,
	AMMOTYPE_REMOTEMINE = 8,
	AMMOTYPE_TIMEDMINE = 9,
	AMMOTYPE_PROXIMITYMINE = 10,
	AMMOTYPE_TNT = 11,
	AMMOTYPE_FLARE = 12,
	AMMOTYPE_DISC = 13,
	AMMOTYPE_ELECTRIC = 14,
	AMMOTYPE_PETROL = 15,
	AMMOTYPE_FOAM = 16,
	AMMOTYPE_NUM = 17
};

struct ammoInfo_s { // 0x18
	/* 0x00 */ int maxAmmo;
	/* 0x04 */ char *filename;
	/* 0x08 */ int name;
	/* 0x0c */ boolean hudBar;
	/* 0x10 */ u32 barBgCol;
	/* 0x14 */ u32 barFgCol;
};

typedef ammoInfo_s ammoInfo_t;

enum {
	GUNFLAG_ONEHANDED = 1,
	GUNFLAG_TWOHANDED = 2,
	GUNFLAG_TWOHANDONLY = 4,
	GUNFLAG_CANSPRAYFIRE = 8,
	GUNFLAG_NODROP = 16,
	GUNFLAG_TOGGLEZOOM = 32,
	GUNFLAG_SILENCED = 64
};

enum {
	GUNANIMFLAG_NONE = 0,
	GUNANIMFLAG_HAMMER = 1
};

enum {
	GUNFIREFLAG_NONE = 0,
	GUNFIREFLAG_AIAIMATFLOOR = 1,
	GUNFIREFLAG_NOAIMACCURACY = 2
};

struct playerGunAnimationInfo_s { // 0x3c
	/* 0x00 */ float recoilStrength;
	/* 0x04 */ float recoilStrengthRotX;
	/* 0x08 */ float strengthRotZ;
	/* 0x0c */ float unrecoilSpeed;
	/* 0x10 */ float recoilStrengthSlider;
	/* 0x14 */ float unrecoilSpeedSlider;
	/* 0x18 */ float barrelVelocity;
	/* 0x1c */ float barrelVelocitySlowdown;
	/* 0x20 */ float sineAmount;
	/* 0x24 */ float sineSlowdown;
	/* 0x28 */ float noiseAmount;
	/* 0x2c */ float noiseSlowdown;
	/* 0x30 */ float hammerSpeed;
	/* 0x34 */ float hammerRotation;
	/* 0x38 */ float hammerBackSpeed;
};

typedef playerGunAnimationInfo_s playerGunAnimationInfo_t;

struct fireInfo_s { // 0xa4
	/* 0x00 */ int fireFlags;
	/* 0x04 */ int bulletType;
	/* 0x08 */ int numShots;
	/* 0x0c */ int fireDelay;
	/* 0x10 */ int singleShotTime;
	/* 0x14 */ int repeatShotTime;
	/* 0x18 */ float ricochet;
	/* 0x1c */ float bulletSpeed;
	/* 0x20 */ float inaccuracy;
	/* 0x24 */ int singleShotAmmo;
	/* 0x28 */ int repeatShotAmmo;
	/* 0x2c */ int fireSoundNum;
	/* 0x30 */ int repeatFireSoundNum;
	/* 0x34 */ float repeatFireSoundTime;
	/* 0x38 */ int cheatFireSoundNum;
	/* 0x3c */ int cheatRepeatFireSoundNum;
	/* 0x40 */ float cheatRepeatFireSoundTime;
	/* 0x44 */ int cartridgeSoundNum;
	/* 0x48 */ int cartridgeType;
	/* 0x4c */ float cartridgeVelocityVariance[3];
	/* 0x58 */ float cartridgeVelocityScale;
	/* 0x5c */ int damageType;
	/* 0x60 */ float dualShockPower;
	/* 0x64 */ float dualShockPowerSlowdown;
	/* 0x68 */ playerGunAnimationInfo_t plAnimationInfo;
};

typedef fireInfo_s fireInfo_t;

enum {
	FIREMODE_NORMAL = 0,
	FIREMODE_ALT = 1,
	FIREMODE_NUM = 2
};

enum {
	RELOAD_AUTOMATIC = 0,
	RELOAD_MANUAL = 1
};

enum {
	REPEATMODE_SINGLE = 0,
	REPEATMODE_REPEAT = 1
};

struct gunPropInfo_s { // 0x24
	/* 0x00 */ int playerPropNum;
	/* 0x04 */ int chrPropNum;
	/* 0x08 */ int pickupPropNum;
	/* 0x0c */ int ammoPropNum;
	/* 0x10 */ int promoPropNum;
	/* 0x14 */ float pickupScale;
	/* 0x18 */ float promoScale;
	/* 0x1c */ float promoRotY;
	/* 0x20 */ float promoRotX;
};

typedef gunPropInfo_s gunPropInfo_t;

struct gunDofs_s { // 0x28
	/* 0x00 */ int shootDof[2];
	/* 0x08 */ int muzzleDof[2];
	/* 0x10 */ int leftWristDof;
	/* 0x14 */ int rightWristDof;
	/* 0x18 */ int cartridgeDof;
	/* 0x1c */ int trajectoryDof;
	/* 0x20 */ int barrelDof;
	/* 0x24 */ int hammerDof;
};

typedef gunDofs_s gunDofs_t;

struct gunParts_s { // 0x18
	/* 0x00 */ int muzzlePartNum[2];
	/* 0x08 */ int slider1PartNum;
	/* 0x0c */ int slider2PartNum;
	/* 0x10 */ int barrelPartNum;
	/* 0x14 */ int hammerPartNum;
};

typedef gunParts_s gunParts_t;

struct gunInfo_s { // 0x23c
	/* 0x000 */ gunPropInfo_t propInfo;
	/* 0x024 */ int gunFlags;
	/* 0x028 */ int animationFlags;
	/* 0x02c */ int ammoType;
	/* 0x030 */ int clipCount;
	/* 0x034 */ int defaultAmmo;
	/* 0x038 */ int ammoTypeSecondary;
	/* 0x03c */ int clipCountSecondary;
	/* 0x040 */ int reloadDelay;
	/* 0x044 */ int pickupSoundNum;
	/* 0x048 */ float autoAimFovDot;
	/* 0x04c */ float offset[3];
	/* 0x058 */ float rot[3];
	/* 0x064 */ int hudType;
	/* 0x068 */ float zoomfovy;
	/* 0x06c */ float minzoomfovy;
	/* 0x070 */ float maxzoomfovy;
	/* 0x074 */ fireInfo_t fireInfo[2];
	/* 0x1bc */ gunDofs_t playerGunDofs;
	/* 0x1e4 */ gunDofs_t chrGunDofs;
	/* 0x20c */ gunParts_t playerGunParts;
	/* 0x224 */ gunParts_t chrGunParts;
};

typedef gunInfo_s gunInfo_t;

enum {
	GUNTYPE_NONE = -1,
	GUNTYPE_SILENCED_PISTOL = 0,
	GUNTYPE_FLARE_PISTOL = 1,
	GUNTYPE_MAGNUM = 2,
	GUNTYPE_ASSAULT_RIFLE = 3,
	GUNTYPE_ASSAULT_SHOTGUN = 4,
	GUNTYPE_SNIPER_RIFLE = 5,
	GUNTYPE_FLAMETHROWER = 6,
	GUNTYPE_FIRE_EXTINGUISHER = 7,
	GUNTYPE_AK47 = 8,
	GUNTYPE_ELECTROGUN = 9,
	GUNTYPE_SCIFI_HANDGUN = 10,
	GUNTYPE_ROCKET_LAUNCHER = 11,
	GUNTYPE_HOMING_ROCKET_LAUNCHER = 12,
	GUNTYPE_LASERGUN = 13,
	GUNTYPE_PLASMA_MACHINEGUN = 14,
	GUNTYPE_DISCTHROWER = 15,
	GUNTYPE_GRENADE_LAUNCHER = 16,
	GUNTYPE_GRENADE_THROW = 17,
	GUNTYPE_PROXIMITY_MINE = 18,
	GUNTYPE_REMOTE_MINE = 19,
	GUNTYPE_TIMED_MINE = 20,
	GUNTYPE_TNT = 21,
	GUNTYPE_TOMMY_GUN = 22,
	GUNTYPE_UZI = 23,
	GUNTYPE_BLUNDERBUSS = 24,
	GUNTYPE_GATLINGGUN = 25,
	GUNTYPE_DOUBLE_BARREL_SHOTGUN = 26,
	GUNTYPE_BRICK = 27,
	GUNTYPE_TIMESPLITTER = 28,
	GUNTYPE_FIXED = 29,
	GUNTYPE_BARRELROBOT = 30,
	GUNTYPE_APACHE = 31,
	GUNTYPE_TEST = 32,
	GUNTYPE_MAX = 33
};

struct guncombo_s { // 0x10
	/* 0x0 */ int priority;
	/* 0x4 */ int gunType[2];
	/* 0xc */ int name;
};

typedef guncombo_s guncombo;

enum {
	GUNCOMBO_NONE = 0,
	GUNCOMBO_SILENCED_PISTOL = 1,
	GUNCOMBO_SILENCED_PISTOL_X2 = 2,
	GUNCOMBO_FLARE_PISTOL = 3,
	GUNCOMBO_FLARE_PISTOL_X2 = 4,
	GUNCOMBO_MAGNUM = 5,
	GUNCOMBO_MAGNUM_X2 = 6,
	GUNCOMBO_ASSAULT_RIFLE = 7,
	GUNCOMBO_ASSAULT_SHOTGUN = 8,
	GUNCOMBO_SNIPER_RIFLE = 9,
	GUNCOMBO_FLAMETHROWER = 10,
	GUNCOMBO_FIRE_EXTINGUISHER = 11,
	GUNCOMBO_AK47 = 12,
	GUNCOMBO_AK47_X2 = 13,
	GUNCOMBO_ELECTROGUN = 14,
	GUNCOMBO_SCIFI_HANDGUN = 15,
	GUNCOMBO_ROCKET_LAUNCHER = 16,
	GUNCOMBO_HOMING_ROCKET_LAUNCHER = 17,
	GUNCOMBO_LASERGUN = 18,
	GUNCOMBO_PLASMA_MACHINEGUN = 19,
	GUNCOMBO_PLASMA_MACHINEGUN_X2 = 20,
	GUNCOMBO_DISCTHROWER = 21,
	GUNCOMBO_DISCTHROWER_X2 = 22,
	GUNCOMBO_GRENADE_LAUNCHER = 23,
	GUNCOMBO_PROXIMITY_MINE = 24,
	GUNCOMBO_REMOTE_MINE = 25,
	GUNCOMBO_TIMED_MINE = 26,
	GUNCOMBO_TNT = 27,
	GUNCOMBO_TOMMY_GUN = 28,
	GUNCOMBO_TOMMY_GUN_X2 = 29,
	GUNCOMBO_UZI = 30,
	GUNCOMBO_UZI_X2 = 31,
	GUNCOMBO_BLUNDERBUSS = 32,
	GUNCOMBO_GATLINGGUN = 33,
	GUNCOMBO_GATLINGGUN_X2 = 34,
	GUNCOMBO_DOUBLE_BARREL_SHOTGUN = 35,
	GUNCOMBO_DOUBLE_BARREL_SHOTGUN_X2 = 36,
	GUNCOMBO_BRICK = 37,
	GUNCOMBO_TEST = 38,
	GUNCOMBO_TEST_X2 = 39,
	GUNCOMBO_MAX = 40
};

enum {
	GUNSTATE_NOGUN = 0,
	GUNSTATE_NORMAL = 1,
	GUNSTATE_CHANGELOWER = 2,
	GUNSTATE_CHANGEDELETE = 3,
	GUNSTATE_CHANGECREATE = 4,
	GUNSTATE_CHANGEWAIT = 5,
	GUNSTATE_CHANGERAISE = 6,
	GUNSTATE_RELOADLOWER = 7,
	GUNSTATE_RELOADRAISE = 8,
	GUNSTATE_SHOTGUNRELOADOPEN = 9,
	GUNSTATE_SHOTGUNRELOADRELEASE = 10,
	GUNSTATE_SHOTGUNRELOADDOWN = 11,
	GUNSTATE_SHOTGUNRELOADUP = 12,
	GUNSTATE_SHOTGUNRELOADCLOSE = 13,
	GUNSTATE_SHOTGUNRELOADWAIT = 14,
	GUNSTATE_TNTTURNDOWN = 15,
	GUNSTATE_TNTTURNUP = 16,
	GUNSTATE_TNTBURN = 17,
	GUNSTATE_TNTWAIT = 18,
	GUNSTATE_TNTRAISE = 19,
	GUNSTATE_REMOTEMINE_WAIT = 20,
	GUNSTATE_MAX = 21
};

struct chrgun_s { // 0x90
	/* 0x00 */ float tpShootPos[4];
	/* 0x10 */ float tpCartridgePos[4];
	/* 0x20 */ float tpTrajectoryPos[4];
	/* 0x30 */ int gunType;
	/* 0x34 */ int ammo[17];
	/* 0x78 */ prop_s *chrgunprop;
	/* 0x7c */ int lastShotFramesPassed;
	/* 0x80 */ int fireState;
	/* 0x84 */ float repeatSoundTime;
	/* 0x88 */ int repeatSoundVoice;
};

typedef chrgun_s chrgun;

struct playergun_s { // 0xd0
	/* 0x00 */ float fpShootPos[4];
	/* 0x10 */ float fpCartridgePos[4];
	/* 0x20 */ float fpTrajectoryPos[4];
	/* 0x30 */ int state;
	/* 0x34 */ float stateTime;
	/* 0x38 */ int nextGunType;
	/* 0x3c */ prop_s *playergunprop;
	/* 0x40 */ int fireMode;
	/* 0x44 */ int repeat;
	/* 0x48 */ float recoilRotationX;
	/* 0x4c */ float extraRotationZ;
	/* 0x50 */ float recoilVelocity[3];
	/* 0x5c */ float sliderRecoilVelocityZ;
	/* 0x60 */ float barrelRotation;
	/* 0x64 */ float barrelVelocity;
	/* 0x68 */ float noiseOffset[3];
	/* 0x74 */ float noiseVelocity[3];
	/* 0x80 */ float noiseScalar;
	/* 0x84 */ float sineScalar;
	/* 0x88 */ int animationStage;
	/* 0x8c */ float hammerRotation;
	/* 0x90 */ float cockRotation;
	/* 0x94 */ prop_s *shotgunCartridge[2];
	/* 0x9c */ int framesPassedSinceFired;
	/* 0xa0 */ int gunShot;
	/* 0xa4 */ int singleReloadNeeded;
	/* 0xa8 */ int assaultShotgunFlag;
	/* 0xac */ prop_s *playerprop;
	/* 0xb0 */ chrgun *cgun;
	/* 0xb4 */ int ownerType;
	/* 0xb8 */ int ownerNum;
	/* 0xbc */ int visibleAmmoFired;
	/* 0xc0 */ float dualShockPower;
};

typedef playergun_s playergun;

struct gunChrFireChoiceTable_s { // 0x30
	/* 0x00 */ int singleHand[2];
	/* 0x08 */ int repeatHand[2];
	/* 0x10 */ boolean singleShotAble[2];
	/* 0x18 */ boolean repeatShotAble[2];
	/* 0x20 */ boolean reloadPossible;
	/* 0x24 */ boolean reloadNecessary[2];
	/* 0x2c */ boolean changeNecessary;
};

typedef gunChrFireChoiceTable_s gunChrFireChoiceTable;

enum {
	PROP_TYPE_OB = 1,
	PROP_TYPE_ROOM = 2,
	PROP_TYPE_DOOR = 4,
	PROP_TYPE_CHR = 8,
	PROP_TYPE_GUN = 16,
	PROP_TYPE_CHRGUN = 32,
	PROP_TYPE_PICKUP = 64,
	PROP_TYPE_SPECIAL = 128,
	PROP_TYPE_CAR = 256,
	PROP_TYPE_REMOTE = 512,
	PROP_TYPE_WATER = 1024,
	PROP_TYPE_LIMB = 2048,
	PROP_TYPE_CORPSE = 4096,
	PROP_TYPE_BASE = 8192,
	PROP_TYPE_LIFT = 16384,
	PROP_TYPE_LIFTOB = 32768,
	PROP_TYPE_NOHITS = 65536,
	PROP_TYPE_LVBUTTON = 131072,
	PROP_TYPE_POPUPBOT = 262144
};

enum {
	PICKUP_TYPE_BAG = 1,
	PICKUP_TYPE_GUN = 2,
	PICKUP_TYPE_KEY = 4,
	PICKUP_TYPE_HEALTH = 8,
	PICKUP_TYPE_ARMOUR = 16,
	PICKUP_TYPE_DROP = 32,
	PICKUP_TYPE_AMMO = 64,
	PICKUP_TYPE_POWERUP = 128,
	PICKUP_TYPE_TELEPORT = 256,
	PICKUP_TYPE_ITEM = 512
};

enum {
	ITEM_COMPUTERDISK = 0,
	ITEM_NUM = 1
};

enum {
	PROP_NULL = -1,
	PROP_CHR01 = 0,
	PROP_CHR02 = 1,
	PROP_CHR03 = 2,
	PROP_CHR04 = 3,
	PROP_CHR05 = 4,
	PROP_CHR06 = 5,
	PROP_CHR07 = 6,
	PROP_CHR08 = 7,
	PROP_CHR09 = 8,
	PROP_CHR10 = 9,
	PROP_CHR11 = 10,
	PROP_CHR12 = 11,
	PROP_CHR13 = 12,
	PROP_CHR14 = 13,
	PROP_CHR15 = 14,
	PROP_CHR16 = 15,
	PROP_CHR17 = 16,
	PROP_CHR18 = 17,
	PROP_CHR19 = 18,
	PROP_CHR20 = 19,
	PROP_CHR21 = 20,
	PROP_CHR22 = 21,
	PROP_CHR23 = 22,
	PROP_CHR24 = 23,
	PROP_CHR25 = 24,
	PROP_CHR26 = 25,
	PROP_CHR27 = 26,
	PROP_CHR28 = 27,
	PROP_CHR29 = 28,
	PROP_CHR30 = 29,
	PROP_CHR31 = 30,
	PROP_CHR32 = 31,
	PROP_CHR33 = 32,
	PROP_CHR34 = 33,
	PROP_CHR35 = 34,
	PROP_CHR36 = 35,
	PROP_CHR37 = 36,
	PROP_CHR38 = 37,
	PROP_CHR39 = 38,
	PROP_CHR40 = 39,
	PROP_CHR41 = 40,
	PROP_CHR42 = 41,
	PROP_CHR43 = 42,
	PROP_CHR44 = 43,
	PROP_CHR45 = 44,
	PROP_CHR46 = 45,
	PROP_CHR47 = 46,
	PROP_CHR48 = 47,
	PROP_CHR49 = 48,
	PROP_CHR50 = 49,
	PROP_RAILSPIDER = 50,
	PROP_RAILBOT = 51,
	PROP_CHR23_H = 52,
	PROP_CHR23_LA = 53,
	PROP_CHR23_RA = 54,
	PROP_CHR23_LL = 55,
	PROP_CHR23_RL = 56,
	PROP_CHR28_H = 57,
	PROP_CHR28_LA = 58,
	PROP_CHR28_RA = 59,
	PROP_CHR34_H = 60,
	PROP_CHR34_LA = 61,
	PROP_CHR34_RA = 62,
	PROP_CHR35_H = 63,
	PROP_CHR40_H = 64,
	PROP_CHR40_LA = 65,
	PROP_CHR40_RA = 66,
	PROP_CHR45_H = 67,
	PROP_CHR45_LA = 68,
	PROP_CHR45_RA = 69,
	PROP_CHR46_H = 70,
	PROP_CHR46_LA = 71,
	PROP_CHR46_RA = 72,
	PROP_CHR23_HAT = 73,
	PROP_DOOR1 = 74,
	PROP_DOOR2 = 75,
	PROP_DOOR3 = 76,
	PROP_DOOR4 = 77,
	PROP_DOOR5 = 78,
	PROP_DOOR6 = 79,
	PROP_DOOR7 = 80,
	PROP_DOOR8 = 81,
	PROP_DOOR9 = 82,
	PROP_DOOR10 = 83,
	PROP_DOOR_SCIFI_1 = 84,
	PROP_MANSIONDOOR1 = 85,
	PROP_MANSIONDOOR2 = 86,
	PROP_MANSIONDOOR3 = 87,
	PROP_MANSIONDOOR4 = 88,
	PROP_MANSIONDOOR5 = 89,
	PROP_MANSIONDOOR6 = 90,
	PROP_MANSIONDOOR7 = 91,
	PROP_MANSIONDOOR8 = 92,
	PROP_MANSIONDOOR9 = 93,
	PROP_MANSIONDOOR10 = 94,
	PROP_MANSIONDOOR11 = 95,
	PROP_MANSIONDOOR12 = 96,
	PROP_MANSIONDOOR13 = 97,
	PROP_VILLAGEDOOR1 = 98,
	PROP_ATOMSMASHERDOOR1 = 99,
	PROP_DAMDOOR01 = 100,
	PROP_DAMDOOR01R = 101,
	PROP_DAMDOOR02 = 102,
	PROP_DAMDOOR02R = 103,
	PROP_DAMDOOR03 = 104,
	PROP_DAMDOOR04 = 105,
	PROP_DAMDOOR05 = 106,
	PROP_DAMDOOR05R = 107,
	PROP_DAMDOOR06 = 108,
	PROP_DAMDOOR07 = 109,
	PROP_DAMDOOR09 = 110,
	PROP_DAMDOOR10 = 111,
	PROP_DAMAPACHE = 112,
	PROP_DAMDOOR02A = 113,
	PROP_DAMDOOR11 = 114,
	PROP_DAMDOOR12 = 115,
	PROP_DAMDOOR13 = 116,
	PROP_DAMSECDOOR1 = 117,
	PROP_RFDOOR01 = 118,
	PROP_RFDOOR02 = 119,
	PROP_DAMRADAR = 120,
	PROP_DAMRADARDISH = 121,
	PROP_DAMRADARSWITCH = 122,
	PROP_DAMELECTRICALSWITCH = 123,
	PROP_DAMTURBINE = 124,
	PROP_DAMCAGE = 125,
	PROP_DAMCAVE = 126,
	PROP_DAMUNDERGROUNDSWITCH = 127,
	PROP_DAMKEYPAD = 128,
	PROP_DAMSECBUTTON1 = 129,
	PROP_DAMSECBUTTON2 = 130,
	PROP_DAMSECBUTTON3 = 131,
	PROP_DAMLASERDOOR = 132,
	PROP_DAMBED = 133,
	PROP_DAMCARDBOARDBOX1 = 134,
	PROP_DAMCARDBOARDBOX2 = 135,
	PROP_DAMCOMPUTERDESK = 136,
	PROP_DAMCONTROLPANEL = 137,
	PROP_DAMDUMPSTER = 138,
	PROP_DAMFILECABINET = 139,
	PROP_DAMMETALSHELVES = 140,
	PROP_DAMSHOWERBENCH = 141,
	PROP_DAMTABLE = 142,
	PROP_DAMWHISKYGLASS = 143,
	PROP_DAMWOODCRATEBIG = 144,
	PROP_DAMWOODCRATESMALL = 145,
	PROP_DAMDRUM = 146,
	PROP_DAMMETALCRATE = 147,
	PROP_DAMOPTABLE = 148,
	PROP_DAMREDLIGHT = 149,
	PROP_DAMFUSEBOX = 150,
	PROP_DAMWALLMONITOR1 = 151,
	PROP_DAMWALLMONITOR2 = 152,
	PROP_DAMVENT = 153,
	PROP_DAMPIPEWHEEL = 154,
	PROP_DAMPIPEDIAL = 155,
	PROP_CS_LENSEFLARE1 = 156,
	PROP_CS_LENSEFLARE2 = 157,
	PROP_CS_LENSEFLARE3 = 158,
	PROP_CS_LENSEFLARE4 = 159,
	PROP_CS_LENSEFLARE5 = 160,
	PROP_CS_LENSEFLARE6 = 161,
	PROP_CS_LENSEFLARE7 = 162,
	PROP_CS_LENSEFLARE8 = 163,
	PROP_TORCHBEAM = 164,
	PROP_RFPOPUPLAUNCHER = 165,
	PROP_RFBRIDGEDYNAMO = 166,
	PROP_RFBRIDGESWITCH = 167,
	PROP_RFPOWERTOWER = 168,
	PROP_RFCRATE = 169,
	PROP_RFCAMERA = 170,
	PROP_RFFLOORGUN = 171,
	PROP_RFROBOTTOOL = 172,
	PROP_RFCONTROLPANEL = 173,
	PROP_CRATE1 = 174,
	PROP_CRATE2 = 175,
	PROP_CHAIR1 = 176,
	PROP_DRUM1 = 177,
	PROP_DRUM2 = 178,
	PROP_TOMBBOX = 179,
	PROP_CASK1 = 180,
	PROP_PLANT1 = 181,
	PROP_FRUIT1 = 182,
	PROP_POPUPBOT = 183,
	PROP_BOMBBOT = 184,
	PROP_CRYSTAL = 185,
	PROP_TOXICBARREL = 186,
	PROP_SKY1 = 187,
	PROP_SKY2 = 188,
	PROP_SKY3 = 189,
	PROP_SKY4 = 190,
	PROP_SKY5 = 191,
	PROP_SKY6 = 192,
	PROP_SKY7 = 193,
	PROP_SKY8 = 194,
	PROP_SKY9 = 195,
	PROP_SKY10 = 196,
	PROP_SKY11 = 197,
	PROP_SKY12 = 198,
	PROP_SKY13 = 199,
	PROP_SKY14 = 200,
	PROP_SKY_PINKDAWN = 201,
	PROP_SKY_GREENDUSK = 202,
	PROP_SKY_COLDNIGHT = 203,
	PROP_SKY_CLEARDAY = 204,
	PROP_SKY_MARS = 205,
	PROP_SKY_PURPLEHAZE = 206,
	PROP_SKY_RAINBOW = 207,
	PROP_SKY_FLAREDAWN = 208,
	PROP_SKY_ORANGE = 209,
	PROP_SKY_BRIGHTDAWN = 210,
	PROP_SKY_CRISPDAWN = 211,
	PROP_SKY_SETTINGSUN = 212,
	PROP_SKY_YELLOWAFTERNOON = 213,
	PROP_SKY_SPACE = 214,
	PROP_SKY_PLANET2 = 215,
	PROP_SKY_MEX = 216,
	PROP_SKY_GANGSTER = 217,
	PROP_SKY_SCRAPYARD = 218,
	PROP_CARTRIDGE1 = 219,
	PROP_CARTRIDGE2 = 220,
	PROP_CARTRIDGE3 = 221,
	PROP_CARTRIDGE4 = 222,
	PROP_CARTRIDGE5 = 223,
	PROP_ROCKET1 = 224,
	PROP_MISSILE = 225,
	PROP_GRENADE1 = 226,
	PROP_GRENADE2 = 227,
	PROP_PROXIMITYMINE = 228,
	PROP_PROXIMITYMINEBASE = 229,
	PROP_PROXIMITYMINEMINE = 230,
	PROP_PROXIMITYMINECLIP = 231,
	PROP_REMOTEMINE = 232,
	PROP_TIMEDMINE = 233,
	PROP_TNT = 234,
	PROP_BRICK = 235,
	PROP_SCANNER = 236,
	PROP_CLOCK = 237,
	PROP_PUBSIGN = 238,
	PROP_BOATSIGN = 239,
	PROP_GONG = 240,
	PROP_FAN = 241,
	PROP_FANSHADOW = 242,
	PROP_FANSCIFI = 243,
	PROP_BANNER = 244,
	PROP_STREAMERS = 245,
	PROP_LANTERN = 246,
	PROP_BLOODYCHAIR = 247,
	PROP_ELECTRICITY = 248,
	PROP_LAB_OUTERWHEELS = 249,
	PROP_LAB_INNERWHEELSA = 250,
	PROP_LAB_INNERWHEELSB = 251,
	PROP_LAB_INNERWHEELSC = 252,
	PROP_LAB_INNERWHEELSD = 253,
	PROP_LAB_POLE = 254,
	PROP_SPACESHIP1 = 255,
	PROP_SPACESHIP2 = 256,
	PROP_SPACESHIP3 = 257,
	PROP_GREENTHING = 258,
	PROP_BIGSHIP = 259,
	PROP_CHANDELIER = 260,
	PROP_MALLCLOCK = 261,
	PROP_GRAVEYARDMOON = 262,
	PROP_CHINESEFAN = 263,
	PROP_HOLOGRAM = 264,
	PROP_LASER = 265,
	PROP_WATERFALL = 266,
	PROP_WATERFALL2 = 267,
	PROP_SPACESTATIONLIFT = 268,
	PROP_PLANETDOOR = 269,
	PROP_SPACEWAYSDOOR = 270,
	PROP_DOCKSDOOR = 271,
	PROP_TOMBXTRADOOR = 272,
	PROP_PLANETMOON = 273,
	PROP_TOMBSUN = 274,
	PROP_TOMBFLARE = 275,
	PROP_DAMLIFT = 276,
	PROP_DAMLIFT_BUTTONUP = 277,
	PROP_DAMLIFT_BUTTONDOWN = 278,
	PROP_DAMLIFT_DOORLEFT = 279,
	PROP_DAMLIFT_DOORRIGHT = 280,
	PROP_CONTROL = 281,
	PROP_CRATE3 = 282,
	PROP_MALLFAN1 = 283,
	PROP_MALLFAN2 = 284,
	PROP_CRATE4 = 285,
	PROP_CRATE5 = 286,
	PROP_CRATE6 = 287,
	PROP_WOODGIB1 = 288,
	PROP_WOODGIB2 = 289,
	PROP_METALGIB1 = 290,
	PROP_METALGIB2 = 291,
	PROP_GLASSGIB1 = 292,
	PROP_GLASSGIB2 = 293,
	PROP_CARDGIB1 = 294,
	PROP_CARDGIB2 = 295,
	PROP_LEAFGIB1 = 296,
	PROP_LEAFGIB2 = 297,
	PROP_STONEGIB1 = 298,
	PROP_STONEGIB2 = 299,
	PROP_FRUITGIB = 300,
	PROP_NEOTOKYOSIGN1 = 301,
	PROP_NEOTOKYOSIGN2 = 302,
	PROP_NEOTOKYOSIGN3 = 303,
	PROP_NEOTOKYOTRAFFICLIGHTS = 304,
	PROP_NEOTOKYOTRAFFICLIGHTS2 = 305,
	PROP_GANGSTERTSHIRT1 = 306,
	PROP_GANGSTERTSHIRT2 = 307,
	PROP_GANGSTERSKIRT1 = 308,
	PROP_GANGSTERSKIRT2 = 309,
	PROP_GANGSTERSKIRT3 = 310,
	PROP_GANGSTERPAPER1 = 311,
	PROP_PLANETSPAWN = 312,
	PROP_PLANETSPAWN2 = 313,
	PROP_ROTATESPAWNR = 314,
	PROP_ROTATESPAWNY = 315,
	PROP_ROTATESPAWNB = 316,
	PROP_ROTATESPAWNG = 317,
	PROP_BLASTSPAWNR = 318,
	PROP_BLASTSPAWNY = 319,
	PROP_BLASTSPAWNB = 320,
	PROP_BLASTSPAWNG = 321,
	PROP_RINGSPAWNR = 322,
	PROP_RINGSPAWNY = 323,
	PROP_RINGSPAWNB = 324,
	PROP_RINGSPAWNG = 325,
	PROP_JEEP1 = 326,
	PROP_LORRY = 327,
	PROP_TAXI = 328,
	PROP_COPTER = 329,
	PROP_PLANE = 330,
	PROP_GANGSTERCAR = 331,
	PROP_CRANE = 332,
	PROP_GANGSTERTRAIN = 333,
	PROP_GANGSTERTRAINCHEAP = 334,
	PROP_AIRSHIP = 335,
	PROP_NEOTOKYOTRAIN = 336,
	PROP_BOAT = 337,
	PROP_WATER1 = 338,
	PROP_WATER2 = 339,
	PROP_WATER3 = 340,
	PROP_DOCKS_MOON = 341,
	PROP_REFLECTIONS = 342,
	PROP_PKUP_BAG1 = 343,
	PROP_PKUP_BAG2 = 344,
	PROP_PKUP_BAG3 = 345,
	PROP_PKUP_BAG4 = 346,
	PROP_PKUP_BAG5 = 347,
	PROP_PKUP_BAG6 = 348,
	PROP_PKUP_BAG7 = 349,
	PROP_PKUP_BAG8 = 350,
	PROP_PKUP_BAG9 = 351,
	PROP_PKUP_BAG10 = 352,
	PROP_PKUP_FILES = 353,
	PROP_PKUP_PLANS = 354,
	PROP_PKUP_ARTEFACT = 355,
	PROP_PKUP_JEWELS = 356,
	PROP_PKUP_BRAIN = 357,
	PROP_PKUP_REMAINS = 358,
	PROP_PKUP_RANSOM = 359,
	PROP_PKUP_DUTYFREE = 360,
	PROP_PKUP_DROP1 = 361,
	PROP_PKUP_DROP2 = 362,
	PROP_PKUP_DROP3 = 363,
	PROP_PKUP_DROP4 = 364,
	PROP_PKUP_KEYCARD1 = 365,
	PROP_PKUP_KEYCARD2 = 366,
	PROP_PKUP_KEYCARD3 = 367,
	PROP_PKUP_KEYCARD4 = 368,
	PROP_PKUP_POWERUP = 369,
	PROP_PKUP_AMMOSMALL = 370,
	PROP_PKUP_AMMOBIG = 371,
	PROP_PKUP_AMMOSHELL = 372,
	PROP_PKUP_AMMOPLASMA = 373,
	PROP_PKUP_AMMOROCKET = 374,
	PROP_PKUP_AMMOGRENADE = 375,
	PROP_PKUP_AMMOBRICK = 376,
	PROP_PKUP_AMMOREMOTE = 377,
	PROP_PKUP_AMMOTIMED = 378,
	PROP_PKUP_AMMOPROXIMITY = 379,
	PROP_PKUP_AMMOTNT = 380,
	PROP_PKUP_HEALTH1 = 381,
	PROP_PKUP_HORROR_ARMOUR1 = 382,
	PROP_PKUP_HORROR_ARMOUR2 = 383,
	PROP_PKUP_PERIOD_ARMOUR1 = 384,
	PROP_PKUP_PERIOD_ARMOUR2 = 385,
	PROP_PKUP_SCIFI_ARMOUR1 = 386,
	PROP_PKUP_SCIFI_ARMOUR2 = 387,
	PROP_PKUP_DAMDISK = 388,
	PROP_CHRGUN1 = 389,
	PROP_CHRGUN2 = 390,
	PROP_CHRGUN3 = 391,
	PROP_CHRGUN4 = 392,
	PROP_CHRGUN5 = 393,
	PROP_CHRGUN6 = 394,
	PROP_CHRGUN7 = 395,
	PROP_CHRGUN8 = 396,
	PROP_CHRGUN9 = 397,
	PROP_CHRGUN10 = 398,
	PROP_CHRGUN11 = 399,
	PROP_CHRGUN12 = 400,
	PROP_CHRGUN13 = 401,
	PROP_CHRGUN14 = 402,
	PROP_CHRGUN15 = 403,
	PROP_CHRGUN16 = 404,
	PROP_CHRGUN17 = 405,
	PROP_CHRGUN18 = 406,
	PROP_CHRGUN19 = 407,
	PROP_CHRGUN20 = 408,
	PROP_CHRGUN21 = 409,
	PROP_CHRGUN22 = 410,
	PROP_CHRGUN23 = 411,
	PROP_CHRGUN24 = 412,
	PROP_CHRGUN25 = 413,
	PROP_CHRGUN26 = 414,
	PROP_CHRGUN27 = 415,
	PROP_CHRGUN28 = 416,
	PROP_CHRGUN29 = 417,
	PROP_CHRGUN30 = 418,
	PROP_GUN1 = 419,
	PROP_GUN2 = 420,
	PROP_GUN3 = 421,
	PROP_GUN4 = 422,
	PROP_GUN5 = 423,
	PROP_GUN6 = 424,
	PROP_GUN7 = 425,
	PROP_GUN8 = 426,
	PROP_GUN9 = 427,
	PROP_GUN10 = 428,
	PROP_GUN11 = 429,
	PROP_GUN12 = 430,
	PROP_GUN13 = 431,
	PROP_GUN14 = 432,
	PROP_GUN15 = 433,
	PROP_GUN16 = 434,
	PROP_GUN17 = 435,
	PROP_GUN18 = 436,
	PROP_GUN19 = 437,
	PROP_GUN20 = 438,
	PROP_GUN21 = 439,
	PROP_GUN22 = 440,
	PROP_GUN23 = 441,
	PROP_GUN24 = 442,
	PROP_GUN25 = 443,
	PROP_GUN26 = 444,
	PROP_GUN27 = 445,
	PROP_GUN28 = 446,
	PROP_GUNDEFAULT_PH = 447,
	PROP_GUNDEFAULT_CL = 448,
	PROP_GUNDEFAULT_PROMO = 449,
	PROP_ASSAULTRIFLE_PH = 450,
	PROP_ASSAULTRIFLE_CL = 451,
	PROP_ASSAULTRIFLE_PROMO = 452,
	PROP_ASSAULTSHOTGUN_PH = 453,
	PROP_ASSAULTSHOTGUN_CL = 454,
	PROP_ASSAULTSHOTGUN_PROMO = 455,
	PROP_SILENCEDPISTOL_PH = 456,
	PROP_SILENCEDPISTOL_CL = 457,
	PROP_SILENCEDPISTOL_PROMO = 458,
	PROP_ELECTROGUN_PH = 459,
	PROP_ELECTROGUN_CL = 460,
	PROP_ELECTROGUN_PROMO = 461,
	PROP_FLAMETHROWER_PH = 462,
	PROP_FLAMETHROWER_CL = 463,
	PROP_FLAMETHROWER_PROMO = 464,
	PROP_SNIPERRIFLE_PH = 465,
	PROP_SNIPERRIFLE_CL = 466,
	PROP_SNIPERRIFLE_PROMO = 467,
	PROP_AK47_PH = 468,
	PROP_AK47_CL = 469,
	PROP_AK47_PROMO = 470,
	PROP_FIRE_EXTINGUISHER_PH = 471,
	PROP_FIRE_EXTINGUISHER_CL = 472,
	PROP_FIRE_EXTINGUISHER_PROMO = 473,
	PROP_FIRE_EXTINGUISHER_PICKUP = 474,
	PROP_LASERGUN_PH = 475,
	PROP_LASERGUN_CL = 476,
	PROP_LASERGUN_PROMO = 477,
	PROP_PLASMAMACHINEGUN_PH = 478,
	PROP_PLASMAMACHINEGUN_CL = 479,
	PROP_PLASMAMACHINEGUN_PROMO = 480,
	PROP_ROCKETLAUNCHER_PH = 481,
	PROP_ROCKETLAUNCHER_CL = 482,
	PROP_ROCKETLAUNCHER_PROMO = 483,
	PROP_HOMINGROCKETLAUNCHER_PH = 484,
	PROP_HOMINGROCKETLAUNCHER_CL = 485,
	PROP_HOMINGROCKETLAUNCHER_PROMO = 486,
	PROP_GRENADELAUNCHER_PH = 487,
	PROP_GRENADELAUNCHER_CL = 488,
	PROP_GRENADELAUNCHER_PROMO = 489,
	PROP_REMOTEMINE_PH = 490,
	PROP_REMOTEMINE_CL = 491,
	PROP_REMOTEMINE_PROMO = 492,
	PROP_TIMEDMINE_PH = 493,
	PROP_TIMEDMINE_CL = 494,
	PROP_TIMEDMINE_PROMO = 495,
	PROP_PROXIMITYMINE_PH = 496,
	PROP_PROXIMITYMINE_CL = 497,
	PROP_PROXIMITYMINE_PROMO = 498,
	PROP_TOMMYGUN_PH = 499,
	PROP_TOMMYGUN_CL = 500,
	PROP_TOMMYGUN_PROMO = 501,
	PROP_DOUBLEBARRELSHOTGUN_PH = 502,
	PROP_DOUBLEBARRELSHOTGUN_CL = 503,
	PROP_DOUBLEBARRELSHOTGUN_PROMO = 504,
	PROP_GATLINGGUN_PH = 505,
	PROP_GATLINGGUN_CL = 506,
	PROP_GATLINGGUN_PROMO = 507,
	PROP_MAGNUM_PH = 508,
	PROP_MAGNUM_CL = 509,
	PROP_MAGNUM_PROMO = 510,
	PROP_SCIFIHANDGUN_PH = 511,
	PROP_SCIFIHANDGUN_CL = 512,
	PROP_SCIFIHANDGUN_PROMO = 513,
	PROP_DISCTHROWER_PH = 514,
	PROP_DISCTHROWER_CL = 515,
	PROP_DISCTHROWER_PROMO = 516,
	PROP_UZI_PH = 517,
	PROP_UZI_CL = 518,
	PROP_UZI_PROMO = 519,
	PROP_FLAREPISTOL_PH = 520,
	PROP_FLAREPISTOL_CL = 521,
	PROP_FLAREPISTOL_PROMO = 522,
	PROP_AUTOGUN1 = 523,
	PROP_AUTOGUN1DAM = 524,
	PROP_AUTOGUN2 = 525,
	PROP_AUTODEER = 526,
	PROP_AUTODEERDAM = 527,
	PROP_FIXEDGUN = 528,
	PROP_CAMERA1 = 529,
	PROP_CCTV_CEILING1 = 530,
	PROP_CCTV_WALL1 = 531,
	PROP_REMOTEGUN_TEMP = 532,
	PROP_REMOTEGUN1 = 533,
	PROP_REMOTEGUN2 = 534,
	PROP_HAT_RED = 535,
	PROP_HAT_YELLOW = 536,
	PROP_HAT_BLUE = 537,
	PROP_HAT_GREEN = 538,
	PROP_HEAD_CHR01 = 539,
	PROP_HEAD_CHR02 = 540,
	PROP_HEAD_CHR03 = 541,
	PROP_HEAD_CHR04 = 542,
	PROP_HEAD_CHR05 = 543,
	PROP_HEAD_CHR06 = 544,
	PROP_HEAD_CHR07 = 545,
	PROP_HEAD_CHR08 = 546,
	PROP_HEAD_CHR09 = 547,
	PROP_HEAD_CHR10 = 548,
	PROP_HEAD_CHR11 = 549,
	PROP_HEAD_CHR12 = 550,
	PROP_HEAD_CHR13 = 551,
	PROP_HEAD_CHR14 = 552,
	PROP_HEAD_CHR15 = 553,
	PROP_HEAD_CHR16 = 554,
	PROP_FENCE1 = 555,
	PROP_FENCE2 = 556,
	PROP_DAMTREE = 557,
	PROP_FRONTSTAGE = 558,
	PROP_MM_ICON_O = 559,
	PROP_MM_ICON_X = 560,
	PROP_MM_ICON_GUN = 561,
	PROP_MM_ICON_AMMO = 562,
	PROP_MM_ICON_BAG = 563,
	PROP_MM_ICON_START = 564,
	PROP_MM_ICON_HEALTH = 565,
	PROP_MM_ICON_ARMOUR_LOW = 566,
	PROP_MM_ICON_ARMOUR_HIGH = 567,
	PROP_MM_ICON_DROP1 = 568,
	PROP_MM_ICON_DROP2 = 569,
	PROP_MM_ICON_DROP3 = 570,
	PROP_MM_ICON_DROP4 = 571,
	PROP_MM_ICON_KEY1 = 572,
	PROP_MM_ICON_KEY2 = 573,
	PROP_MM_ICON_KEY3 = 574,
	PROP_MM_ICON_KEY4 = 575,
	PROP_MM_ICON_POWERUP = 576,
	PROP_MM_ICON_AUTOGUN = 577,
	PROP_MM_ICON_FIXEDGUN = 578,
	PROP_MM_ICON_NPC = 579,
	PROP_TILE1 = 580,
	PROP_TILE2 = 581,
	PROP_TILE3 = 582,
	PROP_TILE4 = 583,
	PROP_TILE5 = 584,
	PROP_TILE6 = 585,
	PROP_TILE7 = 586,
	PROP_TILE8 = 587,
	PROP_TILE9 = 588,
	PROP_TILE10 = 589,
	PROP_TILE11 = 590,
	PROP_TILE12 = 591,
	PROP_TILE13 = 592,
	PROP_TILE14 = 593,
	PROP_TILE15 = 594,
	PROP_TILE16 = 595,
	PROP_TILE17 = 596,
	PROP_TILE18 = 597,
	PROP_TILE19 = 598,
	PROP_TILE20 = 599,
	PROP_TILE21 = 600,
	PROP_TILE22 = 601,
	PROP_TILE23 = 602,
	PROP_TILE24 = 603,
	PROP_TILE25 = 604,
	PROP_TILE26 = 605,
	PROP_TILE27 = 606,
	PROP_TILE28 = 607,
	PROP_TILE29 = 608,
	PROP_TILE30 = 609,
	PROP_TILESETDOOR1 = 610,
	PROP_TILESETWINDOW1 = 611,
	PROP_ROOM1 = 612,
	PROP_ROOM2 = 613,
	PROP_ROOM3 = 614,
	PROP_ROOM4 = 615,
	PROP_ROOM5 = 616,
	PROP_ROOM6 = 617,
	PROP_ROOM7 = 618,
	PROP_ROOM8 = 619,
	PROP_ROOM9 = 620,
	PROP_ROOM10 = 621,
	PROP_ROOM11 = 622,
	PROP_ROOM12 = 623,
	PROP_ROOM13 = 624,
	PROP_ROOM14 = 625,
	PROP_ROOM15 = 626,
	PROP_ROOM16 = 627,
	PROP_ROOM17 = 628,
	PROP_ROOM18 = 629,
	PROP_ROOM19 = 630,
	PROP_ROOM20 = 631,
	PROP_ROOM21 = 632,
	PROP_ROOM22 = 633,
	PROP_ROOM23 = 634,
	PROP_ROOM24 = 635,
	PROP_ROOM25 = 636,
	PROP_ROOM26 = 637,
	PROP_ROOM27 = 638,
	PROP_ROOM28 = 639,
	PROP_ROOM29 = 640,
	PROP_ROOM30 = 641,
	PROP_ROOM31 = 642,
	PROP_ROOM32 = 643,
	PROP_ROOM33 = 644,
	PROP_ROOM34 = 645,
	PROP_ROOM35 = 646,
	PROP_ROOM36 = 647,
	PROP_ROOM37 = 648,
	PROP_ROOM38 = 649,
	PROP_ROOM39 = 650,
	PROP_ROOM40 = 651,
	PROP_ROOM41 = 652,
	PROP_ROOM42 = 653,
	PROP_ROOM43 = 654,
	PROP_ROOM44 = 655,
	PROP_ROOM45 = 656,
	PROP_ROOM46 = 657,
	PROP_ROOM47 = 658,
	PROP_ROOM48 = 659,
	PROP_ROOM49 = 660,
	PROP_ROOM50 = 661,
	PROP_ROOM51 = 662,
	PROP_ROOM52 = 663,
	PROP_ROOM53 = 664,
	PROP_ROOM54 = 665,
	PROP_ROOM55 = 666,
	PROP_ROOM56 = 667,
	PROP_ROOM57 = 668,
	PROP_ROOM58 = 669,
	PROP_ROOM59 = 670,
	PROP_ROOM60 = 671,
	PROP_ROOM61 = 672,
	PROP_ROOM62 = 673,
	PROP_ROOM63 = 674,
	PROP_ROOM64 = 675,
	PROP_ROOM65 = 676,
	PROP_ROOM66 = 677,
	PROP_ROOM67 = 678,
	PROP_ROOM68 = 679,
	PROP_ROOM69 = 680,
	PROP_ROOM70 = 681,
	PROP_ROOM71 = 682,
	PROP_ROOM72 = 683,
	PROP_ROOM73 = 684,
	PROP_ROOM74 = 685,
	PROP_ROOM75 = 686,
	PROP_ROOM76 = 687,
	PROP_ROOM77 = 688,
	PROP_ROOM78 = 689,
	PROP_ROOM79 = 690,
	PROP_ROOM80 = 691,
	PROP_ROOM81 = 692,
	PROP_ROOM82 = 693,
	PROP_ROOM83 = 694,
	PROP_ROOM84 = 695,
	PROP_ROOM85 = 696,
	PROP_ROOM86 = 697,
	PROP_ROOM87 = 698,
	PROP_ROOM88 = 699,
	PROP_ROOM89 = 700,
	PROP_ROOM90 = 701,
	PROP_ROOM91 = 702,
	PROP_ROOM92 = 703,
	PROP_ROOM93 = 704,
	PROP_ROOM94 = 705,
	PROP_ROOM95 = 706,
	PROP_ROOM96 = 707,
	PROP_ROOM97 = 708,
	PROP_ROOM98 = 709,
	PROP_ROOM99 = 710,
	PROP_ROOM100 = 711,
	PROP_ROOM101 = 712,
	PROP_ROOM102 = 713,
	PROP_ROOM103 = 714,
	PROP_ROOM104 = 715,
	PROP_ROOM105 = 716,
	PROP_ROOM106 = 717,
	PROP_ROOM107 = 718,
	PROP_ROOM108 = 719,
	PROP_ROOM109 = 720,
	PROP_ROOM110 = 721,
	PROP_ROOM111 = 722,
	PROP_ROOM112 = 723,
	PROP_ROOM113 = 724,
	PROP_ROOM114 = 725,
	PROP_ROOM115 = 726,
	PROP_ROOM116 = 727,
	PROP_ROOM117 = 728,
	PROP_ROOM118 = 729,
	PROP_ROOM119 = 730,
	PROP_ROOM120 = 731,
	PROP_ROOM121 = 732,
	PROP_ROOM122 = 733,
	PROP_ROOM123 = 734,
	PROP_ROOM124 = 735,
	PROP_ROOM125 = 736,
	PROP_ROOM126 = 737,
	PROP_ROOM127 = 738,
	PROP_ROOM128 = 739,
	PROP_ROOM129 = 740,
	PROP_ROOM130 = 741,
	PROP_ROOM131 = 742,
	PROP_ROOM132 = 743,
	PROP_ROOM133 = 744,
	PROP_ROOM134 = 745,
	PROP_ROOM135 = 746,
	PROP_ROOM136 = 747,
	PROP_ROOM137 = 748,
	PROP_ROOM138 = 749,
	PROP_ROOM139 = 750,
	PROP_ROOM140 = 751,
	PROP_ROOM141 = 752,
	PROP_ROOM142 = 753,
	PROP_ROOM143 = 754,
	PROP_ROOM144 = 755,
	PROP_ROOM145 = 756,
	PROP_ROOM146 = 757,
	PROP_ROOM147 = 758,
	PROP_ROOM148 = 759,
	PROP_ROOM149 = 760,
	PROP_ROOM150 = 761,
	PROP_ROOM151 = 762,
	PROP_ROOM152 = 763,
	PROP_ROOM153 = 764,
	PROP_ROOM154 = 765,
	PROP_ROOM155 = 766,
	PROP_ROOM156 = 767,
	PROP_ROOM157 = 768,
	PROP_ROOM158 = 769,
	PROP_ROOM159 = 770,
	PROP_ROOM160 = 771,
	PROP_ROOM161 = 772,
	PROP_ROOM162 = 773,
	PROP_ROOM163 = 774,
	PROP_ROOM164 = 775,
	PROP_ROOM165 = 776,
	PROP_ROOM166 = 777,
	PROP_ROOM167 = 778,
	PROP_ROOM168 = 779,
	PROP_ROOM169 = 780,
	PROP_ROOM170 = 781,
	PROP_ROOM171 = 782,
	PROP_ROOM172 = 783,
	PROP_ROOM173 = 784,
	PROP_ROOM174 = 785,
	PROP_ROOM175 = 786,
	PROP_ROOM176 = 787,
	PROP_ROOM177 = 788,
	PROP_ROOM178 = 789,
	PROP_ROOM179 = 790,
	PROP_ROOM180 = 791,
	PROP_ROOM181 = 792,
	PROP_ROOM182 = 793,
	PROP_ROOM183 = 794,
	PROP_ROOM184 = 795,
	PROP_ROOM185 = 796,
	PROP_ROOM186 = 797,
	PROP_ROOM187 = 798,
	PROP_ROOM188 = 799,
	PROP_ROOM189 = 800,
	PROP_ROOM190 = 801,
	PROP_ROOM191 = 802,
	PROP_ROOM192 = 803,
	PROP_ROOM193 = 804,
	PROP_ROOM194 = 805,
	PROP_ROOM195 = 806,
	PROP_ROOM196 = 807,
	PROP_ROOM197 = 808,
	PROP_ROOM198 = 809,
	PROP_ROOM199 = 810,
	PROP_ROOM200 = 811,
	PROP_NUM = 812
};

enum {
	POSMODE_ORIGIN = 0,
	POSMODE_WORLD = 1,
	POSMODE_CAMERA = 2
};

enum {
	ROTMODE_NONE = 0,
	ROTMODE_Y = 1,
	ROTMODE_ZXY = 2,
	ROTMODE_ATTACH = 3,
	ROTMODE_MTXROLL = 4
};

struct propdef_s { // 0x20
	/* 0x00 */ int type;
	/* 0x04 */ obdef *ob;
	/* 0x08 */ u8 *propname;
	/* 0x0c */ u8 *filename;
	/* 0x10 */ int skeletontype;
	/* 0x14 */ skelmatrices *skelmtx;
	/* 0x18 */ int OffScreenTickTime;
	/* 0x1c */ int Flags;
};

typedef propdef_s propdef;

struct s_PropBoundingBox { // 0x1c
	/* 0x00 */ boolean calculated;
	/* 0x04 */ float CentrePos[3];
	/* 0x10 */ float Radius[3];
};

typedef s_PropBoundingBox PropBoundingBox;

struct PropBoundingInfo_s { // 0x24
	/* 0x00 */ PropBoundingBox overallBounds;
	/* 0x1c */ int numExtraBounds;
	/* 0x20 */ PropBoundingBox *extraBounds;
};

typedef PropBoundingInfo_s PropBoundingInfo;
typedef void (*handlerfunc)(/* parameters unknown */);

struct handler_s { // 0x4
	/* 0x0 */ handlerfunc function;
};

typedef handler_s handler;

enum {
	EVENT_PICKUP = 0,
	EVENT_DROP = 1,
	EVENT_ACTIVATE = 2,
	EVENT_DESTROY = 3,
	EVENT_ATTACH = 4,
	EVENT_TIMER = 5,
	EVENT_RESPAWN = 6,
	EVENT_TICKBEFORE = 7,
	EVENT_TICKAFTER = 8,
	EVENT_BURN = 9,
	EVENT_ROCK = 10,
	EVENT_NUM = 11
};

enum {
	PROPATTACHFLAG_RIGHTHAND = 1,
	PROPATTACHFLAG_LEFTHAND = 2
};

struct prop_s { // 0x280
	/* 0x000 */ int id;
	/* 0x004 */ int num;
	/* 0x008 */ int type;
	/* 0x00c */ int subtype;
	/* 0x010 */ int room;
	/* 0x014 */ int LastTickFrame;
	/* 0x018 */ u32 flags;
	/* 0x01c */ u32 lastflags;
	/* 0x020 */ u32 damageflags;
	/* 0x024 */ u32 frameflags;
	/* 0x028 */ u32 drawflags;
	/* 0x02c */ u32 framedrawflags;
	/* 0x030 */ obinst *inst;
	/* 0x034 */ obinst *swapinst;
	/* 0x038 */ float startpos[3];
	/* 0x044 */ float pos[3];
	/* 0x050 */ float vel[3];
	/* 0x05c */ float rotx;
	/* 0x060 */ float roty;
	/* 0x064 */ float newroty;
	/* 0x068 */ float rotz;
	/* 0x06c */ float rotaxial;
	/* 0x070 */ float rotinc;
	/* 0x074 */ float rotaxis[3];
	/* 0x080 */ float rotvel[3];
	/* 0x08c */ float lastpos[3];
	/* 0x098 */ float moveRate[3];
	/* 0x0a4 */ float lastrotx;
	/* 0x0a8 */ float lastroty;
	/* 0x0ac */ float lastrotz;
	/* 0x0b0 */ int posmode;
	/* 0x0b4 */ int rotmode;
	/* 0x0b8 */ int rooms[10];
	/* 0x0e0 */ int numrooms;
	/* 0x0e4 */ float scrmin[2];
	/* 0x0ec */ float scrmax[2];
	/* 0x0f4 */ obinst *attachobinst;
	/* 0x0f8 */ int attachmtxnum;
	/* 0x0fc */ int attachflag;
	/* 0x100 */ float hitreacttime;
	/* 0x110 */ mtx_u tmat1;
	/* 0x150 */ mtx_u tmat2;
	/* 0x190 */ int tmatindex1;
	/* 0x194 */ int tmatindex2;
	/* 0x198 */ void *data;
	/* 0x19c */ player_s *player;
	/* 0x1a0 */ handler handlers[11];
	/* 0x1cc */ void (*damageHandler)(/* parameters unknown */);
	/* 0x1d0 */ int usingdisappearancetimer;
	/* 0x1d4 */ int disappearancetimer;
	/* 0x1d8 */ float CentrePos[3];
	/* 0x1e4 */ float CentrePosAtStart[3];
	/* 0x1f0 */ float Radius[3];
	/* 0x1fc */ float health;
	/* 0x200 */ float maxHealth;
	/* 0x204 */ float damageLevel;
	/* 0x208 */ int numTransformedFloors;
	/* 0x20c */ int numTransformedWalls;
	/* 0x210 */ int numTransformedGlass;
	/* 0x214 */ int numTransformedSpecial;
	/* 0x218 */ floordef_s **transformedFloors;
	/* 0x21c */ walldef_s **transformedWalls;
	/* 0x220 */ glassdef **transformedGlass;
	/* 0x224 */ specialdef **transformedSpecial;
	/* 0x228 */ prop_s *otherprop;
	/* 0x22c */ prop_s *MyAttacker;
	/* 0x230 */ float FloorLevel;
	/* 0x234 */ float RockingDisp;
	/* 0x238 */ float RockingVel;
	/* 0x23c */ float BurnSFXTimer;
	/* 0x240 */ s16 ClosestLight[9];
	/* 0x254 */ float attachobworldpos[3];
	/* 0x260 */ int manualLightIndex;
	/* 0x264 */ int NetLifeCounter;
	/* 0x268 */ float activationdistsq;
	/* 0x26c */ float activationdot;
	/* 0x270 */ hudHealthArmourData_s *hudHealthArmourPtr;
	/* 0x274 */ int activationdata;
	/* 0x278 */ int alarmnumber;
};

typedef prop_s prop;

struct padInfo_s { // 0x7e4
	/* 0x000 */ int padnum;
	/* 0x004 */ int nextpadnum;
	/* 0x008 */ int finaldestpadnum;
	/* 0x00c */ int curroute[250];
	/* 0x3f4 */ int curroutelen;
	/* 0x3f8 */ int curhallroute[250];
	/* 0x7e0 */ int curhallroutelen;
};

typedef padInfo_s padInfo;

enum {
	DOORTYPE_SINGLE_SLIDE_L = 0,
	DOORTYPE_SINGLE_SLIDE_R = 1,
	DOORTYPE_SINGLE_SLIDE_U = 2,
	DOORTYPE_DOUBLE_SLIDE_RL = 3,
	DOORTYPE_DOUBLE_SLIDE_LR = 4,
	DOORTYPE_DOUBLE_SLIDE_DOUBLE_LR = 5,
	DOORTYPE_DOUBLE_SLIDE_RR = 6,
	DOORTYPE_DOUBLE_DOUBLE_SLIDE = 7,
	DOORTYPE_NUMBER = 8
};

enum {
	DOORKEY_NONE = 0,
	DOORKEY_RED = 1,
	DOORKEY_BLUE = 2,
	DOORKEY_YELLOW = 3,
	DOORKEY_GREEN = 4,
	DOORKEY_NUM = 5,
	DOORTYPE_WINDOW = 5
};

struct doordata_s { // 0x30
	/* 0x00 */ int id;
	/* 0x04 */ u16 type;
	/* 0x06 */ u16 key;
	/* 0x08 */ float pos[3];
	/* 0x14 */ int opening;
	/* 0x18 */ int opentime;
	/* 0x1c */ float openfrac;
	/* 0x20 */ float travel;
	/* 0x24 */ int linknum;
	/* 0x28 */ prop *myprop;
	/* 0x2c */ int doorflags;
};

typedef doordata_s doordata;

struct gundata_s { // 0x4
	/* 0x0 */ int a;
};

typedef gundata_s gundata;

enum {
	PICKUP_READY = 1,
	PICKUP_DROPPING = 2,
	PICKUP_CARRIED = 4
};

struct pickupdata_s { // 0x80
	/* 0x00 */ int dataID;
	/* 0x04 */ int type;
	/* 0x08 */ int status;
	/* 0x0c */ float data;
	/* 0x10 */ int data2;
	/* 0x14 */ int team;
	/* 0x18 */ float dy;
	/* 0x1c */ float homepos[3];
	/* 0x28 */ float floorrotx;
	/* 0x2c */ float floorrotz;
	/* 0x30 */ int padnum;
	/* 0x34 */ int homepadnum;
	/* 0x38 */ int ammotype;
	/* 0x3c */ int ammo;
	/* 0x40 */ float targetpos[3];
	/* 0x4c */ int destpad;
	/* 0x50 */ int droppedstate;
	/* 0x54 */ int dropperid;
	/* 0x58 */ int framesleft;
	/* 0x5c */ float rotvel[3];
	/* 0x68 */ int pickupposindex;
	/* 0x6c */ float pickupscale;
	/* 0x70 */ float unique;
	/* 0x74 */ float tailRotation;
	/* 0x78 */ float lefthandRotation;
	/* 0x7c */ float righthandRotation;
};

typedef pickupdata_s pickupdata;

enum {
	LIMBSTATE_CHANGEOVER = 0,
	LIMBSTATE_ATTACHED = 1,
	LIMBSTATE_HIT = 2,
	LIMBSTATE_INFLIGHT = 3,
	LIMBSTATE_DELETE = 4
};

struct limbdata_s { // 0x80
	/* 0x00 */ mtx_u mtx;
	/* 0x40 */ int state;
	/* 0x44 */ int limb;
	/* 0x48 */ float time;
	/* 0x4c */ float xrotinc;
	/* 0x50 */ float yrotinc;
	/* 0x54 */ float zrotinc;
	/* 0x58 */ float xrot;
	/* 0x5c */ float yrot;
	/* 0x60 */ float zrot;
	/* 0x64 */ prop *chrbelongsto;
	/* 0x68 */ float bulletdir[3];
};

typedef limbdata_s limbdata;

struct basedata_s { // 0x8
	/* 0x0 */ int id;
	/* 0x4 */ int padnum;
};

typedef basedata_s basedata;

enum {
	COLTYPE_CHR_AS_CYLINDER = 1,
	COLTYPE_CHR_AS_POLYS = 2,
	COLTYPE_IGNORE_DEAD_CHR = 4
};

enum {
	OVERRIDE_XYZ = 1,
	OVERRIDE_ST = 2,
	OVERRIDE_RGBA = 4,
	OVERRIDE_GIFTAGS = 8,
	OVERRIDE_NORM = 16
};

enum {
	PARTHIT_UNDEFINED = 0,
	PARTHIT_BODY = 1,
	PARTHIT_HEAD = 2,
	PARTHIT_LEFTARM = 3,
	PARTHIT_RIGHTARM = 4,
	PARTHIT_LEFTLEG = 5,
	PARTHIT_RIGHTLEG = 6,
	PARTHIT_NUM = 7
};

struct floorpointdef_s { // 0xc
	/* 0x0 */ float pos[3];
};

typedef floorpointdef_s floorpointdef;

struct floordef_s { // 0x20
	/* 0x00 */ u32 numpoints;
	/* 0x04 */ u16 switchmask;
	/* 0x06 */ u16 flags;
	/* 0x08 */ int fxUsage;
	/* 0x0c */ float fxProportion;
	/* 0x10 */ float xzbb[2][2];
	/* 0x20 */ floorpointdef points[0];
};

typedef floordef_s floordef;

struct walldef_s { // 0x2c
	/* 0x00 */ u16 switchmask;
	/* 0x02 */ u16 flags;
	/* 0x04 */ float x1;
	/* 0x08 */ float y1;
	/* 0x0c */ float z1;
	/* 0x10 */ float x2;
	/* 0x14 */ float y2;
	/* 0x18 */ float z2;
	/* 0x1c */ float xzbb[2][2];
};

typedef walldef_s walldef;

enum {
	MOVEMODE_NORMAL = 0,
	MOVEMODE_PUSH = 1,
	MOVEMODE_FALL = 2,
	MOVEMODE_JUMP = 3,
	MOVEMODE_DIE = 4,
	MOVEMODE_REBORN = 5,
	MOVEMODE_LINEUPFIXEDGUN = 6,
	MOVEMODE_FIXEDGUN = 7,
	MOVEMODE_REMOTEDEVICE = 8,
	MOVEMODE_MAX = 9
};

enum {
	MOVEMENTTYPE_NORMAL = 0,
	MOVEMENTTYPE_SKATE = 1,
	MOVEMENTTYPE_NUM = 2
};

enum gamecontrols {
	GC_FIRE = 0,
	GC_ALTFIRE = 1,
	GC_ACTIVATE = 2,
	GC_RELOAD = 3,
	GC_AIM = 4,
	GC_CROUCH = 5,
	GC_FORWARD = 6,
	GC_BACKWARD = 7,
	GC_TURNLEFT = 8,
	GC_TURNRIGHT = 9,
	GC_STEPLEFT = 10,
	GC_STEPRIGHT = 11,
	GC_LOOKUP = 12,
	GC_LOOKDOWN = 13,
	GC_ZOOMIN = 14,
	GC_ZOOMOUT = 15,
	GC_PREVWEAPON = 16,
	GC_NEXTWEAPON = 17,
	GC_AIMFORWARD = 18,
	GC_AIMBACKWARD = 19,
	GC_AIMTURNLEFT = 20,
	GC_AIMTURNRIGHT = 21,
	GC_AIMSTEPLEFT = 22,
	GC_AIMSTEPRIGHT = 23,
	GC_AIMLOOKUP = 24,
	GC_AIMLOOKDOWN = 25,
	GC_AIMZOOMIN = 26,
	GC_AIMZOOMOUT = 27,
	GC_AIMPREVWEAPON = 28,
	GC_AIMNEXTWEAPON = 29,
	GC_FORWARDAXIS = 30,
	GC_STRAFEAXIS = 31,
	GC_LOOKAXIS = 32,
	GC_TURNAXIS = 33,
	GC_CHANGEWEAPONAXIS = 34,
	GC_ZOOMAXIS = 35,
	GC_AIMFORWARDAXIS = 36,
	GC_AIMSTRAFEAXIS = 37,
	GC_AIMLOOKAXIS = 38,
	GC_AIMTURNAXIS = 39,
	GC_AIMCHANGEWEAPONAXIS = 40,
	GC_AIMZOOMAXIS = 41,
	NUM_GAMECONTROLS = 42
};

enum {
	PLAYER_CONFIG0 = 0,
	PLAYER_CONFIG_DEFAULT = 1,
	PLAYER_CONFIG_DEFAULT_LH = 2,
	PLAYER_CONFIG_EXPERT = 3,
	PLAYER_CONFIG_EXPERT_B = 4,
	PLAYER_CONFIG_DIGITAL = 5,
	PLAYER_CONFIG_DIGITAL_LH = 6,
	PLAYER_CONFIG_NUM = 7
};

enum {
	HANDICAP_ROOKIE = 0,
	HANDICAP_NOVICE1 = 1,
	HANDICAP_NOVICE2 = 2,
	HANDICAP_NORMAL = 3,
	HANDICAP_VETERAN1 = 4,
	HANDICAP_VETERAN2 = 5,
	HANDICAP_HERO = 6,
	HANDICAP_NUM = 7
};

struct playerprefs_s { // 0xbc
	/* 0x00 */ u16 confignum;
	/* 0x02 */ u16 controlflags;
	/* 0x04 */ int customcontrols[42];
	/* 0xac */ int colourid;
	/* 0xb0 */ int chrnum;
	/* 0xb4 */ int gunoption;
	/* 0xb8 */ int handicap;
};

typedef playerprefs_s playerprefs_t;

struct autoaiminfo_s { // 0xc
	/* 0x0 */ int visible;
	/* 0x4 */ float dot;
	/* 0x8 */ float dist;
};

typedef autoaiminfo_s autoaiminfo;

struct player_s { // 0x410
	/* 0x000 */ int num;
	/* 0x004 */ int localnum;
	/* 0x008 */ ViewDef_s *view;
	/* 0x00c */ int flags;
	/* 0x010 */ playerprefs_t *prefs;
	/* 0x014 */ int controls[42];
	/* 0x0bc */ float height;
	/* 0x0c0 */ float crouchheight;
	/* 0x0c4 */ float eyedist;
	/* 0x0c8 */ float eyeheight;
	/* 0x0cc */ float desteyeheight;
	/* 0x0d0 */ float eyeheightoffset;
	/* 0x0d4 */ float eyeheightoffsetsteps;
	/* 0x0d8 */ float hardrad;
	/* 0x0dc */ float softrad;
	/* 0x0e0 */ float feetpos[3];
	/* 0x0ec */ float eyepos[3];
	/* 0x0f8 */ float lookdir[3];
	/* 0x104 */ float up[3];
	/* 0x110 */ float right[3];
	/* 0x11c */ float feetdir[3];
	/* 0x128 */ float strafedir[3];
	/* 0x134 */ float hitoffset[3];
	/* 0x140 */ float strafeangle;
	/* 0x144 */ float dirx;
	/* 0x148 */ float feetdirx;
	/* 0x14c */ float diry;
	/* 0x150 */ int autocentre;
	/* 0x154 */ int numframes;
	/* 0x158 */ int movemode;
	/* 0x15c */ int movementtype;
	/* 0x160 */ float skateVelocityX;
	/* 0x164 */ float skateVelocityZ;
	/* 0x168 */ float pushdir[3];
	/* 0x174 */ float swayspeedx;
	/* 0x178 */ float swayspeedy;
	/* 0x17c */ float swayamount;
	/* 0x180 */ float swaycountx;
	/* 0x184 */ float swaycounty;
	/* 0x188 */ float swayx;
	/* 0x18c */ float swayy;
	/* 0x190 */ int lastnumframes;
	/* 0x194 */ float lastfeetpos[3];
	/* 0x1a0 */ float lasteyepos[3];
	/* 0x1ac */ float lastdirx;
	/* 0x1b0 */ float lastdiry;
	/* 0x1b4 */ float lastmovedist;
	/* 0x1b8 */ float lastmovedistxz;
	/* 0x1bc */ prop *playerprop;
	/* 0x1c0 */ float gunmovedist;
	/* 0x1c4 */ float gunoffset[3];
	/* 0x1d0 */ playergun gunleft;
	/* 0x2a0 */ playergun gunright;
	/* 0x370 */ int eyeroom;
	/* 0x374 */ int sighton;
	/* 0x378 */ float sightfracx;
	/* 0x37c */ float sightfracy;
	/* 0x380 */ float sightfracfiltx;
	/* 0x384 */ float sightfracfilty;
	/* 0x388 */ autoaiminfo *autoaim;
	/* 0x38c */ prop *autoaimprop;
	/* 0x390 */ floordef *floor;
	/* 0x394 */ prop *curhitprop;
	/* 0x398 */ float curhitpos[3];
	/* 0x3a4 */ float curhitnorm[3];
	/* 0x3b0 */ float velocity[3];
	/* 0x3bc */ float soundalerttimer;
	/* 0x3c0 */ float dualshockpower;
	/* 0x3c4 */ float dualshockpowerSlowdown;
	/* 0x3c8 */ float lastfwaxis;
	/* 0x3cc */ float laststrafeaxis;
	/* 0x3d0 */ int DeathViewCounter;
	/* 0x3d4 */ float DeathViewCurrentDir[3];
	/* 0x3e0 */ boolean FindingNewTarget;
	/* 0x3e4 */ prop *pNewTarget;
	/* 0x3e8 */ float NewTargetDot;
	/* 0x3ec */ float soundfirehitpos[3];
	/* 0x3f8 */ float soundimpactradius;
	/* 0x3fc */ float soundfirefrompos[3];
	/* 0x408 */ float soundfirefromradius;
};

typedef player_s player;

enum {
	CHRFX_NONE = 0,
	CHRFX_SPAWN = 1,
	CHRFX_FADEOUT = 2,
	CHRFX_BURN = 4,
	CHRFX_ACTION = 8,
	CHRFX_CLOAKED = 16,
	CHRFX_BREATHING = 32,
	CHRFX_FOOTDECAL = 128
};

enum {
	CHRFX_SPAWN_NONE = -1,
	CHRFX_SPAWN_RING = 0,
	CHRFX_SPAWN_ENERGY = 1,
	CHRFX_SPAWN_SPHERE = 2,
	CHRFX_SPAWN_BLAST = 3,
	NUM_CHRFX_SPAWN = 4
};

enum {
	CHRFX_SPAWNSUBTYPE_RED = 0,
	CHRFX_SPAWNSUBTYPE_YELLOW = 1,
	CHRFX_SPAWNSUBTYPE_BLUE = 2,
	CHRFX_SPAWNSUBTYPE_GREEN = 3
};

enum {
	CHRFX_ACTION_NONE = -1,
	CHRFX_ACTION_TIMESPLITTER_HANDS = 0,
	CHRFX_ACTION_TIMESPLITTER_RADIUS = 1,
	NUM_CHRFX_ACTION = 2
};

struct chrfx_s { // 0x40
	/* 0x00 */ chrdata_s *chrdata;
	/* 0x04 */ int flags;
	/* 0x08 */ int spawnType;
	/* 0x0c */ int spawnSubType;
	/* 0x10 */ int actionType;
	/* 0x14 */ float spawnTime;
	/* 0x18 */ float actionTime;
	/* 0x1c */ boolean xray;
	/* 0x20 */ int footdecalkeyframe;
	/* 0x24 */ boolean breathOn;
	/* 0x28 */ float breathTimer;
	/* 0x2c */ float breathTimeDest;
	/* 0x30 */ float burn;
	/* 0x34 */ float fadeamount;
	/* 0x38 */ prop_s *burnAttacker;
	/* 0x3c */ particlegroup_s *particlefx[1];
};

typedef chrfx_s chrfx;

enum {
	INVENTORY_CANSELECT = 1,
	INVENTORY_ROTATEINARCADE = 2
};

struct inventoryDef_s { // 0x10
	/* 0x0 */ int propnum;
	/* 0x4 */ int name;
	/* 0x8 */ int flags;
	/* 0xc */ float inventoryScale;
};

typedef inventoryDef_s inventoryDef;

struct inventoryItem_s { // 0x1c
	/* 0x00 */ int pickupType;
	/* 0x04 */ int subType;
	/* 0x08 */ int propnum;
	/* 0x0c */ inventoryDef *def;
	/* 0x10 */ prop_s *pickupProp;
	/* 0x14 */ inventoryItem_s *previous;
	/* 0x18 */ inventoryItem_s *next;
};

typedef inventoryItem_s inventoryItem;

struct inventory_s { // 0x23c
	/* 0x000 */ inventoryItem itemArray[20];
	/* 0x230 */ inventoryItem *items;
	/* 0x234 */ inventoryItem *freeItems;
	/* 0x238 */ int numItems;
};

typedef inventory_s inventory;

struct chrsoundgroup_s { // 0x32
	/* 0x00 */ short int hitsounds[18];
	/* 0x24 */ short int deathsounds[6];
	/* 0x30 */ short int frontsounds[1];
};

typedef chrsoundgroup_s chrsoundgroup;

enum {
	CHRTYPE_1 = 0,
	CHRTYPE_2 = 1,
	CHRTYPE_3 = 2,
	CHRTYPE_4 = 3,
	CHRTYPE_5 = 4,
	CHRTYPE_6 = 5,
	CHRTYPE_7 = 6,
	CHRTYPE_8 = 7,
	CHRTYPE_9 = 8,
	CHRTYPE_10 = 9,
	CHRTYPE_11 = 10,
	CHRTYPE_12 = 11,
	CHRTYPE_13 = 12,
	CHRTYPE_14 = 13,
	CHRTYPE_15 = 14,
	CHRTYPE_16 = 15,
	CHRTYPE_17 = 16,
	CHRTYPE_18 = 17,
	CHRTYPE_19 = 18,
	CHRTYPE_20 = 19,
	CHRTYPE_21 = 20,
	CHRTYPE_22 = 21,
	CHRTYPE_23 = 22,
	CHRTYPE_24 = 23,
	CHRTYPE_25 = 24,
	CHRTYPE_26 = 25,
	CHRTYPE_27 = 26,
	CHRTYPE_28 = 27,
	CHRTYPE_29 = 28,
	CHRTYPE_30 = 29,
	CHRTYPE_31 = 30,
	CHRTYPE_32 = 31,
	CHRTYPE_33 = 32,
	CHRTYPE_34 = 33,
	CHRTYPE_35 = 34,
	CHRTYPE_36 = 35,
	CHRTYPE_37 = 36,
	CHRTYPE_38 = 37,
	CHRTYPE_39 = 38,
	CHRTYPE_40 = 39,
	CHRTYPE_41 = 40,
	CHRTYPE_42 = 41,
	CHRTYPE_43 = 42,
	CHRTYPE_44 = 43,
	CHRTYPE_45 = 44,
	CHRTYPE_46 = 45,
	CHRTYPE_47 = 46,
	CHRTYPE_48 = 47,
	CHRTYPE_49 = 48,
	CHRTYPE_50 = 49,
	CHRTYPE_NUM = 50
};

enum {
	CHRSUBTYPE_HUMAN = 0,
	CHRSUBTYPE_ZOMBIE = 1,
	CHRSUBTYPE_TIMESPLITTER = 2,
	CHRSUBTYPE_ROBOT = 3
};

enum {
	APPEARANCE_HUMAN = 0,
	APPEARANCE_ZOMBIE = 1,
	APPEARANCE_TIMESPLITTER = 2,
	APPEARANCE_ROBOT = 3,
	APPEARANCE_ALIEN = 4
};

enum {
	SEX_MALE = 0,
	SEX_FEMALE = 1
};

struct chrdesc_s { // 0x44
	/* 0x00 */ short int longname;
	/* 0x02 */ short int name;
	/* 0x04 */ chrsoundgroup *sounds;
	/* 0x08 */ int propnum;
	/* 0x0c */ int frontpropnum;
	/* 0x10 */ int appearancesubtype;
	/* 0x14 */ int sex;
	/* 0x18 */ float height;
	/* 0x1c */ float crouchheight;
	/* 0x20 */ float eyedist;
	/* 0x24 */ float hardrad;
	/* 0x28 */ float softrad;
	/* 0x2c */ float scale;
	/* 0x30 */ int animpersonality;
	/* 0x34 */ int favouritegun;
	/* 0x38 */ int easyskill;
	/* 0x3c */ int normalskill;
	/* 0x40 */ int hardskill;
};

typedef chrdesc_s chrdesc;

enum {
	CHRMOVEMODE_NORMAL = 1,
	CHRMOVEMODE_STRAFE = 2,
	CHRMOVEMODE_CROUCH = 4,
	CHRMOVEMODE_STATIONARY = 8,
	CHRMOVEMODE_GUNREADY = 16,
	CHRMOVEMODE_DEATH = 32,
	CHRMOVEMODE_DECELERATE = 64,
	CHRMOVEMODE_BACKWARDS = 128,
	CHRMOVEMODE_JUMP = 256,
	CHRMOVEMODE_OVERRIDE = 512,
	CHRMOVEMODE_PATROL = 1024,
	CHRMOVEMODE_BOUND = 2048,
	CHRMOVEMODE_FALLING = 4096,
	CHRMOVEMODE_MAX = 4097
};

enum {
	POWER_INVISIBLE = 1,
	POWER_KEYCARD_1 = 2,
	POWER_KEYCARD_2 = 4,
	POWER_KEYCARD_3 = 8,
	POWER_KEYCARD_4 = 16
};

enum {
	ARMOUR_TYPE_NONE = 0,
	ARMOUR_TYPE_LOW = 1,
	ARMOUR_TYPE_HIGH = 2
};

struct chrbounds_s { // 0x20
	/* 0x00 */ char Matrix;
	/* 0x01 */ char NumOffsets;
	/* 0x04 */ float Radius;
	/* 0x08 */ float Offset[2][3];
};

typedef chrbounds_s chrbounds;

enum {
	LIMB_HEAD = 0,
	LIMB_LEFTARM = 1,
	LIMB_RIGHTARM = 2,
	LIMB_LEFTLEG = 3,
	LIMB_RIGHTLEG = 4,
	LIMB_HAT = 5,
	NUM_LIMBS = 6
};

enum {
	SHOOTFLAG_NORMAL = 1,
	SHOOTFLAG_SPRAY = 2,
	SHOOTFLAG_SPRAYXPOS = 4,
	SHOOTFLAG_SPRAYXNEG = 8
};

struct chrdata_s { // 0x15f0
	/* 0x0000 */ int id;
	/* 0x0004 */ s16 chrtype;
	/* 0x0006 */ s16 chrtypeoriginal;
	/* 0x0008 */ int chrsubtype;
	/* 0x000c */ float armour;
	/* 0x0010 */ float maxArmour;
	/* 0x0014 */ int armourtype;
	/* 0x0018 */ u8 *name;
	/* 0x001c */ u32 colour;
	/* 0x0020 */ int team;
	/* 0x0024 */ int powers;
	/* 0x0028 */ s16 kills[58];
	/* 0x009c */ int score;
	/* 0x00a0 */ int radiustime;
	/* 0x00a4 */ prop *attacker;
	/* 0x00a8 */ int guncombo;
	/* 0x00ac */ int oldguncombo;
	/* 0x00b0 */ chrgun gunleft;
	/* 0x0140 */ chrgun gunright;
	/* 0x01d0 */ prop *bag;
	/* 0x01d4 */ inventory inventory;
	/* 0x0410 */ int gunsheld[40];
	/* 0x04b0 */ int ammo[17];
	/* 0x04f4 */ padInfo p1;
	/* 0x0cd8 */ pad_s *placementpad;
	/* 0x0cdc */ int triggerpad;
	/* 0x0ce0 */ float fovy;
	/* 0x0ce4 */ u32 aiflag;
	/* 0x0ce8 */ u32 shootingflag;
	/* 0x0cec */ float lastxshootpos;
	/* 0x0cf0 */ int movemode;
	/* 0x0cf4 */ u32 curstate;
	/* 0x0cf8 */ u32 laststate;
	/* 0x0cfc */ u32 returnstate;
	/* 0x0d00 */ s32 statedata;
	/* 0x0d04 */ float fstatedata;
	/* 0x0d08 */ char statename[30];
	/* 0x0d28 */ s32 statelastdata;
	/* 0x0d2c */ s32 canseetarget;
	/* 0x0d30 */ float angletotarget;
	/* 0x0d34 */ float angletodest;
	/* 0x0d38 */ prop *target;
	/* 0x0d3c */ prop *targetprop;
	/* 0x0d40 */ prop *targetpickup;
	/* 0x0d44 */ float destpos[3];
	/* 0x0d50 */ float lastroompos[3];
	/* 0x0d5c */ float strafepos[3];
	/* 0x0d68 */ int skill;
	/* 0x0d6c */ float animscale;
	/* 0x0d70 */ float runspeed;
	/* 0x0d74 */ float walkspeed;
	/* 0x0d78 */ float fallspeed;
	/* 0x0d7c */ float acceleration;
	/* 0x0d80 */ float capspeed;
	/* 0x0d84 */ float speed;
	/* 0x0d88 */ float maxrot;
	/* 0x0d8c */ float timer1;
	/* 0x0d90 */ float timer2;
	/* 0x0d94 */ float intervaltimer;
	/* 0x0d98 */ float invunerabletimer;
	/* 0x0d9c */ float awaketimer;
	/* 0x0da0 */ float onscreentimer;
	/* 0x0da4 */ float timelasthit;
	/* 0x0da8 */ float timelastfired;
	/* 0x0dac */ int lastbulletfired;
	/* 0x0db0 */ float lasthitbulletdir[3];
	/* 0x0dbc */ int bulletheardframe;
	/* 0x0dc0 */ float gunreloadtimer;
	/* 0x0dc4 */ float lastfloorheight;
	/* 0x0dc8 */ float inaccuracy;
	/* 0x0dcc */ float shootdir[3];
	/* 0x0dd8 */ float aimpos[3];
	/* 0x0de4 */ float lastintervalpos[3];
	/* 0x0df0 */ int progress;
	/* 0x0df4 */ int repeatfire;
	/* 0x0df8 */ float lastneckpos[3];
	/* 0x0e04 */ float currneckpos;
	/* 0x0e08 */ prop *myprop;
	/* 0x0e0c */ prop *hatprop;
	/* 0x0e10 */ int limbnum[6];
	/* 0x0e28 */ int patrolindex;
	/* 0x0e2c */ int checkplayer;
	/* 0x0e30 */ int alertpad;
	/* 0x0e34 */ int liftindex;
	/* 0x0e38 */ int floorgoingto;
	/* 0x0e3c */ int backoff;
	/* 0x0e40 */ int limbflag;
	/* 0x0e44 */ float campingpos[3];
	/* 0x0e50 */ float campingtimer;
	/* 0x0e54 */ int prevcampingframecheck;
	/* 0x0e58 */ setupNPC_s *setup;
	/* 0x0e5c */ npcspawninfo_s *spawn;
	/* 0x0e60 */ float MinPos[3];
	/* 0x0e6c */ float MaxPos[3];
	/* 0x0e78 */ chrbounds ChrBounds[50];
	/* 0x14b8 */ boolean MoveHitObject;
	/* 0x14bc */ float FloorHeight;
	/* 0x14c0 */ floordef_s *pFloor;
	/* 0x14c4 */ prop *pStandOnProp;
	/* 0x14c8 */ int fadeoutdelaydone;
	/* 0x14cc */ prop *pRemoteGun;
	/* 0x14d0 */ boolean MoveHitChr;
	/* 0x14d4 */ int MoveLastChrHit;
	/* 0x14e0 */ mtx_u localwaistmtx;
	/* 0x1520 */ bullet_s *remotemines[20];
	/* 0x1570 */ int animseqnum;
	/* 0x1574 */ int animseqanimnum;
	/* 0x1578 */ chrfx chrfx;
	/* 0x15b8 */ int numclones;
	/* 0x15bc */ float prevlswipepos[3];
	/* 0x15c8 */ float prevrswipepos[3];
	/* 0x15d4 */ int ignoredoor[3];
	/* 0x15e0 */ int scratch;
	/* 0x15e4 */ int last_reacted;
	/* 0x15e8 */ int reacted_to_burning;
};

typedef chrdata_s chrdata;

enum {
	UTF_DROPPINGBAG = 0,
	UTF_PICKINGUPBAG = 1
};

struct zbtestval_s { // 0x1c
	/* 0x00 */ int player;
	/* 0x04 */ void *ref;
	/* 0x08 */ void *ref2;
	/* 0x0c */ u32 offset;
	/* 0x10 */ u32 expect;
	/* 0x14 */ u32 actual;
	/* 0x18 */ int Bias;
};

typedef zbtestval_s zbtestval;

struct imageproc_s { // 0x50
	/* 0x00 */ boolean defocus;
	/* 0x04 */ boolean fisheye;
	/* 0x08 */ boolean viewzb;
	/* 0x0c */ int invert;
	/* 0x10 */ int night;
	/* 0x14 */ int blur;
	/* 0x18 */ int blurmode;
	/* 0x1c */ int whiten;
	/* 0x20 */ int contrast;
	/* 0x24 */ int red;
	/* 0x28 */ int green;
	/* 0x2c */ int blue;
	/* 0x30 */ int depth;
	/* 0x34 */ int sectorLeft;
	/* 0x38 */ int sectorTop;
	/* 0x3c */ int sectorRight;
	/* 0x40 */ int sectorBottom;
	/* 0x44 */ boolean timePortal;
	/* 0x48 */ int timePortalX;
	/* 0x4c */ int timePortalY;
};

typedef imageproc_s imageproc;

struct imageprocPoint_s { // 0x80
	/* 0x00 */ boolean borderx;
	/* 0x04 */ boolean bordery;
	/* 0x08 */ int xOriginal;
	/* 0x0c */ int yOriginal;
	/* 0x10 */ int xWave;
	/* 0x14 */ int yWave;
	/* 0x18 */ boolean visible;
	/* 0x1c */ boolean test;
	/* 0x20 */ zbtestval zt;
	/* 0x3c */ float heatAmplitude;
	/* 0x40 */ float heatIntensity[16];
};

typedef imageprocPoint_s imageprocPoint;

struct imageprocSector_s { // 0x34
	/* 0x00 */ int localplayer;
	/* 0x04 */ int xLeft;
	/* 0x08 */ int yTop;
	/* 0x0c */ int xRight;
	/* 0x10 */ int yBottom;
	/* 0x14 */ int texLeft;
	/* 0x18 */ int texTop;
	/* 0x1c */ int texRight;
	/* 0x20 */ int texBottom;
	/* 0x24 */ imageprocPoint *topLeft;
	/* 0x28 */ imageprocPoint *topRight;
	/* 0x2c */ imageprocPoint *bottomLeft;
	/* 0x30 */ imageprocPoint *bottomRight;
};

typedef imageprocSector_s imageprocSector;

enum {
	BLURMODE_NORMAL = 0,
	BLURMODE_ADDITIVE = 1
};

enum {
	SFX_SIBERIA_GUARD_ALERT01 = 0,
	SFX_SIBERIA_GUARD_ALERT02 = 1,
	SFX_SIBERIA_GUARD_ALERT03 = 2,
	SFX_SIBERIA_GUARD_ALERT04 = 3,
	SFX_SIBERIA_GUARD_ALERT05 = 4,
	SFX_SIBERIA_GUARD_ALERT06 = 5,
	SFX_SIBERIA_GUARD_ALERT07 = 6,
	SFX_SIBERIA_GUARD_ALERT08 = 7,
	SFX_SIBERIA_GUARD_ALERT09 = 8,
	SFX_SIBERIA_GUARD_ALERT10 = 9,
	SFX_SIBERIA_GUARD_ALERT11 = 10,
	SFX_SIBERIA_GUARD_ALERT12 = 11,
	SFX_SIBERIA_GUARD_ALERT13 = 12,
	SFX_SIBERIA_GUARD_ALERT14 = 13,
	SFX_SIBERIA_GUARD_ALERT15 = 14,
	SFX_SIBERIA_GUARD_ALERT16 = 15,
	SFX_SIBERIA_GUARD_ALERT17 = 16,
	SFX_SIBERIA_GUARD_ALERT18 = 17,
	SFX_SIBERIA_GUARD_ALERT19 = 18,
	SFX_TANNOY_MAN01 = 19,
	SFX_COPTER = 20,
	SFX_LIFT_DING = 21,
	SFX_DOOR_METAL_SLIDE = 22,
	SFX_DOOR_LIFT_SLIDE = 23,
	SFX_TURNY_PIPE = 24,
	SFX_TARGET_AQUIRED = 25,
	SFX_CAMERA_EXPLODE = 26,
	SFX_STEAM_LOOPED = 27,
	SFX_DOOR_BIG_METAL_SHUT = 28,
	SFX_RESTORE_POWER = 29,
	SFX_BUTTON_PRESS = 30,
	SFX_SHOWER_LOOPED = 31,
	SFX_BIOHAZARD = 32,
	SFX_DOOR_FILING_CABINET = 33,
	SFX_SATDISH_HITFLOOR = 34,
	SFX_APACHE_GUN = 35,
	SFX_APACHE_ROCKET = 36,
	SFX_LASERLOCK_LOOPED = 37,
	SFX_CHURCHBELL = 38,
	SFX_RF_TARGET_AQUIRED = 39,
	SFX_RF_DOOR_SLIDE1 = 40,
	SFX_AIRPLANE = 41,
	SFX_SCIFI_FAN = 42,
	SFX_CONSOLE_ON = 43,
	SFX_CYBERDEN_ENGINESTEAM = 44,
	SFX_WEAPON_CHECK = 45,
	SFX_LAUNCH_ENGINESTEAM = 46,
	SFX_GONG = 47,
	SFX_ELEC_LOOP = 48,
	SFX_SPARK1 = 49,
	SFX_SPARK2 = 50,
	SFX_SPARK3 = 51,
	SFX_WATERFALL = 52,
	SFX_PLANET_CRYSTALBLAST = 53,
	SFX_PLANET_CRYSTALBLAST2 = 54,
	SFX_HELICOPTER = 55,
	SFX_BANK_HOURCHIME = 56,
	SFX_MALL_CLOCK2 = 57,
	SFX_PUB_SIGN = 58,
	SFX_GRAVEYARD_LAUGH01 = 59,
	SFX_GRAVEYARD_LAUGH02 = 60,
	SFX_GRAVEYARD_WOLF01 = 61,
	SFX_MANSION_DOOR_OPEN = 62,
	SFX_SPACEWAYS_DOOR_OPEN = 63,
	SFX_LEVELCOMPLETE_LEVEL2_L = 64,
	SFX_LEVELFAIL_LEVEL2_L = 65,
	SFX_LEVELCOMPLETE_LEVEL5_L = 66,
	SFX_LEVELFAIL_LEVEL5_L = 67,
	SFX_LEVELCOMPLETE_LEVEL8_L = 68,
	SFX_LEVELFAIL_LEVEL8_L = 69,
	SFX_LEVELCOMPLETE_LEVEL9_L = 70,
	SFX_LEVELFAIL_LEVEL9_L = 71,
	SFX_LEVELCOMPLETE_LEVEL10_L = 72,
	SFX_LEVELFAIL_LEVEL10_L = 73,
	SFX_LEVELCOMPLETE_LEVEL11_L = 74,
	SFX_LEVELFAIL_LEVEL11_L = 75,
	SFX_LEVELCOMPLETE_LEVEL12_L = 76,
	SFX_LEVELFAIL_LEVEL12_L = 77,
	SFX_LEVELCOMPLETE_LEVEL13_L = 78,
	SFX_LEVELFAIL_LEVEL13_L = 79,
	SFX_LEVELCOMPLETE_LEVEL14_L = 80,
	SFX_LEVELFAIL_LEVEL14_L = 81,
	SFX_LEVELCOMPLETE_LEVEL15_L = 82,
	SFX_LEVELFAIL_LEVEL15_L = 83,
	SFX_LEVELCOMPLETE_LEVEL16_L = 84,
	SFX_LEVELFAIL_LEVEL16_L = 85,
	SFX_LEVELCOMPLETE_LEVEL17_L = 86,
	SFX_LEVELFAIL_LEVEL17_L = 87,
	SFX_LEVELCOMPLETE_LEVEL18_L = 88,
	SFX_LEVELFAIL_LEVEL18_L = 89,
	SFX_LEVELCOMPLETE_LEVEL21_L = 90,
	SFX_LEVELFAIL_LEVEL21_L = 91,
	SFX_LEVELCOMPLETE_LEVEL22_L = 92,
	SFX_LEVELFAIL_LEVEL22_L = 93,
	SFX_LEVELCOMPLETE_LEVEL23_L = 94,
	SFX_LEVELFAIL_LEVEL23_L = 95,
	SFX_LEVELCOMPLETE_LEVEL24_L = 96,
	SFX_LEVELFAIL_LEVEL24_L = 97,
	SFX_LEVELCOMPLETE_LEVEL26_L = 98,
	SFX_LEVELFAIL_LEVEL26_L = 99,
	SFX_LEVELCOMPLETE_LEVEL27_L = 100,
	SFX_LEVELFAIL_LEVEL27_L = 101,
	SFX_GUARD_MALE_HUH01 = 102,
	SFX_GUARD_FEM_HUH01 = 103,
	SFX_GUARD_ZOMBIE_HUH01 = 104,
	SFX_GUARD_GASMASK_HUH01 = 105,
	SFX_MALE_ONFIRE = 106,
	SFX_FEM_ONFIRE = 107,
	SFX_ZOMBIE_ONFIRE = 108,
	SFX_GASMASK_ONFIRE = 109,
	SFX_BODYFALL1 = 110,
	SFX_BODYFALL2 = 111,
	SFX_BODYFALL3 = 112,
	SFX_BODYFALL4 = 113,
	SFX_BODYFALL5 = 114,
	SFX_BODYFALL6 = 115,
	SFX_BODYFALL7 = 116,
	SFX_BODYFALL8 = 117,
	SFX_BODYFALL9 = 118,
	SFX_BODYFALL10 = 119,
	SFX_BODYFALL11 = 120,
	SFX_EXPLOSION1 = 121,
	SFX_EXPLOSION2 = 122,
	SFX_EXPLOSION3 = 123,
	SFX_EXPLOSION4 = 124,
	SFX_EXPLOSION5 = 125,
	SFX_EXPLOSION6 = 126,
	SFX_DRGUN3 = 127,
	SFX_GUN1 = 128,
	SFX_GUN2 = 129,
	SFX_GUN5 = 130,
	SFX_GUN5B = 131,
	SFX_GUN13 = 132,
	SFX_GUN18 = 133,
	SFX_GUNGRENADELAUNCHER = 134,
	SFX_GUNSNIPERRIFLE = 135,
	SFX_GUNWALTHER = 136,
	SFX_GUNCOLT = 137,
	SFX_GUNCOLT_SHORT = 138,
	SFX_GUNMAUSER = 139,
	SFX_GUNTOMMYGUN = 140,
	SFX_GUNLASER1 = 141,
	SFX_GUNLASER2 = 142,
	SFX_GUNSCIFIHANDGUN = 143,
	SFX_GUNSCIFISNIPER = 144,
	SFX_GUN_SILENCED_PISTOL = 145,
	SFX_GUN_ELECTROGUN_SECONDARY = 146,
	SFX_GUN_ELECTROGUN_LOOP = 147,
	SFX_GUN_ELECTROGUN_FIRST = 148,
	SFX_GUN_UZI = 149,
	SFX_GUNRAIL_END = 150,
	SFX_GUNROCKET02 = 151,
	SFX_GUN_FLAMETHROWER = 152,
	SFX_GUN_FLAMETHROWER_LOOP = 153,
	SFX_GUN_FIRE_EXTINGUISHER = 154,
	SFX_GUN_FIRE_EXTINGUISHER_LOOP = 155,
	SFX_GUNASSAULT = 156,
	SFX_GUNROCKET03 = 157,
	SFX_GUN_REDLASER = 158,
	SFX_RICOCHET1 = 159,
	SFX_RICOCHET2 = 160,
	SFX_RICOCHET3 = 161,
	SFX_RICOCHET4 = 162,
	SFX_RICOCHET5 = 163,
	SFX_RICOCHET6 = 164,
	SFX_RICOCHET7 = 165,
	SFX_RICOCHET8 = 166,
	SFX_RICOCHET9 = 167,
	SFX_RICOCHET10 = 168,
	SFX_RICOCHET11 = 169,
	SFX_RICOCHET12 = 170,
	SFX_GETGUN = 171,
	SFX_GETGUN_SCIFI = 172,
	SFX_GETBRICK = 173,
	SFX_BRICKHIT = 174,
	SFX_CHANGEGUN = 175,
	SFX_RELOAD = 176,
	SFX_THROW = 177,
	SFX_FRONTEND1 = 178,
	SFX_FRONTEND2 = 179,
	SFX_FRONTEND3 = 180,
	SFX_CHOOSE1 = 181,
	SFX_CHOOSE2 = 182,
	SFX_OPENUP = 183,
	SFX_CAMERA = 184,
	SFX_BEEP01 = 185,
	SFX_BEEP02 = 186,
	SFX_SPLITTER_ROAR = 187,
	SFX_ZOMBIE_SWIPE1 = 188,
	SFX_ZOMBIE_SWIPE2 = 189,
	SFX_SPLITTER_FIREBALL = 190,
	SFX_SCIFI_RICO1 = 191,
	SFX_SCIFI_RICO2 = 192,
	SFX_SCIFI_RICO3 = 193,
	SFX_SCIFI_RICO4 = 194,
	SFX_TNT_FUSE = 195,
	SFX_TNT_BOUNCE01 = 196,
	SFX_TNT_BOUNCE02 = 197,
	SFX_TNT_BOUNCE03 = 198,
	SFX_TNT_BOUNCE04 = 199,
	SFX_GET_AMMO = 200,
	SFX_GET_HEALTH = 201,
	SFX_GET_ARMOUR = 202,
	SFX_TNT_LIGHT = 203,
	SFX_GUN_DRYFIRE01 = 204,
	SFX_GUN_BADDIECOCK01 = 205,
	SFX_TIME_MINE_COUNT = 206,
	SFX_TIME_MINE_COUNTLAST = 207,
	SFX_PROXIMITY_MINE_LOOP = 208,
	SFX_ATTACH_MINE = 209,
	SFX_REMOTE_MINE_TRIGGER = 210,
	SFX_DROPGUN = 211,
	SFX_SHOTGUN_COCK = 212,
	SFX_TIMEUP = 213,
	SFX_ONEMINLEFT = 214,
	SFX_TENSECLEFT = 215,
	SFX_GLASSBREAK1 = 216,
	SFX_GLASSBREAK2 = 217,
	SFX_GLASSBREAK3 = 218,
	SFX_GLASSBREAK4 = 219,
	SFX_DYING_FALL_MALE = 220,
	SFX_BONECRACK = 221,
	SFX_PUNCH01 = 222,
	SFX_PUNCH02 = 223,
	SFX_PUNCH03 = 224,
	SFX_PUNCH04 = 225,
	SFX_HEADSUP = 226,
	SFX_CAMERA_ALARM = 227,
	SFX_PLAYER_RESPAWN = 228,
	SFX_GUN_RESPAWN = 229,
	SFX_ROCKET_RELOAD = 230,
	SFX_FIXED_GUN01 = 231,
	SFX_INVUNERABLE = 232,
	SFX_FIXEDGUN_ON = 233,
	SFX_FIXEDGUN_OFF = 234,
	SFX_TEXT_SWEEP = 235,
	SFX_SNIPER_RESPAWN = 236,
	SFX_PAUSEGAME = 237,
	SFX_NO_CAN_DO = 238,
	SFX_GENERIC_BEEP = 239,
	SFX_PICKUP_ANKH = 240,
	SFX_PICKUP_PAPERWALLET = 241,
	SFX_PICKUP_MINIDISC = 242,
	SFX_PICKUP_EGGTIMER = 243,
	SFX_PICKUP_METALCASE = 244,
	SFX_PICKUP_BRAIN = 245,
	SFX_PICKUP_SKULL = 246,
	SFX_PICKUP_BRIEFCASE = 247,
	SFX_PICKUP_BOTTLE = 248,
	SFX_PICKUP_BAG = 249,
	SFX_DROP_BAG = 250,
	SFX_GUNCHEAT_BLOWER = 251,
	SFX_GUNCHEAT_BLUNDER = 252,
	SFX_GUNCHEAT_BOING01 = 253,
	SFX_GUNCHEAT_BOING02 = 254,
	SFX_GUNCHEAT_HORN1 = 255,
	SFX_GUNCHEAT_HORN2 = 256,
	SFX_GUNCHEAT_CUKOO = 257,
	SFX_GUNCHEAT_DUCK = 258,
	SFX_GUNCHEAT_FART = 259,
	SFX_GUNCHEAT_FROG = 260,
	SFX_GUNCHEAT_JHARP = 261,
	SFX_GUNCHEAT_POP01 = 262,
	SFX_GUNCHEAT_POP02 = 263,
	SFX_GUNCHEAT_POP03 = 264,
	SFX_GUNCHEAT_RULER = 265,
	SFX_GUNCHEAT_SQUEEZETOY = 266,
	SFX_GUNCHEAT_SWANEEDOWN = 267,
	SFX_GUNCHEAT_SWANEEUP = 268,
	SFX_GUNCHEAT_TWANG = 269,
	SFX_GUNCHEAT_TWEAK = 270,
	SFX_GUNCHEAT_WHISTLEUP = 271,
	SFX_FE_ACTING_REDALIEN = 272,
	SFX_FE_ACTING_M_COP = 273,
	SFX_FE_ACTING_F_STEWARDESS_KISS = 274,
	SFX_FE_ACTING_M_CLEANER = 275,
	SFX_FE_ACTING_M_COOK = 276,
	SFX_FE_ACTING_F_FUTCOP = 277,
	SFX_FE_ACTING_M_RESDOG = 278,
	SFX_FE_ACTING_M_SWAT = 279,
	SFX_FE_ACTING_M_ROBOT = 280,
	SFX_FE_ACTING_U_OVERALL = 281,
	SFX_FE_ACTING_M_SMARINE = 282,
	SFX_FE_ACTING_M_HOOD = 283,
	SFX_FE_ACTING_X_ROBOFISH = 284,
	SFX_FE_ACTING_Z_ZOMBIE = 285,
	SFX_FE_ACTING_F_ROBOT = 286,
	SFX_FE_ACTING_F_HOOD = 287,
	SFX_FE_ACTING_M_PERHOR = 288,
	SFX_FE_ACTING_DUCK = 289,
	SFX_FE_ACTING_PRIESTESS = 290,
	SFX_FE_ACTING_HICK = 291,
	SFX_FE_ACTING_M_SCIENTIST = 292,
	SFX_FE_ACTING_M_MRBIG = 293,
	SFX_FE_ACTING_M_FUTCOP = 294,
	SFX_FE_ACTING_F_PERHORROR = 295,
	SFX_FE_ACTING_BONUSBOY = 296,
	SFX_FE_ACTING_F_SCIENTIST = 297,
	SFX_FE_ACTING_M_TEENHORROR = 298,
	SFX_FE_ACTING_F_SMARINE = 299,
	SFX_FE_ACTING_CHEERLEADER = 300,
	SFX_FE_ACTING_INSECTMUTANT = 301,
	SFX_FE_ACTING_FEMCOP = 302,
	SFX_FE_ACTING_PILLAR = 303,
	SFX_FE_ACTING_TEETH = 304,
	SFX_FE_ACTING_FEMCYBORG = 305,
	SFX_FE_ACTING_FEMZOMBIE = 306,
	SFX_FE_ACTING_SPLITTER2 = 307,
	SFX_FE_ACTING_TUXEDO = 308,
	SFX_FE_ACTING_FEMSWAT = 309,
	SFX_FE_ACTING_VEILMASK = 310,
	SFX_FE_ACTING_PRIESTMUTANT = 311,
	SFX_FE_ACTING_FEMALIEN = 312,
	SFX_FE_ACTING_SPLITTER1 = 313,
	SFX_FE_ACTING_GINGER = 314,
	SFX_FE_ACTING_BADASS = 315,
	SFX_FE_ACTING_WAITER = 316,
	SFX_FE_ACTING_FLOAT = 317,
	SFX_FE_ACTING_BUNNY = 318,
	SFX_SWAYS_ANNOUNCE01 = 319,
	SFX_SWAYS_ANNOUNCE02 = 320,
	SFX_SWAYS_ANNOUNCE03 = 321,
	SFX_SWAYS_ANNOUNCE04 = 322,
	SFX_MALL_ANNOUNCE01 = 323,
	SFX_MALL_ANNOUNCE02 = 324,
	SFX_MALL_ANNOUNCE03 = 325,
	SFX_MALL_ANNOUNCE04 = 326,
	SFX_GRAVEYARD_ANNOUNCE01 = 327,
	SFX_GRAVEYARD_ANNOUNCE02 = 328,
	SFX_GRAVEYARD_ANNOUNCE03 = 329,
	SFX_GRAVEYARD_ANNOUNCE04 = 330,
	SFX_WARZONE01 = 331,
	SFX_WARZONE02 = 332,
	SFX_WARZONE03 = 333,
	SFX_WARZONE04 = 334,
	SFX_COMPOUND01 = 335,
	SFX_COMPOUND02 = 336,
	SFX_STREETS_SIREN01 = 337,
	SFX_STREETS_SIREN02 = 338,
	SFX_BULLETHIT_WOOD01 = 339,
	SFX_BULLETHIT_WOOD02 = 340,
	SFX_BULLETHIT_STONE01 = 341,
	SFX_BULLETHIT_TILE01 = 342,
	SFX_BULLETHIT_PAPER01 = 343,
	SFX_BULLETHIT_PAPER02 = 344,
	SFX_BULLETHIT_GLASS01 = 345,
	SFX_BULLETHIT_GLASS02 = 346,
	SFX_BULLETHIT_WATER01 = 347,
	SFX_BULLETHIT_WATER02 = 348,
	SFX_BULLETHIT_DIRT01 = 349,
	SFX_BULLETHIT_METAL01 = 350,
	SFX_BULLETHIT_METAL02 = 351,
	SFX_BULLETHIT_METAL03 = 352,
	SFX_BULLETHIT_METAL04 = 353,
	SFX_BULLETHIT_METAL05 = 354,
	SFX_BULLETHIT_METAL06 = 355,
	SFX_BULLETHIT_METAL07 = 356,
	SFX_BULLETHIT_CHAINFENCE = 357,
	SFX_BULLETHITBODY = 358,
	SFX_BULLETHIT_DUCK = 359,
	SFX_BULLETHIT_ROBOT01 = 360,
	SFX_BULLETHIT_ROBOT02 = 361,
	SFX_BULLETHIT_ROBOT03 = 362,
	SFX_BULLETHIT_MISC01 = 363,
	SFX_BULLETHIT_MISC02 = 364,
	SFX_BULLETHIT_MISC03 = 365,
	SFX_BULLETHIT_MISC04 = 366,
	SFX_BULLETHIT_MISC05 = 367,
	SFX_BULLETHIT_MISC06 = 368,
	SFX_BULLETHIT_MISC07 = 369,
	SFX_BULLETHIT_MISC08 = 370,
	SFX_BULLETHIT_MISC09 = 371,
	SFX_BULLETHIT_MISC10 = 372,
	SFX_ANGEL_HIT01 = 373,
	SFX_ANGEL_HIT02 = 374,
	SFX_ANGEL_HIT03 = 375,
	SFX_ANGEL_HIT04 = 376,
	SFX_ANGEL_HIT05 = 377,
	SFX_ANGEL_HIT06 = 378,
	SFX_ANGEL_HIT07 = 379,
	SFX_ANGEL_HIT08 = 380,
	SFX_ANGEL_HIT09 = 381,
	SFX_ANGEL_HIT10 = 382,
	SFX_ANGEL_HIT11 = 383,
	SFX_ANGEL_HIT12 = 384,
	SFX_ANGEL_HIT13 = 385,
	SFX_ANGEL_HIT14 = 386,
	SFX_ANGEL_HIT15 = 387,
	SFX_ANGEL_HIT16 = 388,
	SFX_ANGEL_HIT17 = 389,
	SFX_MRBIG_HIT01 = 390,
	SFX_MRBIG_HIT02 = 391,
	SFX_MRBIG_HIT03 = 392,
	SFX_MRBIG_HIT04 = 393,
	SFX_MRBIG_HIT05 = 394,
	SFX_MRBIG_HIT06 = 395,
	SFX_MRBIG_HIT07 = 396,
	SFX_MRBIG_HIT08 = 397,
	SFX_MRBIG_HIT09 = 398,
	SFX_MRBIG_HIT10 = 399,
	SFX_MRBIG_HIT11 = 400,
	SFX_MRBIG_HIT12 = 401,
	SFX_MRBIG_HIT13 = 402,
	SFX_MRBIG_HIT14 = 403,
	SFX_MRBIG_HIT15 = 404,
	SFX_FUTCOP_M_HIT01 = 405,
	SFX_FUTCOP_M_HIT02 = 406,
	SFX_FUTCOP_M_HIT03 = 407,
	SFX_FUTCOP_M_HIT04 = 408,
	SFX_FUTCOP_M_HIT05 = 409,
	SFX_FUTCOP_M_HIT06 = 410,
	SFX_FUTCOP_M_HIT07 = 411,
	SFX_FUTCOP_M_HIT08 = 412,
	SFX_FUTCOP_M_HIT09 = 413,
	SFX_FUTCOP_M_HIT10 = 414,
	SFX_FUTCOP_M_HIT11 = 415,
	SFX_FUTCOP_M_HIT12 = 416,
	SFX_FUTCOP_M_HIT13 = 417,
	SFX_FUTCOP_M_HIT14 = 418,
	SFX_FUTCOP_M_HIT15 = 419,
	SFX_GRAVEN_HIT01 = 420,
	SFX_GRAVEN_HIT02 = 421,
	SFX_GRAVEN_HIT03 = 422,
	SFX_GRAVEN_HIT04 = 423,
	SFX_GRAVEN_HIT05 = 424,
	SFX_GRAVEN_HIT06 = 425,
	SFX_GRAVEN_HIT07 = 426,
	SFX_GRAVEN_HIT08 = 427,
	SFX_GRAVEN_HIT09 = 428,
	SFX_GRAVEN_HIT10 = 429,
	SFX_GRAVEN_HIT11 = 430,
	SFX_GRAVEN_HIT12 = 431,
	SFX_GRAVEN_HIT13 = 432,
	SFX_GRAVEN_HIT14 = 433,
	SFX_GRAVEN_HIT15 = 434,
	SFX_LUMBERJACK_HIT01 = 435,
	SFX_LUMBERJACK_HIT02 = 436,
	SFX_LUMBERJACK_HIT03 = 437,
	SFX_LUMBERJACK_HIT04 = 438,
	SFX_LUMBERJACK_HIT05 = 439,
	SFX_LUMBERJACK_HIT06 = 440,
	SFX_LUMBERJACK_HIT07 = 441,
	SFX_LUMBERJACK_HIT08 = 442,
	SFX_LUMBERJACK_HIT09 = 443,
	SFX_LUMBERJACK_HIT10 = 444,
	SFX_LUMBERJACK_HIT11 = 445,
	SFX_LUMBERJACK_HIT12 = 446,
	SFX_LUMBERJACK_HIT13 = 447,
	SFX_LUMBERJACK_HIT14 = 448,
	SFX_LUMBERJACK_HIT15 = 449,
	SFX_CAPT_ASH_HIT01 = 450,
	SFX_CAPT_ASH_HIT02 = 451,
	SFX_CAPT_ASH_HIT03 = 452,
	SFX_CAPT_ASH_HIT04 = 453,
	SFX_CAPT_ASH_HIT05 = 454,
	SFX_CAPT_ASH_HIT06 = 455,
	SFX_CAPT_ASH_HIT07 = 456,
	SFX_CAPT_ASH_HIT08 = 457,
	SFX_CAPT_ASH_HIT09 = 458,
	SFX_CAPT_ASH_HIT10 = 459,
	SFX_CAPT_ASH_HIT11 = 460,
	SFX_CAPT_ASH_HIT12 = 461,
	SFX_CAPT_ASH_HIT13 = 462,
	SFX_CYBORG_BADASS_HIT01 = 463,
	SFX_CYBORG_BADASS_HIT02 = 464,
	SFX_CYBORG_BADASS_HIT03 = 465,
	SFX_CYBORG_BADASS_HIT04 = 466,
	SFX_CYBORG_BADASS_HIT05 = 467,
	SFX_CYBORG_BADASS_HIT06 = 468,
	SFX_CYBORG_BADASS_HIT07 = 469,
	SFX_CYBORG_BADASS_HIT08 = 470,
	SFX_CYBORG_BADASS_HIT09 = 471,
	SFX_CYBORG_BADASS_HIT10 = 472,
	SFX_CYBORG_BADASS_HIT11 = 473,
	SFX_CYBORG_BADASS_HIT12 = 474,
	SFX_CYBORG_BADASS_HIT13 = 475,
	SFX_LADY_JAYNE_HIT01 = 476,
	SFX_LADY_JAYNE_HIT02 = 477,
	SFX_LADY_JAYNE_HIT03 = 478,
	SFX_LADY_JAYNE_HIT04 = 479,
	SFX_LADY_JAYNE_HIT05 = 480,
	SFX_LADY_JAYNE_HIT06 = 481,
	SFX_LADY_JAYNE_HIT07 = 482,
	SFX_LADY_JAYNE_HIT08 = 483,
	SFX_LADY_JAYNE_HIT09 = 484,
	SFX_LADY_JAYNE_HIT10 = 485,
	SFX_LADY_JAYNE_HIT11 = 486,
	SFX_LADY_JAYNE_HIT12 = 487,
	SFX_LADY_JAYNE_HIT13 = 488,
	SFX_FINGERS_HIT01 = 489,
	SFX_FINGERS_HIT02 = 490,
	SFX_FINGERS_HIT03 = 491,
	SFX_FINGERS_HIT04 = 492,
	SFX_FINGERS_HIT05 = 493,
	SFX_FINGERS_HIT06 = 494,
	SFX_FINGERS_HIT07 = 495,
	SFX_FINGERS_HIT08 = 496,
	SFX_FINGERS_HIT09 = 497,
	SFX_FINGERS_HIT10 = 498,
	SFX_FINGERS_HIT11 = 499,
	SFX_FINGERS_HIT12 = 500,
	SFX_FINGERS_HIT13 = 501,
	SFX_FINGERS_HIT14 = 502,
	SFX_FINGERS_HIT15 = 503,
	SFX_SCIENTIST_F_HIT01 = 504,
	SFX_SCIENTIST_F_HIT02 = 505,
	SFX_SCIENTIST_F_HIT03 = 506,
	SFX_SCIENTIST_F_HIT04 = 507,
	SFX_SCIENTIST_F_HIT05 = 508,
	SFX_SCIENTIST_F_HIT06 = 509,
	SFX_SCIENTIST_F_HIT07 = 510,
	SFX_SCIENTIST_F_HIT08 = 511,
	SFX_SCIENTIST_F_HIT09 = 512,
	SFX_SCIENTIST_F_HIT10 = 513,
	SFX_SCIENTIST_F_HIT11 = 514,
	SFX_SCIENTIST_F_FLINCH = 515,
	SFX_SCIENTIST_F_DIE01 = 516,
	SFX_SCIENTIST_F_DIE02 = 517,
	SFX_SCIENTIST_F_DIE03 = 518,
	SFX_SCIENTIST_F_DIE04 = 519,
	SFX_FUTCOP_F_HIT01 = 520,
	SFX_FUTCOP_F_HIT02 = 521,
	SFX_FUTCOP_F_HIT03 = 522,
	SFX_FUTCOP_F_HIT04 = 523,
	SFX_FUTCOP_F_HIT05 = 524,
	SFX_FUTCOP_F_HIT06 = 525,
	SFX_FUTCOP_F_HIT07 = 526,
	SFX_FUTCOP_F_HIT08 = 527,
	SFX_FUTCOP_F_HIT09 = 528,
	SFX_FUTCOP_F_HIT10 = 529,
	SFX_FUTCOP_F_HIT11 = 530,
	SFX_FUTCOP_F_HIT12 = 531,
	SFX_STEWARDESS_HIT01 = 532,
	SFX_STEWARDESS_HIT02 = 533,
	SFX_STEWARDESS_HIT03 = 534,
	SFX_STEWARDESS_HIT04 = 535,
	SFX_STEWARDESS_HIT05 = 536,
	SFX_STEWARDESS_HIT06 = 537,
	SFX_STEWARDESS_HIT07 = 538,
	SFX_STEWARDESS_HIT08 = 539,
	SFX_STEWARDESS_HIT09 = 540,
	SFX_STEWARDESS_HIT10 = 541,
	SFX_STEWARDESS_HIT11 = 542,
	SFX_STEWARDESS_HIT12 = 543,
	SFX_STEWARDESS_HIT13 = 544,
	SFX_FEM_SWAT_HIT01 = 545,
	SFX_FEM_SWAT_HIT02 = 546,
	SFX_FEM_SWAT_HIT03 = 547,
	SFX_FEM_SWAT_HIT04 = 548,
	SFX_FEM_SWAT_HIT06 = 549,
	SFX_FEM_SWAT_HIT07 = 550,
	SFX_FEM_SWAT_HIT08 = 551,
	SFX_FEM_SWAT_HIT09 = 552,
	SFX_FEM_SWAT_HIT10 = 553,
	SFX_FEM_SWAT_HIT11 = 554,
	SFX_FEM_SWAT_HIT12 = 555,
	SFX_FEM_SWAT_HIT13 = 556,
	SFX_FEM_SWAT_HIT14 = 557,
	SFX_MUT_PRIEST_HIT01 = 558,
	SFX_MUT_PRIEST_HIT02 = 559,
	SFX_MUT_PRIEST_HIT03 = 560,
	SFX_MUT_PRIEST_HIT04 = 561,
	SFX_MUT_PRIEST_HIT05 = 562,
	SFX_MUT_PRIEST_HIT06 = 563,
	SFX_MUT_PRIEST_HIT07 = 564,
	SFX_MUT_PRIEST_HIT08 = 565,
	SFX_MUT_PRIEST_HIT09 = 566,
	SFX_MUT_PRIEST_HIT10 = 567,
	SFX_MUT_PRIEST_HIT11 = 568,
	SFX_MUT_PRIEST_HIT12 = 569,
	SFX_MUT_PRIEST_HIT13 = 570,
	SFX_MUT_PRIEST_HIT14 = 571,
	SFX_MUT_PRIEST_HIT15 = 572,
	SFX_MUT_PRIEST_HIT16 = 573,
	SFX_CHINE_WAITER_HIT01 = 574,
	SFX_CHINE_WAITER_HIT02 = 575,
	SFX_CHINE_WAITER_HIT03 = 576,
	SFX_CHINE_WAITER_HIT04 = 577,
	SFX_CHINE_WAITER_HIT05 = 578,
	SFX_CHINE_WAITER_HIT06 = 579,
	SFX_CHINE_WAITER_HIT07 = 580,
	SFX_CHINE_WAITER_HIT08 = 581,
	SFX_CHINE_WAITER_HIT09 = 582,
	SFX_CHINE_WAITER_HIT10 = 583,
	SFX_CHINE_WAITER_HIT11 = 584,
	SFX_CHINE_WAITER_HIT12 = 585,
	SFX_CHINE_WAITER_HIT13 = 586,
	SFX_CHINE_WAITER_HIT14 = 587,
	SFX_CHINE_WAITER_HIT15 = 588,
	SFX_CHINE_WAITER_HIT16 = 589,
	SFX_ZOMB_JACKET_HIT01 = 590,
	SFX_ZOMB_JACKET_HIT02 = 591,
	SFX_ZOMB_JACKET_HIT03 = 592,
	SFX_ZOMB_JACKET_HIT04 = 593,
	SFX_ZOMB_JACKET_HIT05 = 594,
	SFX_ZOMB_JACKET_HIT06 = 595,
	SFX_ZOMB_JACKET_HIT07 = 596,
	SFX_ZOMB_JACKET_HIT08 = 597,
	SFX_ZOMB_JACKET_HIT09 = 598,
	SFX_ZOMB_JACKET_HIT10 = 599,
	SFX_ZOMB_JACKET_HIT11 = 600,
	SFX_ZOMB_JACKET_HIT12 = 601,
	SFX_ZOMB_JACKET_HIT14 = 602,
	SFX_ZOMB_ROTTEN_HIT01 = 603,
	SFX_ZOMB_ROTTEN_HIT02 = 604,
	SFX_ZOMB_ROTTEN_HIT03 = 605,
	SFX_ZOMB_ROTTEN_HIT04 = 606,
	SFX_ZOMB_ROTTEN_HIT05 = 607,
	SFX_ZOMB_ROTTEN_HIT06 = 608,
	SFX_ZOMB_ROTTEN_HIT07 = 609,
	SFX_ZOMB_ROTTEN_HIT08 = 610,
	SFX_ZOMB_ROTTEN_HIT09 = 611,
	SFX_ZOMB_GENERIC_HIT01 = 612,
	SFX_ZOMB_GENERIC_HIT02 = 613,
	SFX_ZOMB_GENERIC_HIT03 = 614,
	SFX_ZOMB_GENERIC_HIT04 = 615,
	SFX_ZOMB_GENERIC_HIT05 = 616,
	SFX_ZOMB_GENERIC_HIT06 = 617,
	SFX_ZOMB_GENERIC_HIT07 = 618,
	SFX_ZOMB_GENERIC_HIT08 = 619,
	SFX_ZOMB_GENERIC_HIT09 = 620,
	SFX_ZOMB_GENERIC_HIT10 = 621,
	SFX_ZOMB_GENERIC_HIT11 = 622,
	SFX_ZOMB_GENERIC_HIT12 = 623,
	SFX_ZOMB_GENERIC_HIT13 = 624,
	SFX_ZOMB_GENERIC_HIT14 = 625,
	SFX_ZOMB_OLDMAN_HIT01 = 626,
	SFX_ZOMB_OLDMAN_HIT02 = 627,
	SFX_ZOMB_OLDMAN_HIT03 = 628,
	SFX_ZOMB_OLDMAN_HIT04 = 629,
	SFX_ZOMB_OLDMAN_HIT05 = 630,
	SFX_ZOMB_OLDMAN_HIT06 = 631,
	SFX_ZOMB_OLDMAN_HIT07 = 632,
	SFX_ZOMB_OLDMAN_HIT08 = 633,
	SFX_ZOMB_OLDMAN_HIT09 = 634,
	SFX_ZOMB_OLDMAN_HIT10 = 635,
	SFX_ZOMB_OLDMAN_HIT11 = 636,
	SFX_ZOMB_OLDMAN_HIT12 = 637,
	SFX_ZOMB_OLDMAN_HIT13 = 638,
	SFX_ZOMB_OLDMAN_HIT14 = 639,
	SFX_ZOMB_COP_HIT01 = 640,
	SFX_ZOMB_COP_HIT02 = 641,
	SFX_ZOMB_COP_HIT03 = 642,
	SFX_ZOMB_COP_HIT04 = 643,
	SFX_ZOMB_COP_HIT05 = 644,
	SFX_ZOMB_COP_HIT06 = 645,
	SFX_ZOMB_COP_HIT07 = 646,
	SFX_ZOMB_COP_HIT08 = 647,
	SFX_ZOMB_COP_HIT09 = 648,
	SFX_ZOMB_COP_HIT10 = 649,
	SFX_ZOMB_COP_HIT11 = 650,
	SFX_ZOMB_COP_HIT12 = 651,
	SFX_ZOMB_COP_HIT13 = 652,
	SFX_ZOMB_COP_HIT14 = 653,
	SFX_DUCKMAN_HIT01 = 654,
	SFX_DUCKMAN_HIT02 = 655,
	SFX_DUCKMAN_HIT03 = 656,
	SFX_DUCKMAN_HIT04 = 657,
	SFX_DUCKMAN_HIT05 = 658,
	SFX_DUCKMAN_HIT06 = 659,
	SFX_DUCKMAN_HIT07 = 660,
	SFX_DUCKMAN_HIT08 = 661,
	SFX_DUCKMAN_HIT09 = 662,
	SFX_DUCKMAN_HIT10 = 663,
	SFX_DUCKMAN_HIT11 = 664,
	SFX_DUCKMAN_HIT12 = 665,
	SFX_DUCKMAN_HIT13 = 666,
	SFX_DUCKMAN_HIT14 = 667,
	SFX_DUCKMAN_HIT15 = 668,
	SFX_DUCKMAN_HIT16 = 669,
	SFX_DUCKMAN_HIT17 = 670,
	SFX_COP_M_HIT01 = 671,
	SFX_COP_M_HIT02 = 672,
	SFX_COP_M_HIT03 = 673,
	SFX_COP_M_HIT04 = 674,
	SFX_COP_M_HIT05 = 675,
	SFX_COP_M_HIT06 = 676,
	SFX_COP_M_HIT07 = 677,
	SFX_COP_M_HIT08 = 678,
	SFX_COP_M_HIT09 = 679,
	SFX_COP_M_HIT10 = 680,
	SFX_COP_M_HIT11 = 681,
	SFX_COP_M_HIT12 = 682,
	SFX_COP_M_HIT13 = 683,
	SFX_COP_M_HIT14 = 684,
	SFX_COP_M_HIT15 = 685,
	SFX_COP_M_HIT16 = 686,
	SFX_COP_M_HIT17 = 687,
	SFX_BONUSBOY_HIT01 = 688,
	SFX_BONUSBOY_HIT02 = 689,
	SFX_BONUSBOY_HIT03 = 690,
	SFX_BONUSBOY_HIT04 = 691,
	SFX_BONUSBOY_HIT05 = 692,
	SFX_BONUSBOY_HIT06 = 693,
	SFX_BONUSBOY_HIT07 = 694,
	SFX_BONUSBOY_HIT08 = 695,
	SFX_BONUSBOY_HIT09 = 696,
	SFX_BONUSBOY_HIT10 = 697,
	SFX_BONUSBOY_HIT11 = 698,
	SFX_BONUSBOY_HIT12 = 699,
	SFX_BONUSBOY_HIT13 = 700,
	SFX_BONUSBOY_HIT14 = 701,
	SFX_CYB_TUX_HIT01 = 702,
	SFX_CYB_TUX_HIT02 = 703,
	SFX_CYB_TUX_HIT03 = 704,
	SFX_CYB_TUX_HIT04 = 705,
	SFX_CYB_TUX_HIT05 = 706,
	SFX_CYB_TUX_HIT06 = 707,
	SFX_CYB_TUX_HIT07 = 708,
	SFX_CYB_TUX_HIT08 = 709,
	SFX_CYB_TUX_HIT09 = 710,
	SFX_CYB_TUX_HIT10 = 711,
	SFX_CYB_TUX_HIT11 = 712,
	SFX_CYB_TUX_HIT12 = 713,
	SFX_CYB_TUX_HIT13 = 714,
	SFX_CYB_TUX_HIT14 = 715,
	SFX_MUT_INSECT_HIT01 = 716,
	SFX_MUT_INSECT_HIT02 = 717,
	SFX_MUT_INSECT_HIT03 = 718,
	SFX_MUT_INSECT_HIT04 = 719,
	SFX_MUT_INSECT_HIT05 = 720,
	SFX_MUT_INSECT_HIT06 = 721,
	SFX_MUT_INSECT_HIT07 = 722,
	SFX_MUT_INSECT_HIT08 = 723,
	SFX_MUT_INSECT_HIT09 = 724,
	SFX_MUT_INSECT_HIT10 = 725,
	SFX_MUT_INSECT_HIT11 = 726,
	SFX_MUT_INSECT_HIT12 = 727,
	SFX_GRETEL_HIT01 = 728,
	SFX_GRETEL_HIT02 = 729,
	SFX_GRETEL_HIT03 = 730,
	SFX_GRETEL_HIT04 = 731,
	SFX_GRETEL_HIT05 = 732,
	SFX_GRETEL_HIT06 = 733,
	SFX_GRETEL_HIT07 = 734,
	SFX_GRETEL_HIT08 = 735,
	SFX_GRETEL_HIT09 = 736,
	SFX_GRETEL_HIT10 = 737,
	SFX_GRETEL_HIT11 = 738,
	SFX_MUMMY_HIT01 = 739,
	SFX_MUMMY_HIT02 = 740,
	SFX_MUMMY_HIT03 = 741,
	SFX_MUMMY_HIT04 = 742,
	SFX_MUMMY_HIT05 = 743,
	SFX_MUMMY_HIT06 = 744,
	SFX_MUMMY_HIT07 = 745,
	SFX_MUMMY_HIT08 = 746,
	SFX_MUMMY_HIT09 = 747,
	SFX_MUMMY_HIT10 = 748,
	SFX_MUMMY_HIT11 = 749,
	SFX_MUMMY_HIT12 = 750,
	SFX_MUMMY_HIT13 = 751,
	SFX_MUMMY_ROAM01 = 752,
	SFX_MUMMY_ROAM02 = 753,
	SFX_RAVELLE_F_HIT01 = 754,
	SFX_RAVELLE_F_HIT02 = 755,
	SFX_RAVELLE_F_HIT03 = 756,
	SFX_RAVELLE_F_HIT04 = 757,
	SFX_RAVELLE_F_HIT05 = 758,
	SFX_RAVELLE_F_HIT06 = 759,
	SFX_RAVELLE_F_HIT07 = 760,
	SFX_RAVELLE_F_HIT08 = 761,
	SFX_RAVELLE_F_HIT09 = 762,
	SFX_RAVELLE_F_HIT10 = 763,
	SFX_RAVELLE_F_HIT11 = 764,
	SFX_RAVELLE_F_HIT12 = 765,
	SFX_RAVELLE_F_HIT13 = 766,
	SFX_RAVELLE_F_HIT14 = 767,
	SFX_ZOMBIEGIRL_HIT01 = 768,
	SFX_ZOMBIEGIRL_HIT02 = 769,
	SFX_ZOMBIEGIRL_HIT03 = 770,
	SFX_ZOMBIEGIRL_HIT04 = 771,
	SFX_ZOMBIEGIRL_HIT05 = 772,
	SFX_ZOMBIEGIRL_HIT06 = 773,
	SFX_ZOMBIEGIRL_HIT07 = 774,
	SFX_ZOMBIEGIRL_HIT08 = 775,
	SFX_ZOMBIEGIRL_HIT09 = 776,
	SFX_ZOMBIEGIRL_HIT10 = 777,
	SFX_ZOMBIEGIRL_ROAM01 = 778,
	SFX_CHEERLEADER_HIT01 = 779,
	SFX_CHEERLEADER_HIT02 = 780,
	SFX_CHEERLEADER_HIT03 = 781,
	SFX_CHEERLEADER_HIT04 = 782,
	SFX_CHEERLEADER_HIT05 = 783,
	SFX_CHEERLEADER_HIT06 = 784,
	SFX_CHEERLEADER_HIT07 = 785,
	SFX_CHEERLEADER_HIT08 = 786,
	SFX_CHEERLEADER_HIT09 = 787,
	SFX_CHEERLEADER_HIT10 = 788,
	SFX_CYB_SIAMESE_HIT01 = 789,
	SFX_CYB_SIAMESE_HIT02 = 790,
	SFX_CYB_SIAMESE_HIT03 = 791,
	SFX_CYB_SIAMESE_HIT04 = 792,
	SFX_CYB_SIAMESE_HIT05 = 793,
	SFX_CYB_SIAMESE_HIT06 = 794,
	SFX_CYB_SIAMESE_HIT07 = 795,
	SFX_CYB_SIAMESE_HIT08 = 796,
	SFX_CYB_SIAMESE_HIT09 = 797,
	SFX_CYB_SIAMESE_HIT10 = 798,
	SFX_CYB_SIAMESE_HIT11 = 799,
	SFX_CYB_SIAMESE_HIT12 = 800,
	SFX_CYB_SIAMESE_HIT13 = 801,
	SFX_CYB_SIAMESE_HIT14 = 802,
	SFX_RED_ALIEN_HIT01 = 803,
	SFX_RED_ALIEN_HIT02 = 804,
	SFX_RED_ALIEN_HIT03 = 805,
	SFX_RED_ALIEN_HIT04 = 806,
	SFX_RED_ALIEN_HIT05 = 807,
	SFX_RED_ALIEN_HIT06 = 808,
	SFX_RED_ALIEN_HIT07 = 809,
	SFX_RED_ALIEN_HIT08 = 810,
	SFX_RED_ALIEN_HIT09 = 811,
	SFX_RED_ALIEN_HIT10 = 812,
	SFX_RED_ALIEN_HIT11 = 813,
	SFX_RED_ALIEN_HIT12 = 814,
	SFX_GINGERBREAD_HIT01 = 815,
	SFX_GINGERBREAD_HIT02 = 816,
	SFX_GINGERBREAD_HIT03 = 817,
	SFX_GINGERBREAD_HIT04 = 818,
	SFX_GINGERBREAD_HIT05 = 819,
	SFX_GINGERBREAD_HIT06 = 820,
	SFX_GINGERBREAD_HIT07 = 821,
	SFX_GINGERBREAD_HIT08 = 822,
	SFX_GINGERBREAD_HIT09 = 823,
	SFX_GINGERBREAD_HIT10 = 824,
	SFX_GINGERBREAD_HIT11 = 825,
	SFX_GINGERBREAD_HIT12 = 826,
	SFX_GINGERBREAD_HIT13 = 827,
	SFX_GINGERBREAD_DIE01 = 828,
	SFX_GINGERBREAD_DIE02 = 829,
	SFX_GINGERBREAD_DIE03 = 830,
	SFX_GINGERBREAD_DIE04 = 831,
	SFX_GINGERBREAD_FLINCH = 832,
	SFX_PEEKABOO_HIT01 = 833,
	SFX_PEEKABOO_HIT02 = 834,
	SFX_PEEKABOO_HIT03 = 835,
	SFX_PEEKABOO_HIT04 = 836,
	SFX_PEEKABOO_HIT05 = 837,
	SFX_PEEKABOO_HIT06 = 838,
	SFX_PEEKABOO_HIT07 = 839,
	SFX_PEEKABOO_HIT08 = 840,
	SFX_PEEKABOO_HIT09 = 841,
	SFX_PEEKABOO_HIT10 = 842,
	SFX_PEEKABOO_HIT11 = 843,
	SFX_PEEKABOO_DIE02 = 844,
	SFX_PEEKABOO_DIE04 = 845,
	SFX_OLGA_HIT01 = 846,
	SFX_OLGA_HIT02 = 847,
	SFX_OLGA_HIT03 = 848,
	SFX_OLGA_HIT04 = 849,
	SFX_OLGA_HIT05 = 850,
	SFX_OLGA_HIT06 = 851,
	SFX_OLGA_HIT07 = 852,
	SFX_OLGA_HIT08 = 853,
	SFX_OLGA_HIT09 = 854,
	SFX_OLGA_HIT10 = 855,
	SFX_OLGA_HIT11 = 856,
	SFX_OLGA_HIT12 = 857,
	SFX_OLGA_HIT13 = 858,
	SFX_OLGA_HIT14 = 859,
	SFX_OLGA_FLINCH = 860,
	SFX_OLGA_DIE01 = 861,
	SFX_OLGA_DIE02 = 862,
	SFX_OLGA_DIE03 = 863,
	SFX_OLGA_DIE04 = 864,
	SFX_M_SWAT_HIT01 = 865,
	SFX_M_SWAT_HIT02 = 866,
	SFX_M_SWAT_HIT03 = 867,
	SFX_M_SWAT_HIT04 = 868,
	SFX_M_SWAT_HIT05 = 869,
	SFX_M_SWAT_HIT06 = 870,
	SFX_M_SWAT_HIT07 = 871,
	SFX_M_SWAT_HIT08 = 872,
	SFX_M_SWAT_HIT09 = 873,
	SFX_M_SWAT_HIT10 = 874,
	SFX_M_SWAT_HIT11 = 875,
	SFX_M_SWAT_HIT12 = 876,
	SFX_M_SWAT_HIT13 = 877,
	SFX_M_SWAT_FLINCH = 878,
	SFX_M_SWAT_DIE01 = 879,
	SFX_M_SWAT_DIE02 = 880,
	SFX_M_SWAT_DIE03 = 881,
	SFX_M_SWAT_DIE04 = 882,
	SFX_M_SWATMASK_HIT01 = 883,
	SFX_M_SWATMASK_HIT02 = 884,
	SFX_M_SWATMASK_HIT03 = 885,
	SFX_M_SWATMASK_HIT04 = 886,
	SFX_M_SWATMASK_HIT05 = 887,
	SFX_M_SWATMASK_HIT06 = 888,
	SFX_M_SWATMASK_HIT07 = 889,
	SFX_M_SWATMASK_HIT08 = 890,
	SFX_M_SWATMASK_FLINCH = 891,
	SFX_M_SWATMASK_DIE01 = 892,
	SFX_M_SWATMASK_DIE02 = 893,
	SFX_M_SWATMASK_DIE03 = 894,
	SFX_M_SWATMASK_DIE04 = 895,
	SFX_M_SUITHOOD_HIT01 = 896,
	SFX_M_SUITHOOD_HIT02 = 897,
	SFX_M_SUITHOOD_HIT03 = 898,
	SFX_M_SUITHOOD_HIT04 = 899,
	SFX_M_SUITHOOD_HIT05 = 900,
	SFX_M_SUITHOOD_HIT06 = 901,
	SFX_M_SUITHOOD_HIT07 = 902,
	SFX_M_SUITHOOD_HIT08 = 903,
	SFX_M_SUITHOOD_HIT09 = 904,
	SFX_M_SUITHOOD_HIT10 = 905,
	SFX_M_SUITHOOD_HIT11 = 906,
	SFX_M_SUITHOOD_HIT12 = 907,
	SFX_M_SUITHOOD_FLINCH = 908,
	SFX_M_SUITHOOD_DIE01 = 909,
	SFX_M_SUITHOOD_DIE02 = 910,
	SFX_M_SUITHOOD_DIE03 = 911,
	SFX_M_SUITHOOD_DIE04 = 912,
	SFX_F_CYBORG_HIT01 = 913,
	SFX_F_CYBORG_HIT02 = 914,
	SFX_F_CYBORG_HIT03 = 915,
	SFX_F_CYBORG_HIT04 = 916,
	SFX_F_CYBORG_HIT05 = 917,
	SFX_F_CYBORG_HIT06 = 918,
	SFX_F_CYBORG_HIT07 = 919,
	SFX_F_CYBORG_HIT08 = 920,
	SFX_F_CYBORG_HIT09 = 921,
	SFX_F_CYBORG_HIT10 = 922,
	SFX_F_CYBORG_HIT11 = 923,
	SFX_F_CYBORG_HIT12 = 924,
	SFX_F_CYBORG_HIT13 = 925,
	SFX_F_CYBORG_FLINCH = 926,
	SFX_F_CYBORG_DIE01 = 927,
	SFX_F_CYBORG_DIE02 = 928,
	SFX_F_CYBORG_DIE03 = 929,
	SFX_F_CYBORG_DIE04 = 930,
	SFX_M_CULTIST_HIT01 = 931,
	SFX_M_CULTIST_HIT02 = 932,
	SFX_M_CULTIST_HIT03 = 933,
	SFX_M_CULTIST_HIT04 = 934,
	SFX_M_CULTIST_HIT05 = 935,
	SFX_M_CULTIST_HIT06 = 936,
	SFX_M_CULTIST_HIT07 = 937,
	SFX_M_CULTIST_HIT08 = 938,
	SFX_M_CULTIST_HIT09 = 939,
	SFX_M_CULTIST_FLINCH = 940,
	SFX_M_CULTIST_DIE01 = 941,
	SFX_M_CULTIST_DIE02 = 942,
	SFX_M_CULTIST_DIE03 = 943,
	SFX_M_CULTIST_DIE04 = 944,
	SFX_F_PRIESTESS_HIT01 = 945,
	SFX_F_PRIESTESS_HIT02 = 946,
	SFX_F_PRIESTESS_HIT03 = 947,
	SFX_F_PRIESTESS_HIT04 = 948,
	SFX_F_PRIESTESS_HIT05 = 949,
	SFX_F_PRIESTESS_HIT06 = 950,
	SFX_F_PRIESTESS_HIT07 = 951,
	SFX_F_PRIESTESS_HIT08 = 952,
	SFX_F_PRIESTESS_HIT09 = 953,
	SFX_F_PRIESTESS_FLINCH = 954,
	SFX_F_PRIESTESS_DIE01 = 955,
	SFX_F_PRIESTESS_DIE02 = 956,
	SFX_F_PRIESTESS_DIE03 = 957,
	SFX_F_PRIESTESS_DIE04 = 958,
	SFX_F_ALIEN_HIT01 = 959,
	SFX_F_ALIEN_HIT02 = 960,
	SFX_F_ALIEN_HIT03 = 961,
	SFX_F_ALIEN_HIT04 = 962,
	SFX_F_ALIEN_HIT05 = 963,
	SFX_F_ALIEN_HIT06 = 964,
	SFX_F_ALIEN_HIT07 = 965,
	SFX_F_ALIEN_HIT08 = 966,
	SFX_F_ALIEN_HIT09 = 967,
	SFX_F_ALIEN_HIT10 = 968,
	SFX_F_ALIEN_FLINCH = 969,
	SFX_F_ALIEN_DIE01 = 970,
	SFX_F_ALIEN_DIE02 = 971,
	SFX_F_ALIEN_DIE03 = 972,
	SFX_F_ALIEN_DIE04 = 973,
	SFX_M_ROBOT_HIT01 = 974,
	SFX_M_ROBOT_HIT02 = 975,
	SFX_M_ROBOT_HIT03 = 976,
	SFX_M_ROBOT_HIT04 = 977,
	SFX_M_ROBOT_HIT05 = 978,
	SFX_M_ROBOT_HIT06 = 979,
	SFX_M_ROBOT_HIT07 = 980,
	SFX_M_ROBOT_HIT08 = 981,
	SFX_M_ROBOT_HIT09 = 982,
	SFX_M_ROBOT_HIT10 = 983,
	SFX_M_ROBOT_HIT12 = 984,
	SFX_M_ROBOT_FLINCH = 985,
	SFX_M_ROBOT_DIE01 = 986,
	SFX_M_ROBOT_DIE02 = 987,
	SFX_M_ROBOT_DIE03 = 988,
	SFX_M_ROBOT_DIE04 = 989,
	SFX_M_CLEANER_HIT01 = 990,
	SFX_M_CLEANER_HIT02 = 991,
	SFX_M_CLEANER_HIT03 = 992,
	SFX_M_CLEANER_HIT04 = 993,
	SFX_M_CLEANER_HIT05 = 994,
	SFX_M_CLEANER_HIT06 = 995,
	SFX_M_CLEANER_HIT07 = 996,
	SFX_M_CLEANER_HIT08 = 997,
	SFX_M_CLEANER_HIT09 = 998,
	SFX_M_CLEANER_HIT10 = 999,
	SFX_M_CLEANER_HIT11 = 1000,
	SFX_M_CLEANER_FLINCH = 1001,
	SFX_M_CLEANER_DIE01 = 1002,
	SFX_M_CLEANER_DIE02 = 1003,
	SFX_M_CLEANER_DIE03 = 1004,
	SFX_M_CLEANER_DIE04 = 1005,
	SFX_M_COOK_HIT01 = 1006,
	SFX_M_COOK_HIT02 = 1007,
	SFX_M_COOK_HIT03 = 1008,
	SFX_M_COOK_HIT04 = 1009,
	SFX_M_COOK_HIT05 = 1010,
	SFX_M_COOK_HIT06 = 1011,
	SFX_M_COOK_HIT07 = 1012,
	SFX_M_COOK_HIT08 = 1013,
	SFX_M_COOK_HIT09 = 1014,
	SFX_M_COOK_HIT10 = 1015,
	SFX_M_COOK_FLINCH = 1016,
	SFX_M_COOK_DIE02 = 1017,
	SFX_M_COOK_DIE03 = 1018,
	SFX_M_COOK_DIE04 = 1019,
	SFX_ROBOFISH_HIT01 = 1020,
	SFX_ROBOFISH_HIT02 = 1021,
	SFX_ROBOFISH_HIT03 = 1022,
	SFX_ROBOFISH_HIT05 = 1023,
	SFX_ROBOFISH_HIT06 = 1024,
	SFX_ROBOFISH_HIT07 = 1025,
	SFX_ROBOFISH_HIT08 = 1026,
	SFX_ROBOFISH_HIT09 = 1027,
	SFX_ROBOFISH_HIT11 = 1028,
	SFX_ROBOFISH_HIT12 = 1029,
	SFX_ROBOFISH_HIT13 = 1030,
	SFX_ROBOFISH_HIT14 = 1031,
	SFX_ROBOFISH_HIT15 = 1032,
	SFX_ROBOFISH_FLINCH = 1033,
	SFX_ROBOFISH_DIE01 = 1034,
	SFX_ROBOFISH_DIE02 = 1035,
	SFX_ROBOFISH_DIE03 = 1036,
	SFX_ROBOFISH_DIE04 = 1037,
	SFX_FLOATY_HIT01 = 1038,
	SFX_FLOATY_HIT02 = 1039,
	SFX_FLOATY_HIT03 = 1040,
	SFX_FLOATY_HIT04 = 1041,
	SFX_FLOATY_HIT05 = 1042,
	SFX_FLOATY_HIT06 = 1043,
	SFX_FLOATY_HIT07 = 1044,
	SFX_FLOATY_HIT08 = 1045,
	SFX_FLOATY_HIT09 = 1046,
	SFX_FLOATY_FLINCH = 1047,
	SFX_FLOATY_DIE01 = 1048,
	SFX_FLOATY_DIE02 = 1049,
	SFX_FLOATY_DIE03 = 1050,
	SFX_FLOATY_DIE04 = 1051,
	SFX_GREENIE_HIT01 = 1052,
	SFX_GREENIE_HIT02 = 1053,
	SFX_GREENIE_HIT03 = 1054,
	SFX_GREENIE_HIT04 = 1055,
	SFX_GREENIE_HIT05 = 1056,
	SFX_GREENIE_HIT06 = 1057,
	SFX_GREENIE_HIT07 = 1058,
	SFX_GREENIE_HIT08 = 1059,
	SFX_GREENIE_HIT09 = 1060,
	SFX_GREENIE_FLINCH = 1061,
	SFX_GREENIE_DIE01 = 1062,
	SFX_GREENIE_DIE02 = 1063,
	SFX_GREENIE_DIE03 = 1064,
	SFX_GREENIE_DIE04 = 1065,
	SFX_BUNNY_HIT01 = 1066,
	SFX_BUNNY_HIT02 = 1067,
	SFX_BUNNY_HIT03 = 1068,
	SFX_BUNNY_HIT04 = 1069,
	SFX_BUNNY_HIT05 = 1070,
	SFX_BUNNY_HIT06 = 1071,
	SFX_BUNNY_HIT07 = 1072,
	SFX_BUNNY_HIT08 = 1073,
	SFX_BUNNY_HIT09 = 1074,
	SFX_BUNNY_FLINCH = 1075,
	SFX_BUNNY_DIE01 = 1076,
	SFX_BUNNY_DIE02 = 1077,
	SFX_BUNNY_DIE03 = 1078,
	SFX_BUNNY_DIE04 = 1079,
	SFX_TIMESPLITTER_HIT01 = 1080,
	SFX_TIMESPLITTER_HIT02 = 1081,
	SFX_TIMESPLITTER_HIT03 = 1082,
	SFX_TIMESPLITTER_HIT04 = 1083,
	SFX_TIMESPLITTER_HIT05 = 1084,
	SFX_TIMESPLITTER_HIT06 = 1085,
	SFX_TIMESPLITTER_HIT07 = 1086,
	SFX_TIMESPLITTER_HIT08 = 1087,
	SFX_TIMESPLITTER_HIT09 = 1088,
	SFX_TIMESPLITTER_FLINCH = 1089,
	SFX_TIMESPLITTER_DIE01 = 1090,
	SFX_TIMESPLITTER_DIE02 = 1091,
	SFX_TIMESPLITTER_DIE03 = 1092,
	SFX_TIMESPLITTER_DIE04 = 1093,
	SFX_MALE_SMARINE_HIT01 = 1094,
	SFX_MALE_SMARINE_HIT02 = 1095,
	SFX_MALE_SMARINE_HIT03 = 1096,
	SFX_MALE_SMARINE_HIT04 = 1097,
	SFX_MALE_SMARINE_HIT05 = 1098,
	SFX_MALE_SMARINE_HIT06 = 1099,
	SFX_MALE_SMARINE_HIT07 = 1100,
	SFX_MALE_SMARINE_HIT08 = 1101,
	SFX_MALE_SMARINE_HIT09 = 1102,
	SFX_MALE_SMARINE_HIT10 = 1103,
	SFX_MALE_SMARINE_FLINCH = 1104,
	SFX_MALE_SMARINE_DIE01 = 1105,
	SFX_MALE_SMARINE_DIE02 = 1106,
	SFX_MALE_SMARINE_DIE03 = 1107,
	SFX_MALE_SMARINE_DIE04 = 1108,
	SFX_FEMALE_COP_HIT01 = 1109,
	SFX_FEMALE_COP_HIT02 = 1110,
	SFX_FEMALE_COP_HIT03 = 1111,
	SFX_FEMALE_COP_HIT04 = 1112,
	SFX_FEMALE_COP_HIT05 = 1113,
	SFX_FEMALE_COP_HIT06 = 1114,
	SFX_FEMALE_COP_HIT07 = 1115,
	SFX_FEMALE_COP_HIT08 = 1116,
	SFX_FEMALE_COP_HIT09 = 1117,
	SFX_FEMALE_COP_HIT10 = 1118,
	SFX_FEMALE_COP_FLINCH = 1119,
	SFX_FEMALE_COP_DIE01 = 1120,
	SFX_FEMALE_COP_DIE02 = 1121,
	SFX_FEMALE_COP_DIE03 = 1122,
	SFX_FEMALE_COP_DIE04 = 1123,
	SFX_FEMALE_COP_DIE05 = 1124,
	SFX_FEMALE_COP_DIE06 = 1125,
	SFX_PILLAR_ALIEN_HIT01 = 1126,
	SFX_PILLAR_ALIEN_HIT02 = 1127,
	SFX_PILLAR_ALIEN_HIT03 = 1128,
	SFX_PILLAR_ALIEN_HIT04 = 1129,
	SFX_PILLAR_ALIEN_HIT05 = 1130,
	SFX_PILLAR_ALIEN_HIT06 = 1131,
	SFX_PILLAR_ALIEN_FLINCH = 1132,
	SFX_PILLAR_ALIEN_DIE01 = 1133,
	SFX_PILLAR_ALIEN_DIE02 = 1134,
	SFX_PILLAR_ALIEN_DIE03 = 1135,
	SFX_PILLAR_ALIEN_DIE04 = 1136,
	SFX_PILLAR_ALIEN_DIE05 = 1137,
	SFX_PILLAR_ALIEN_DIE06 = 1138,
	SFX_M_GASMASK1_HIT01 = 1139,
	SFX_M_GASMASK1_HIT02 = 1140,
	SFX_M_GASMASK1_HIT03 = 1141,
	SFX_M_GASMASK1_HIT04 = 1142,
	SFX_M_GASMASK1_HIT05 = 1143,
	SFX_M_GASMASK1_HIT06 = 1144,
	SFX_M_GASMASK1_HIT07 = 1145,
	SFX_M_GASMASK1_HIT08 = 1146,
	SFX_M_GASMASK1_FLINCH = 1147,
	SFX_M_GASMASK1_DIE01 = 1148,
	SFX_M_GASMASK1_DIE02 = 1149,
	SFX_M_GASMASK1_DIE03 = 1150,
	SFX_M_GASMASK1_DIE04 = 1151,
	SFX_M_GASMASK1_DIE05 = 1152,
	SFX_M_GASMASK1_DIE06 = 1153,
	SFX_F_SOLDIER_HIT01 = 1154,
	SFX_F_SOLDIER_HIT02 = 1155,
	SFX_F_SOLDIER_HIT03 = 1156,
	SFX_F_SOLDIER_HIT04 = 1157,
	SFX_F_SOLDIER_HIT05 = 1158,
	SFX_F_SOLDIER_HIT06 = 1159,
	SFX_F_SOLDIER_HIT07 = 1160,
	SFX_F_SOLDIER_DIE01 = 1161,
	SFX_F_SOLDIER_DIE02 = 1162,
	SFX_F_SOLDIER_DIE03 = 1163,
	SFX_F_SOLDIER_DIE04 = 1164,
	SFX_F_SOLDIER_DIE05 = 1165,
	SFX_F_SOLDIER_DIE06 = 1166,
	SFX_M_GASMASK2_HIT01 = 1167,
	SFX_M_GASMASK2_HIT02 = 1168,
	SFX_M_GASMASK2_HIT03 = 1169,
	SFX_M_GASMASK2_HIT04 = 1170,
	SFX_M_GASMASK2_HIT05 = 1171,
	SFX_M_GASMASK2_HIT06 = 1172,
	SFX_M_GASMASK2_HIT07 = 1173,
	SFX_M_GASMASK2_HIT08 = 1174,
	SFX_M_GASMASK2_DIE01 = 1175,
	SFX_M_GASMASK2_DIE02 = 1176,
	SFX_M_GASMASK2_DIE03 = 1177,
	SFX_M_GASMASK2_DIE04 = 1178,
	SFX_M_GASMASK2_DIE05 = 1179,
	SFX_M_GASMASK2_DIE06 = 1180,
	SFX_B_MONKEY_HIT01 = 1181,
	SFX_B_MONKEY_HIT02 = 1182,
	SFX_B_MONKEY_HIT03 = 1183,
	SFX_B_MONKEY_HIT04 = 1184,
	SFX_B_MONKEY_HIT05 = 1185,
	SFX_B_MONKEY_HIT06 = 1186,
	SFX_B_MONKEY_HIT07 = 1187,
	SFX_B_MONKEY_HIT08 = 1188,
	SFX_B_MONKEY_HIT09 = 1189,
	SFX_B_MONKEY_DIE01 = 1190,
	SFX_B_MONKEY_DIE02 = 1191,
	SFX_B_MONKEY_DIE03 = 1192,
	SFX_B_MONKEY_DIE04 = 1193,
	SFX_B_MONKEY_DIE05 = 1194,
	SFX_B_MONKEY_DIE06 = 1195,
	SFX_F_SKINNY_HOOER_HIT01 = 1196,
	SFX_F_SKINNY_HOOER_HIT02 = 1197,
	SFX_F_SKINNY_HOOER_HIT03 = 1198,
	SFX_F_SKINNY_HOOER_HIT04 = 1199,
	SFX_F_SKINNY_HOOER_HIT05 = 1200,
	SFX_F_SKINNY_HOOER_HIT06 = 1201,
	SFX_F_SKINNY_HOOER_DIE01 = 1202,
	SFX_F_SKINNY_HOOER_DIE02 = 1203,
	SFX_F_SKINNY_HOOER_DIE03 = 1204,
	SFX_F_SKINNY_HOOER_DIE04 = 1205,
	SFX_F_SKINNY_HOOER_DIE05 = 1206,
	SFX_F_SKINNY_HOOER_DIE06 = 1207,
	SFX_M_GASMASK_ZOMBIE_HIT01 = 1208,
	SFX_M_GASMASK_ZOMBIE_HIT02 = 1209,
	SFX_M_GASMASK_ZOMBIE_HIT03 = 1210,
	SFX_M_GASMASK_ZOMBIE_HIT05 = 1211,
	SFX_M_GASMASK_ZOMBIE_HIT06 = 1212,
	SFX_M_GASMASK_ZOMBIE_HIT07 = 1213,
	SFX_M_GASMASK_ZOMBIE_HIT08 = 1214,
	SFX_M_GASMASK_ZOMBIE_DIE01 = 1215,
	SFX_M_GASMASK_ZOMBIE_DIE02 = 1216,
	SFX_M_GASMASK_ZOMBIE_DIE03 = 1217,
	SFX_M_GASMASK_ZOMBIE_DIE04 = 1218,
	SFX_M_GASMASK_ZOMBIE_DIE05 = 1219,
	SFX_M_GASMASK_ZOMBIE_DIE06 = 1220,
	SFX_M_SOLDIER_ZOMBIE_HIT01 = 1221,
	SFX_M_SOLDIER_ZOMBIE_HIT02 = 1222,
	SFX_M_SOLDIER_ZOMBIE_HIT03 = 1223,
	SFX_M_SOLDIER_ZOMBIE_HIT04 = 1224,
	SFX_M_SOLDIER_ZOMBIE_HIT05 = 1225,
	SFX_M_SOLDIER_ZOMBIE_HIT06 = 1226,
	SFX_M_SOLDIER_ZOMBIE_HIT07 = 1227,
	SFX_M_SOLDIER_ZOMBIE_DIE01 = 1228,
	SFX_M_SOLDIER_ZOMBIE_DIE02 = 1229,
	SFX_M_SOLDIER_ZOMBIE_DIE03 = 1230,
	SFX_M_SOLDIER_ZOMBIE_DIE04 = 1231,
	SFX_M_SOLDIER_ZOMBIE_DIE05 = 1232,
	SFX_M_SOLDIER_ZOMBIE_DIE06 = 1233,
	SFX_WOOD_GOLEM_HIT01 = 1234,
	SFX_WOOD_GOLEM_HIT02 = 1235,
	SFX_WOOD_GOLEM_HIT03 = 1236,
	SFX_WOOD_GOLEM_HIT04 = 1237,
	SFX_WOOD_GOLEM_HIT05 = 1238,
	SFX_WOOD_GOLEM_HIT06 = 1239,
	SFX_WOOD_GOLEM_DIE01 = 1240,
	SFX_WOOD_GOLEM_DIE02 = 1241,
	SFX_WOOD_GOLEM_DIE03 = 1242,
	SFX_WOOD_GOLEM_DIE04 = 1243,
	SFX_WOOD_GOLEM_DIE05 = 1244,
	SFX_WOOD_GOLEM_DIE06 = 1245,
	SFX_F_JUNGLE_QUEEN_HIT01 = 1246,
	SFX_F_JUNGLE_QUEEN_HIT02 = 1247,
	SFX_F_JUNGLE_QUEEN_HIT03 = 1248,
	SFX_F_JUNGLE_QUEEN_HIT04 = 1249,
	SFX_F_JUNGLE_QUEEN_HIT05 = 1250,
	SFX_F_JUNGLE_QUEEN_HIT06 = 1251,
	SFX_F_JUNGLE_QUEEN_DIE01 = 1252,
	SFX_F_JUNGLE_QUEEN_DIE02 = 1253,
	SFX_F_JUNGLE_QUEEN_DIE03 = 1254,
	SFX_F_JUNGLE_QUEEN_DIE04 = 1255,
	SFX_F_JUNGLE_QUEEN_DIE05 = 1256,
	SFX_F_JUNGLE_QUEEN_DIE06 = 1257,
	SFX_F_WITCH_HIT01 = 1258,
	SFX_F_WITCH_HIT02 = 1259,
	SFX_F_WITCH_HIT03 = 1260,
	SFX_F_WITCH_HIT04 = 1261,
	SFX_F_WITCH_HIT05 = 1262,
	SFX_F_WITCH_HIT06 = 1263,
	SFX_F_WITCH_DIE01 = 1264,
	SFX_F_WITCH_DIE02 = 1265,
	SFX_F_WITCH_DIE03 = 1266,
	SFX_F_WITCH_DIE04 = 1267,
	SFX_F_WITCH_DIE05 = 1268,
	SFX_F_WITCH_DIE06 = 1269,
	SFX_M_CURTAINS_COWBOY_HIT01 = 1270,
	SFX_M_CURTAINS_COWBOY_HIT02 = 1271,
	SFX_M_CURTAINS_COWBOY_HIT03 = 1272,
	SFX_M_CURTAINS_COWBOY_HIT04 = 1273,
	SFX_M_CURTAINS_COWBOY_HIT05 = 1274,
	SFX_M_CURTAINS_COWBOY_HIT06 = 1275,
	SFX_M_CURTAINS_COWBOY_DIE01 = 1276,
	SFX_M_CURTAINS_COWBOY_DIE02 = 1277,
	SFX_M_CURTAINS_COWBOY_DIE03 = 1278,
	SFX_M_CURTAINS_COWBOY_DIE04 = 1279,
	SFX_M_CURTAINS_COWBOY_DIE05 = 1280,
	SFX_M_CURTAINS_COWBOY_DIE06 = 1281,
	SFX_M_EVIL_COWBOY_HIT01 = 1282,
	SFX_M_EVIL_COWBOY_HIT02 = 1283,
	SFX_M_EVIL_COWBOY_HIT03 = 1284,
	SFX_M_EVIL_COWBOY_HIT04 = 1285,
	SFX_M_EVIL_COWBOY_HIT05 = 1286,
	SFX_M_EVIL_COWBOY_HIT06 = 1287,
	SFX_M_EVIL_COWBOY_FLINCH = 1288,
	SFX_M_EVIL_COWBOY_DIE01 = 1289,
	SFX_M_EVIL_COWBOY_DIE02 = 1290,
	SFX_M_EVIL_COWBOY_DIE03 = 1291,
	SFX_M_EVIL_COWBOY_DIE04 = 1292,
	SFX_M_EVIL_COWBOY_DIE05 = 1293,
	SFX_M_EVIL_COWBOY_DIE06 = 1294,
	SFX_F_ISLA_NADIR_HIT01 = 1295,
	SFX_F_ISLA_NADIR_HIT02 = 1296,
	SFX_F_ISLA_NADIR_HIT03 = 1297,
	SFX_F_ISLA_NADIR_HIT04 = 1298,
	SFX_F_ISLA_NADIR_HIT05 = 1299,
	SFX_F_ISLA_NADIR_HIT06 = 1300,
	SFX_F_ISLA_NADIR_HIT07 = 1301,
	SFX_F_ISLA_NADIR_HIT08 = 1302,
	SFX_F_ISLA_NADIR_HIT09 = 1303,
	SFX_F_ISLA_NADIR_HIT10 = 1304,
	SFX_F_ISLA_NADIR_FLINCH = 1305,
	SFX_F_ISLA_NADIR_DIE01 = 1306,
	SFX_F_ISLA_NADIR_DIE02 = 1307,
	SFX_F_ISLA_NADIR_DIE03 = 1308,
	SFX_F_ISLA_NADIR_DIE04 = 1309,
	SFX_F_ISLA_NADIR_DIE05 = 1310,
	SFX_F_ISLA_NADIR_DIE06 = 1311,
	SFX_F_SALOON_HOOER_HIT01 = 1312,
	SFX_F_SALOON_HOOER_HIT02 = 1313,
	SFX_F_SALOON_HOOER_HIT03 = 1314,
	SFX_F_SALOON_HOOER_HIT04 = 1315,
	SFX_F_SALOON_HOOER_HIT05 = 1316,
	SFX_F_SALOON_HOOER_HIT06 = 1317,
	SFX_F_SALOON_HOOER_DIE01 = 1318,
	SFX_F_SALOON_HOOER_DIE02 = 1319,
	SFX_F_SALOON_HOOER_DIE03 = 1320,
	SFX_F_SALOON_HOOER_DIE04 = 1321,
	SFX_F_SALOON_HOOER_DIE05 = 1322,
	SFX_F_SALOON_HOOER_DIE06 = 1323,
	SFX_F_JESTER_HIT01 = 1324,
	SFX_F_JESTER_HIT02 = 1325,
	SFX_F_JESTER_HIT03 = 1326,
	SFX_F_JESTER_HIT04 = 1327,
	SFX_F_JESTER_HIT05 = 1328,
	SFX_F_JESTER_HIT06 = 1329,
	SFX_F_JESTER_DIE01 = 1330,
	SFX_F_JESTER_DIE02 = 1331,
	SFX_F_JESTER_DIE03 = 1332,
	SFX_F_JESTER_DIE04 = 1333,
	SFX_F_JESTER_DIE05 = 1334,
	SFX_M_MINER_HIT01 = 1335,
	SFX_M_MINER_HIT02 = 1336,
	SFX_M_MINER_HIT03 = 1337,
	SFX_M_MINER_HIT04 = 1338,
	SFX_M_MINER_HIT05 = 1339,
	SFX_M_MINER_HIT06 = 1340,
	SFX_M_MINER_HIT07 = 1341,
	SFX_M_MINER_DIE01 = 1342,
	SFX_M_MINER_DIE02 = 1343,
	SFX_M_MINER_DIE03 = 1344,
	SFX_M_MINER_DIE04 = 1345,
	SFX_M_MINER_DIE05 = 1346,
	SFX_M_MINER_DIE06 = 1347,
	SFX_F_SOLDIER_ZOMBIE_HIT01 = 1348,
	SFX_F_SOLDIER_ZOMBIE_HIT02 = 1349,
	SFX_F_SOLDIER_ZOMBIE_HIT03 = 1350,
	SFX_F_SOLDIER_ZOMBIE_DIE01 = 1351,
	SFX_F_SOLDIER_ZOMBIE_DIE02 = 1352,
	SFX_F_SOLDIER_ZOMBIE_DIE03 = 1353,
	SFX_M_SIBERIA_LEAD_HIT01 = 1354,
	SFX_M_SIBERIA_LEAD_HIT02 = 1355,
	SFX_M_SIBERIA_LEAD_HIT03 = 1356,
	SFX_M_SIBERIA_LEAD_HIT04 = 1357,
	SFX_M_SIBERIA_LEAD_HIT05 = 1358,
	SFX_M_SIBERIA_LEAD_HIT06 = 1359,
	SFX_M_SIBERIA_LEAD_DIE01 = 1360,
	SFX_M_SIBERIA_LEAD_DIE02 = 1361,
	SFX_M_SIBERIA_LEAD_DIE03 = 1362,
	SFX_M_SIBERIA_LEAD_DIE04 = 1363,
	SFX_M_SIBERIA_LEAD_DIE05 = 1364,
	SFX_M_SIBERIA_LEAD_DIE06 = 1365,
	SFX_M_TOKYO_LEAD_HIT01 = 1366,
	SFX_M_TOKYO_LEAD_HIT02 = 1367,
	SFX_M_TOKYO_LEAD_HIT03 = 1368,
	SFX_M_TOKYO_LEAD_HIT04 = 1369,
	SFX_M_TOKYO_LEAD_HIT05 = 1370,
	SFX_M_TOKYO_LEAD_HIT06 = 1371,
	SFX_M_TOKYO_LEAD_HIT07 = 1372,
	SFX_M_TOKYO_LEAD_DIE01 = 1373,
	SFX_M_TOKYO_LEAD_DIE02 = 1374,
	SFX_M_TOKYO_LEAD_DIE03 = 1375,
	SFX_M_TOKYO_LEAD_DIE04 = 1376,
	SFX_M_TOKYO_LEAD_DIE05 = 1377,
	SFX_M_TOKYO_LEAD_DIE06 = 1378,
	SFX_REACTION00 = 1379,
	SFX_LASTSOUND = 1380,
	NUM_SOUNDS = 1381
};

struct sound_s { // 0x24
	/* 0x00 */ char *tooldesc;
	/* 0x04 */ char *filename;
	/* 0x08 */ s16 envelope[5];
	/* 0x12 */ u16 pitch;
	/* 0x14 */ u16 volume;
	/* 0x16 */ u16 flags;
	/* 0x18 */ int loadpos;
	/* 0x1c */ int memloadpos;
	/* 0x20 */ int size;
};

typedef sound_s sound;

enum {
	TUNE_NONE = 0,
	TUNE_GOTHIC_TILE = 1,
	TUNE_INDUSTRIAL_TILE = 2,
	TUNE_VIRTUAL_TILE = 3,
	TUNE_SPACEPORT_TILE = 4,
	TUNE_ALIEN_TILE = 5,
	TUNE_TOKYO_TILE = 6,
	TUNE_TSET_GTR = 7,
	TUNE_FRONTEND = 8,
	TUNE_MAPMAKER = 9,
	TUNE_AZTEC = 10,
	TUNE_FECKED = 11,
	TUNE_TOKYO = 12,
	TUNE_WESTERN = 13,
	TUNE_MISC1 = 14,
	TUNE_NOTREDAME = 15,
	TUNE_TS2TRANCE = 16,
	TUNE_MOBSTERS = 17,
	TUNE_MILITARY = 18,
	TUNE_ATOMSMASH = 19,
	TUNE_MEXICAN = 20,
	TUNE_ROBOT_MAIN = 21,
	TUNE_ROBOT_BOSS = 22,
	TUNE_HOSPITAL = 23,
	TUNE_MARTIAN = 24,
	TUNE_GAMEOVER_LOSE = 25,
	TUNE_SCRAPYARD = 26,
	TUNE_PLANET_X2 = 27,
	TUNE_SIBERIA = 28,
	TUNE_SIBERIA_BOSS = 29,
	TUNE_SIBERIA2 = 30,
	TUNE_CREDITS = 31,
	TUNE_CS_DAM1 = 32,
	TUNE_LOOPTEST = 33,
	TUNE_NUM = 34
};

enum {
	MCARD_RESULT_BUSY = 0,
	MCARD_RESULT_SUCCESS = 1,
	MCARD_RESULT_WRONG_SIZE = 2,
	MCARD_RESULT_FAILED = 3,
	MCARD_RESULT_CARD_REMOVED = 4,
	MCARD_RESULT_NO_FILE = 5,
	MCARD_RESULT_UNFORMATTED = 6,
	MCARD_RESULT_NO_SPACE = 7,
	MCARD_RESULT_CANCELED = 8,
	MCARD_RESULT_EXTRAOPTION = 9,
	MCARD_RESULT_NUM = 10
};

enum {
	MCARD_STATE_UNCHANGED = 0,
	MCARD_STATE_CHANGED_FORMATTED = 1,
	MCARD_STATE_CHANGED_UNFORMATTED = 2,
	MCARD_STATE_NO_CARD = 3
};

enum {
	CHECKCARD_VOID = 0,
	CHECKCARD_CHECK = 1,
	CHECKCARD_NOCARD = 2,
	CHECKCARD_NOTPS2 = 3,
	CHECKCARD_FORMATTED = 4,
	CHECKCARD_UNFORMATTED = 5
};

enum {
	GAMEDIR_1 = 0,
	GAMEDIR_2 = 1
};

struct memcarddata_s { // 0x4
	/* 0x0 */ u32 id;
	/* 0x4 */ u8 data[0];
};

typedef memcarddata_s memcarddata_t;

enum {
	MCSEQ_STATE_BUSY = -1,
	MCSEQ_STATE_MESSAGE = 0,
	MCSEQ_STATE_MESSAGE_BUT1 = 1,
	MCSEQ_STATE_MESSAGE_BUT2 = 2,
	MCSEQ_STATE_MESSAGE_BUT3 = 3,
	MCSEQ_STATE_MESSAGE_BUT4 = 4,
	MCSEQ_STATE_UNCHANGED = 5,
	MCSEQ_STATE_CHANGED_FORMATTED = 6,
	MCSEQ_STATE_CHANGED_UNFORMATTED = 7,
	MCSEQ_STATE_NO_CARD = 8,
	MCSEQ_STATE_USER = 9
};

enum {
	MCMSG_NOCARD = 0,
	MCMSG_NOCARDINSLOT = 1,
	MCMSG_UNFORMATTED = 2,
	MCMSG_LOADFAILED = 3,
	MCMSG_LOADCOMPLETED = 4,
	MCMSG_SAVEFAILED = 5,
	MCMSG_SAVEFAILEDOKBACK = 6,
	MCMSG_SAVECOMPLETED = 7,
	MCMSG_DELETEFAILED = 8,
	MCMSG_DELETECOMPLETED = 9,
	MCMSG_GAMEFILE1CORRUPT = 10,
	MCMSG_NOSPACEGAMEFILE1 = 11,
	MCMSG_NOSPACEGAMEFILE2 = 12,
	MCMSG_NUM = 13
};

enum {
	LETTER_FLAT = 0,
	LETTER_TTOP = 1,
	LETTER_TBOT = 2,
	LETTER_TMID = 3,
	LETTER_T = 4,
	LETTER_SMAL = 5,
	LETTER_STOP = 6,
	LETTER_SBOT = 7,
	LETTER_SMID = 8,
	LETTER_LITJ = 9,
	LETTER_SLOW = 10,
	NUM_LETTER_SHAPES = 11
};

enum {
	FONTSEL_FUTURE = 0,
	FONTSEL_CAPS = 1,
	FONTSEL_BOOK = 2,
	FONTSEL_BOOKLIGHT = 3,
	FONTSEL_NUM = 4
};

enum {
	FONT_FUTURE_SMALL = 0,
	FONT_FUTURE_NARROW = 1,
	FONT_FUTURE_SUBNORMAL = 2,
	FONT_FUTURE_NORMAL = 3,
	FONT_FUTURE_SEMI = 4,
	FONT_FUTURE_MEDIUM = 5,
	FONT_FUTURE_MEDBIG = 6,
	FONT_FUTURE_BIG = 7,
	FONT_BOOK_TINY = 8,
	FONT_BOOK_SMALL = 9,
	FONT_BOOK_NORMAL = 10,
	FONT_BOOK_BIG = 11,
	FONT_NUM = 12
};

struct letter_s { // 0xa
	/* 0x0 */ u16 l;
	/* 0x2 */ u16 t;
	/* 0x4 */ u16 r;
	/* 0x6 */ u16 b;
	/* 0x8 */ s8 yoffset;
};

typedef letter_s letter;

struct letter_extra { // 0xc
	/* 0x0 */ int leftshape;
	/* 0x4 */ int rightshape;
	/* 0x8 */ int offset;
};

typedef letter_extra letterextra;

struct fontsel_s { // 0x18
	/* 0x00 */ char *filename;
	/* 0x04 */ int fontLoadFlags;
	/* 0x08 */ letter *data;
	/* 0x0c */ int height;
	/* 0x10 */ int fixedwidth;
	/* 0x14 */ int texnum;
};

typedef fontsel_s fontsel;

struct fontStyle_s { // 0x1c
	/* 0x00 */ int fontSel;
	/* 0x04 */ boolean fixedWidth;
	/* 0x08 */ float scalex;
	/* 0x0c */ float scaley;
	/* 0x10 */ letterextra *extra;
	/* 0x14 */ int *grid;
	/* 0x18 */ int nonFixedExtraWidth;
};

typedef fontStyle_s fontStyle;

struct textSettings3D_s { // 0x14
	/* 0x00 */ float offsetx;
	/* 0x04 */ float offsety;
	/* 0x08 */ float factorx;
	/* 0x0c */ float factory;
	/* 0x10 */ float z;
};

typedef textSettings3D_s textSettings3D;

struct textfx_s { // 0x4
	/* 0x0 */ u32 rgba;
};

typedef textfx_s textfx;

enum {
	CAMMODE_GAMECAM = 0,
	CAMMODE_RESETTHIRDPERSONCHEAT = 1,
	CAMMODE_THIRDPERSONCHEAT = 2,
	CAMMODE_MOVEVIEW = 3,
	CAMMODE_RESETVIEWPROP = 4,
	CAMMODE_VIEWPROP = 5,
	CAMMODE_SHOWPROPBACK = 6,
	CAMMODE_FLEXIBLE = 7,
	CAMMODE_MATRIX1 = 8,
	CAMMODE_CUTSCENE = 9,
	CAMMODE_RESETFLYINTRO = 10,
	CAMMODE_FLYINTRO = 11,
	CAMMODE_MAX = 12
};

enum {
	CAMTYPE_FIRSTPERSON = 0,
	CAMTYPE_DEATHVIEW = 1,
	CAMTYPE_REMOTEGUN = 2,
	CAMTYPE_FIXED = 3,
	CAMTYPE_FIXEDFOLLOW = 4,
	CAMTYPE_MOVEFOLLOW = 5,
	CAMTYPE_FLY = 6,
	CAMTYPE_NUM = 7
};

enum {
	CAMDEF_FIRSTPERSON = 0,
	CAMDEF_DEATHVIEW = 1,
	CAMDEF_REMOTEGUN = 2
};

struct roomcalcdata_s { // 0xc
	/* 0x0 */ int level;
	/* 0x4 */ s16 scrmin[2];
	/* 0x8 */ s16 scrmax[2];
};

typedef roomcalcdata_s roomcalcdata;

struct CamDef_s { // 0x28
	/* 0x00 */ int Type;
	/* 0x04 */ float Min[3];
	/* 0x10 */ float Max[3];
	/* 0x1c */ float Offset[3];
};

typedef CamDef_s CamDef;

struct ViewDef_s { // 0xf00
	/* 0x000 */ mtx_u pm[2];
	/* 0x080 */ mtx_u mvm[2];
	/* 0x100 */ mtx_u mvpm[2];
	/* 0x180 */ mtx_u imvm[2];
	/* 0x200 */ int mnum;
	/* 0x204 */ mtx_u *perspmtx;
	/* 0x208 */ mtx_u *modelviewmtx;
	/* 0x20c */ mtx_u *modelviewperspmtx;
	/* 0x210 */ mtx_u *inv_modelviewmtx;
	/* 0x214 */ int num;
	/* 0x218 */ int type;
	/* 0x21c */ u32 flags;
	/* 0x220 */ int TexID;
	/* 0x224 */ window_t window;
	/* 0x268 */ float particleScale;
	/* 0x26c */ CamDef *pCam;
	/* 0x270 */ float pos[3];
	/* 0x27c */ int room;
	/* 0x280 */ int lastroom;
	/* 0x284 */ prop_s *attached;
	/* 0x288 */ prop_s *follow;
	/* 0x28c */ float lookat[3];
	/* 0x298 */ float lookdir[3];
	/* 0x2a4 */ float up[3];
	/* 0x2b0 */ float right[3];
	/* 0x2bc */ float cam1mfrustrumhalfheight;
	/* 0x2c0 */ float cam1mfrustrumhalfwidth;
	/* 0x2c4 */ float fovy;
	/* 0x2c8 */ float destfovy;
	/* 0x2cc */ float zoomfovy;
	/* 0x2d0 */ float minzoomfovy;
	/* 0x2d4 */ float maxzoomfovy;
	/* 0x2d8 */ float shaketime;
	/* 0x2dc */ float shakeintensity;
	/* 0x2e0 */ float recoilTranslateAmount;
	/* 0x2e4 */ float recoilTranslateDampening;
	/* 0x2e8 */ float recoilRotateAmount;
	/* 0x2ec */ float recoilRotateDampening;
	/* 0x2f0 */ roomcalcdata roomdata[201];
	/* 0xc5c */ int maxlevel;
	/* 0xc60 */ u8 roomVisibility[201];
	/* 0xd2c */ prop_s *skyprop;
	/* 0xd30 */ s16 numroomsdrawn;
	/* 0xd32 */ s16 numroomsdrawnactual;
	/* 0xd34 */ s16 roomsdrawn[225];
};

typedef ViewDef_s ViewDef;

struct flexcam_s { // 0x20
	/* 0x00 */ float campos[3];
	/* 0x0c */ float lookat[3];
	/* 0x18 */ float translationx;
	/* 0x1c */ float translationy;
};

typedef flexcam_s flexcam_t;

enum {
	NETGAME_NONE = 0,
	NETGAME_SERVER = 1,
	NETGAME_CLIENT = 2
};

enum {
	NETGAMETYPE_NONE = 0,
	NETGAMETYPE_ILINK = 1,
	NETGAMETYPE_INET = 2
};

struct menufxGeometryPoint_s { // 0x30
	/* 0x00 */ float pos[3];
	/* 0x0c */ float normalO[3];
	/* 0x18 */ float normal[3];
};

typedef menufxGeometryPoint_s menufxGeometryPoint;

struct menufxControlPointSet_s { // 0x3d0
	/* 0x000 */ int numControlPoints;
	/* 0x010 */ menufxGeometryPoint controlPoints[20];
};

typedef menufxControlPointSet_s menufxControlPointSet;

struct menufxGeometryEdge_s { // 0x14
	/* 0x00 */ menufxGeometryPoint *CP0;
	/* 0x04 */ menufxGeometryPoint *start;
	/* 0x08 */ menufxGeometryPoint *end;
	/* 0x0c */ menufxGeometryPoint *CP3;
	/* 0x10 */ int steps;
};

typedef menufxGeometryEdge_s menufxGeometryEdge;

struct menufxGeometrySurface_s { // 0x20
	/* 0x00 */ menufxGeometryEdge *edges[4];
	/* 0x10 */ boolean reverse[4];
};

typedef menufxGeometrySurface_s menufxGeometrySurface;

struct menufxGeometryBar_s { // 0x420
	/* 0x000 */ menufxGeometryPoint corners[8];
	/* 0x180 */ menufxGeometryEdge edges[12];
	/* 0x270 */ menufxGeometrySurface surfaces[6];
	/* 0x330 */ float xstart;
	/* 0x334 */ float xend;
	/* 0x338 */ float ystart;
	/* 0x33c */ float yend;
	/* 0x340 */ float middlepos;
	/* 0x344 */ float zstart;
	/* 0x348 */ float zend;
	/* 0x34c */ int type;
	/* 0x350 */ mtx_u matrixDl;
	/* 0x390 */ mtx_u matrixUcodeBuffer[2];
	/* 0x410 */ mtx_u *matrixUcode;
};

typedef menufxGeometryBar_s menufxGeometryBar;

struct menufxItemOption_s { // 0x14
	/* 0x00 */ u8 *text;
	/* 0x04 */ int flags;
	/* 0x08 */ int x;
	/* 0x0c */ int y;
	/* 0x10 */ float controlAlertTime;
};

typedef menufxItemOption_s menufxItemOption;

struct menufxItem_s { // 0x1cc
	/* 0x000 */ int font;
	/* 0x004 */ u8 *text;
	/* 0x008 */ int colorScheme;
	/* 0x00c */ int flags;
	/* 0x010 */ float timeHighlighted;
	/* 0x014 */ void (*select)(/* parameters unknown */);
	/* 0x018 */ int x;
	/* 0x01c */ int y;
	/* 0x020 */ int numOptions;
	/* 0x024 */ int currentOption;
	/* 0x028 */ menufxItemOption options[20];
	/* 0x1b8 */ void (*onChange)(/* parameters unknown */);
	/* 0x1bc */ int iconMiscTex;
	/* 0x1c0 */ float iconx;
	/* 0x1c4 */ menufxGeometryBar *bar;
	/* 0x1c8 */ float texty;
};

typedef menufxItem_s menufxItem;

struct menufxCurveData_s { // 0x20
	/* 0x00 */ float circleposx;
	/* 0x04 */ float circleposy;
	/* 0x08 */ float circleradiusx;
	/* 0x0c */ float circleradiusy;
	/* 0x10 */ float circleoutlineradiusx;
	/* 0x14 */ float circleoutlineradiusy;
	/* 0x18 */ int circleSteps;
	/* 0x1c */ float extrapolationChange;
};

typedef menufxCurveData_s menufxCurveData;

struct menufxColorScheme_s { // 0xc0
	/* 0x00 */ u32 titlefg[4];
	/* 0x10 */ u32 titlebg[4];
	/* 0x20 */ u32 normalfg[4];
	/* 0x30 */ u32 normalbg[4];
	/* 0x40 */ u32 highlightedfg[4];
	/* 0x50 */ u32 highlightedbg[4];
	/* 0x60 */ u32 disabledfg[4];
	/* 0x70 */ u32 disabledbg[4];
	/* 0x80 */ u32 normalarrow[4];
	/* 0x90 */ u32 highlightedarrow[4];
	/* 0xa0 */ u32 selectedarrow[4];
	/* 0xb0 */ u32 disabledarrow[4];
};

typedef menufxColorScheme_s menufxColorScheme;

enum {
	MENUFX_COLORS_IGM_FLOATING = 0,
	MENUFX_COLORS_IGM_NORMAL = 1,
	MENUFX_COLORS_IGM_CONTROLS = 2,
	MENUFX_COLORS_NUM = 3
};

struct pageinit_s { // 0x14
	/* 0x00 */ void (*tick)(/* parameters unknown */);
	/* 0x04 */ void (*draw_before)(/* parameters unknown */);
	/* 0x08 */ u16 initfocusid;
	/* 0x0a */ u16 pad;
	/* 0x0c */ void (*draw_after)(/* parameters unknown */);
	/* 0x10 */ void (*construct)(/* parameters unknown */);
};

typedef pageinit_s pageinit_t;

struct pagedef_s { // 0x7870
	/* 0x0000 */ boolean used;
	/* 0x0004 */ pageinit_t *init;
	/* 0x0008 */ u16 focusid;
	/* 0x000a */ u16 spare;
	/* 0x000c */ hitbox_s *boxes;
	/* 0x0010 */ int numboxes;
	/* 0x0014 */ int flags;
	/* 0x0018 */ float zoom;
	/* 0x001c */ float worldpos[3];
	/* 0x0028 */ int screenposx;
	/* 0x002c */ int screenposy;
	/* 0x0030 */ float scrolly;
	/* 0x0034 */ float scrollyTime;
	/* 0x0038 */ float scrollyDest;
	/* 0x003c */ float scrollyMove;
	/* 0x0040 */ float scrollyStep;
	/* 0x0044 */ int pageHeight;
	/* 0x0048 */ window_t window;
	/* 0x008c */ int numItems;
	/* 0x0090 */ menufxItem items[24][2];
	/* 0x56d0 */ int switchSelected[24];
	/* 0x5730 */ int oldSwitchSelected[24];
	/* 0x5790 */ float switchScalar[24];
	/* 0x57f0 */ int itemSelected;
	/* 0x57f4 */ float selectTime;
	/* 0x57f8 */ menufxCurveData *curveDataLH;
	/* 0x57fc */ menufxCurveData *curveDataRH;
	/* 0x5800 */ menufxGeometryBar geometryBars[6];
	/* 0x70c0 */ menufxControlPointSet controlPointSetLH;
	/* 0x7490 */ menufxControlPointSet controlPointSetRH;
	/* 0x7860 */ void (*left)(/* parameters unknown */);
	/* 0x7864 */ void (*right)(/* parameters unknown */);
};

typedef pagedef_s pagedef_t;

struct hitbox_s { // 0x18
	/* 0x00 */ u16 x;
	/* 0x02 */ u16 y;
	/* 0x04 */ u16 w;
	/* 0x06 */ u16 h;
	/* 0x08 */ u16 id;
	/* 0x0a */ u16 flags;
	/* 0x0c */ void (*draw)(/* parameters unknown */);
	/* 0x10 */ void *data;
	/* 0x14 */ void *data2;
};

typedef hitbox_s hitbox_t;

struct gvdisp_s { // 0x8
	/* 0x0 */ int value;
	/* 0x4 */ char *text;
};

typedef gvdisp_s gvdisp;

struct gamevar_s { // 0x28
	/* 0x00 */ int value;
	/* 0x04 */ int min;
	/* 0x08 */ int max;
	/* 0x0c */ int flags;
	/* 0x10 */ gvdisp *display;
	/* 0x14 */ void (*onChange)(/* parameters unknown */);
	/* 0x18 */ u8 *suffix;
	/* 0x1c */ int marginright;
	/* 0x20 */ int arrowleftofs;
	/* 0x24 */ int arrowrightofs;
};

typedef gamevar_s gamevar;

struct frontdef_s { // 0x38
	/* 0x00 */ int num;
	/* 0x04 */ pagedef_t *pagesArray;
	/* 0x08 */ pagedef_t *pages[3];
	/* 0x14 */ hitbox_t *boxes;
	/* 0x18 */ int flags;
	/* 0x1c */ int buttonhold;
	/* 0x20 */ int numpages;
	/* 0x24 */ pageinit_t *pagetoset;
	/* 0x28 */ int pagetosetnum;
	/* 0x2c */ fix_t mouse_x;
	/* 0x30 */ fix_t mouse_y;
	/* 0x34 */ void (*cursor_drawer)(/* parameters unknown */);
};

typedef frontdef_s frontdef_t;

typedef enum {
	btn_circle = 0,
	btn_cross = 1,
	btn_triangle = 2,
	btn_square = 3,
	btn_select = 4,
	btn_start = 5,
	numbuttons = 6
} e_button;

typedef enum {
	dpad_up = 0,
	dpad_down = 1,
	dpad_left = 2,
	dpad_right = 3
} dpad_button;

enum e_icon {
	icon_1 = 0,
	icon_2 = 1,
	icon_3 = 2,
	icon_right = 3,
	icon_left = 4,
	icon_top = 5,
	icon_bottom = 6,
	icon_mag = 7,
	icon_toselect = 8,
	icon_arrow = 9,
	icon_isotile = 10,
	icon_isotile2 = 11,
	icon_l1 = 12,
	icon_l2 = 13,
	icon_spot = 14,
	icon_arrowlamp = 15,
	icon_hand = 16,
	icon_star = 17,
	icon_on = 18,
	icon_off = 19,
	icon_trileft = 20,
	icon_triright = 21,
	icon_male = 22,
	icon_female = 23,
	icon_phase1 = 24,
	icon_phase12 = 35,
	icon_exclamationmark = 36,
	icon_editmodetile = 37,
	icon_editmodeitem = 38,
	icon_editmodelight = 39,
	icon_zoomviewgun = 40,
	icon_zoomviewammo = 41,
	icon_zoomviewbag = 42,
	icon_zoomviewstart = 43,
	icon_zoomviewhealth = 44,
	icon_zoomviewarmour = 45,
	icon_zoomviewkey = 46,
	icon_zoomviewpower = 47,
	icon_zoomviewtele = 48,
	icon_flag = 49,
	icon_arrowlamp2 = 50,
	icon_patrolmode1 = 51,
	icon_patrolmode2 = 52,
	icon_roundcorner = 53,
	icon_editmodepatrol = 54,
	icon_dir_south = 55,
	icon_dir_southwest = 56,
	icon_dir_west = 57,
	icon_dir_northwest = 58,
	icon_dir_north = 59,
	icon_dir_northeast = 60,
	icon_dir_east = 61,
	icon_dir_southeast = 62,
	icon_num = 63
};

enum {
	MISCTEX_NONE = -1,
	MISCTEX_CIRCLE = 0,
	MISCTEX_PAGEBAR = 1,
	MISCTEX_STDBUTTON_CIRCLE = 2,
	MISCTEX_STDBUTTON_CROSS = 3,
	MISCTEX_STDBUTTON_TRIANGLE = 4,
	MISCTEX_STDBUTTON_SQUARE = 5,
	MISCTEX_STDBUTTON_SELECT = 6,
	MISCTEX_BUTTONS = 7,
	MISCTEX_DPAD = 8,
	MISCTEX_CONTROLLER = 9,
	MISCTEX_CONTROLLERGLOW = 10,
	MISCTEX_CROSSHAIR_CIRCLE = 11,
	MISCTEX_CROSSHAIR_ARROW = 12,
	MISCTEX_CROSSHAIR_TRIANGLE = 13,
	MISCTEX_SCOPEEDGE = 14,
	MISCTEX_HUDBACK = 15,
	MISCTEX_RADAR = 16,
	MISCTEX_RADARBAR = 17,
	MISCTEX_RADARSPOT = 18,
	MISCTEX_HUDPAIN = 19,
	MISCTEX_KEYCARD = 20,
	MISCTEX_AMOUNTBAR = 21,
	MISCTEX_TS2LOGO = 22,
	MISCTEX_EIDOSLOGO = 23,
	MISCTEX_FRDLOGO = 24,
	MISCTEX_IGMTEX = 25,
	MISCTEX_OPTIONBAR = 26,
	MISCTEX_ARCOUTLINE = 27,
	MISCTEX_ARCGLOW = 28,
	MISCTEX_ARCBAR = 29,
	MISCTEX_ARCBACK = 30,
	MISCTEX_FADECIRCLE = 31,
	MISCTEX_NUM = 32
};

enum {
	STAT_KILLS = 0,
	STAT_KILLED = 1,
	STAT_SUICIDES = 2,
	STAT_KILLSOTHERS = 3,
	STAT_KILLEDOTHERS = 4,
	STAT_SUCCESIVEKILLS = 5,
	STAT_MAXMULTIKILL = 6,
	STAT_MAXREPEATKILL = 7,
	STAT_SHOTS = 8,
	STAT_HITS = 9,
	STAT_ACCURACY = 10,
	STAT_INACCURACY = 11,
	STAT_DEADHITS = 12,
	STAT_HEADHITS = 13,
	STAT_PUNCHES = 14,
	STAT_BODYHITS = 15,
	STAT_ARMHITS = 16,
	STAT_LEGHITS = 17,
	STAT_HEADHITSRATIO = 18,
	STAT_BODYHITSRATIO = 19,
	STAT_ARMHITSRATIO = 20,
	STAT_LEGHITSRATIO = 21,
	STAT_DEADHITSRATIO = 22,
	STAT_HEADSKNOCKEDOFF = 23,
	STAT_HEADSPUNCHEDOFF = 24,
	STAT_FRIENDHITS = 25,
	STAT_HIT = 26,
	STAT_HEADHIT = 27,
	STAT_PUNCHED = 28,
	STAT_OWNHEADKNOCKEDOFF = 29,
	STAT_OWNHEADPUNCHEDOFF = 30,
	STAT_FRIENDHIT = 31,
	STAT_GLASSHIT = 32,
	STAT_HEALTH = 33,
	STAT_ARMOUR = 34,
	STAT_AMMO = 35,
	STAT_BAGTIME = 36,
	STAT_BAGPICKED = 37,
	STAT_BAGRETURNED = 38,
	STAT_BAGSCORED = 39,
	STAT_LEADTIME = 40,
	STAT_LASTTIME = 41,
	STAT_AVERAGEWEAPONPOWERRATIO = 42,
	STAT_FAVOURITEGUN = 43,
	STAT_FAVOURITEGUNSHOTS = 44,
	STAT_FAVOURITEGUNRATIO = 45,
	STAT_DISTMOVED = 46,
	STAT_DISTFORWARD = 47,
	STAT_DISTBACKWARD = 48,
	STAT_DISTBACKWARDRATIO = 49,
	STAT_DISTSTRAFE = 50,
	STAT_DISTSTRAFERATIO = 51,
	STAT_FALLTIME = 52,
	STAT_FALLTIMERATIO = 53,
	STAT_CROUCHTIME = 54,
	STAT_CROUCHTIMERATIO = 55,
	STAT_AIMTIME = 56,
	STAT_AIMTIMERATIO = 57,
	STAT_TOTALTIMEVISIBLE = 58,
	STAT_PICKUPRATIO = 59,
	STAT_CHANGEDGUN = 60,
	STAT_RICOCHETHITS = 61,
	STAT_FIXEDGUNSHOTS = 62,
	STAT_FIXEDGUNTIME = 63,
	STAT_TIMESPLITTERSKILLED = 64,
	STAT_TIMEALIVE = 65,
	STAT_SHORTESTTIMEALIVE = 66,
	STAT_LONGESTTIMEALIVE = 67,
	STAT_KILLSUSINGAIM = 68,
	NUM_STAT = 69
};

enum {
	STAT_GUN_SHOTS = 0,
	STAT_GUN_KILLS = 1,
	STAT_GUN_HITS = 2,
	STAT_GUN_TIME = 3,
	STAT_GUN_PICKED = 4,
	NUM_STAT_GUN = 5
};

enum {
	STAT_CHAR_KILLS = 0,
	STAT_CHAR_KILLED = 1,
	STAT_CHAR_HITS = 2,
	STAT_CHAR_HIT = 3,
	STAT_CHAR_TIMEVISIBLE = 4,
	STAT_CHAR_TIMEVISIBLERATIO = 5,
	NUM_STAT_CHAR = 6
};

struct stats_s { // 0x584
	/* 0x000 */ float stat[69];
	/* 0x114 */ float statgun[40][5];
	/* 0x434 */ float statchar[14][6];
};

typedef stats_s stats;

enum {
	MEDAL_NONE = -1,
	MEDAL_LETHAL = 0,
	MEDAL_KILLED = 1,
	MEDAL_SUICIDAL = 2,
	MEDAL_SUCCESIVEKILLS = 3,
	MEDAL_MULTIKILL = 4,
	MEDAL_REPEATKILL = 5,
	MEDAL_ACCURACY = 6,
	MEDAL_INACCURACY = 7,
	MEDAL_DEADHITS = 8,
	MEDAL_HEADHITS = 9,
	MEDAL_PUNCHES = 10,
	MEDAL_PUNCHED = 11,
	MEDAL_HEADSKNOCKEDOFF = 12,
	MEDAL_HEADSPUNCHEDOFF = 13,
	MEDAL_FRIENDHITS = 14,
	MEDAL_GLASSHITS = 15,
	MEDAL_HEALTHY = 16,
	MEDAL_ARMOUR = 17,
	MEDAL_NOHEALTH = 18,
	MEDAL_NOARMOUR = 19,
	MEDAL_CAMPER = 20,
	MEDAL_LAZY = 21,
	MEDAL_HYPERACTIVE = 22,
	MEDAL_RUNAWAY = 23,
	MEDAL_SKILLEDSTRAFER = 24,
	MEDAL_FALL = 25,
	MEDAL_HIDING = 26,
	MEDAL_COWARDLY = 27,
	MEDAL_DODGING = 28,
	MEDAL_OUTGUNNED = 29,
	MEDAL_EQUIPPED = 30,
	MEDAL_LEADBUTLOST = 31,
	MEDAL_CHANGEDGUNS = 32,
	MEDAL_BAGRETURNER = 33,
	MEDAL_BESTBAGGER = 34,
	MEDAL_WORSTBAGGER = 35,
	MEDAL_RICOCHETHITS = 36,
	MEDAL_KAMIKAZE = 37,
	MEDAL_VICTIM = 38,
	MEDAL_BULLY = 39,
	MEDAL_PEACEFUL = 40,
	MEDAL_DISHONOURABLE = 41,
	MEDAL_EXCITED = 42,
	MEDAL_LONELY = 43,
	MEDAL_SHORTESTTIMEALIVE = 44,
	MEDAL_LONGESTTIMEALIVE = 45,
	MEDAL_SURVIVOR = 46,
	MEDAL_KILLSUSINGAIM = 47,
	MAX_MEDALS = 48
};

enum {
	COMPLETE_NEVER = 0,
	COMPLETE_ALWAYS = 1,
	COMPLETE_STORY = 2,
	COMPLETE_STORY123 = 3,
	COMPLETE_STORY456 = 4,
	COMPLETE_STORY789 = 5,
	COMPLETE_CHALLENGE = 6,
	NUM_CONDITIONTYPES = 7
};

enum {
	DTYPE_INT_LESSISGOOD = 0,
	DTYPE_INT_MOREISGOOD = 1,
	DTYPE_INT_NOTZEROISGOOD = 2,
	DTYPE_NUM = 3
};

struct unlockcondition_s { // 0x10
	/* 0x0 */ int type;
	/* 0x4 */ int data1;
	/* 0x8 */ int data2type;
	/* 0xc */ int data2;
};

typedef unlockcondition_s unlockcondition_t;

struct unlockconditionset_s { // 0x4
	/* 0x0 */ int numconditions;
	/* 0x4 */ unlockcondition_t conditions[0];
};

typedef unlockconditionset_s unlockconditionset_t;

enum {
	CHEAT_BIGHEADS = 0,
	CHEAT_SMALLHEADS = 1,
	CHEAT_BIGGUNS = 2,
	CHEAT_INFINITEAMMO = 3,
	CHEAT_PAINTBALL = 4,
	CHEAT_GUNSOUND = 5,
	CHEAT_ENEMYROCKETS = 6,
	CHEAT_ENEMYBRICKS = 7,
	CHEAT_ENEMYBONUS1 = 8,
	CHEAT_ENEMYBONUS2 = 9,
	CHEAT_ENEMYBONUS3 = 10,
	CHEAT_ENEMYBONUS4 = 11,
	CHEAT_ENEMYBONUS5 = 12,
	CHEAT_HEADLESS = 13,
	CHEAT_HEADSREMOVABLE = 14,
	CHEAT_NUM = 15
};

// warning: multiple differing types with the same name (size not equal)
struct cheatdef_s { // 0xc
	/* 0x0 */ short int name;
	/* 0x4 */ int flags;
	/* 0x8 */ unlockconditionset_t *unlockset;
};

typedef cheatdef_s cheatdef_t;

enum {
	GUNSET_DAM = 0,
	GUNSET_TOMB = 1,
	GUNSET_VILLAGE = 2,
	GUNSET_MANSION = 3,
	GUNSET_CHINESE = 4,
	GUNSET_INDUSTRIAL = 5,
	GUNSET_SCIFI = 6,
	GUNSET_PLANET = 7,
	GUNSET_RFACTORY = 8,
	GUNSET_DEFAULT = 9,
	GUNSET_RETRO = 10,
	GUNSET_HEAT = 11,
	GUNSET_PLASMA = 12,
	GUNSET_HANDGUNS = 13,
	GUNSET_REMOTEMINES = 14,
	GUNSET_PROXIMITYMINES = 15,
	GUNSET_TIMEDMINES = 16,
	GUNSET_BRICKS = 17,
	GUNSET_TEST = 18,
	NUM_GUNSETS = 19
};

enum {
	CHRSET_TOMB = 0,
	CHRSET_VILLAGE = 1,
	CHRSET_MANSION = 2,
	CHRSET_CHINESE = 3,
	CHRSET_INDUSTRIAL = 4,
	CHRSET_DOCKS = 5,
	CHRSET_SCIFI = 6,
	CHRSET_PLANET = 7,
	CHRSET_RFACTORY = 8,
	CHRSET_DEFAULT = 9,
	CHRSET_PERIOD = 10,
	CHRSET_CRIME = 11,
	CHRSET_SCIFI1 = 12,
	CHRSET_SHOCKER = 13,
	CHRSET_JUSTICE = 14,
	CHRSET_ZOMBIES = 15,
	CHRSET_SPLITTERS = 16,
	NUM_CHRSETS = 17
};

struct chrset_s { // 0x30
	/* 0x00 */ int chrnums[12];
};

typedef chrset_s chrset_t;

struct setupprop_s { // 0x2c
	/* 0x00 */ int setupref;
	/* 0x04 */ int createflags;
	/* 0x08 */ int propnum;
	/* 0x0c */ float pos[3];
	/* 0x18 */ float rot[3];
	/* 0x24 */ void *extra;
	/* 0x28 */ int forcedRoom;
};

typedef setupprop_s setupprop;

struct setupremote_s { // 0x48
	/* 0x00 */ int setupref;
	/* 0x04 */ int createflags;
	/* 0x08 */ int propnum;
	/* 0x0c */ int type;
	/* 0x10 */ int data1;
	/* 0x14 */ int padextref;
	/* 0x18 */ float target[3];
	/* 0x24 */ float innerradius;
	/* 0x28 */ float outerradius;
	/* 0x2c */ float minanglex;
	/* 0x30 */ float maxanglex;
	/* 0x34 */ float minangley;
	/* 0x38 */ float maxangley;
	/* 0x3c */ float sweepspeed;
	/* 0x40 */ float VerticalFOV;
	/* 0x44 */ float HorizontalFOV;
};

typedef setupremote_s setupremote;

struct setupalarm_s { // 0x10
	/* 0x0 */ int setupref;
	/* 0x4 */ int createflags;
	/* 0x8 */ float duration;
	/* 0xc */ int commlist;
};

typedef setupalarm_s setupalarm;

enum {
	LVBTNTYPE_TOGGLE = 0,
	LVBTNTYPE_ONEPRESS = 1,
	LVBTNTYPE_TIMED = 2,
	LVBTNTYPE_MULTIPRESS = 3,
	NUM_LVBTNTYPES = 4
};

enum {
	LVBTNFLAG_NONE = 0,
	LVBTNFLAG_DISABLED = 1
};

typedef void (*lvbtnhandlerfn)(/* parameters unknown */);

struct setupbutton_s { // 0x38
	/* 0x00 */ int setupref;
	/* 0x04 */ int createflags;
	/* 0x08 */ int propnum;
	/* 0x0c */ float pos[3];
	/* 0x18 */ float roty;
	/* 0x1c */ int type;
	/* 0x20 */ int flags;
	/* 0x24 */ lvbtnhandlerfn handlerfn;
	/* 0x28 */ int chrpadextref;
	/* 0x2c */ int data1;
	/* 0x30 */ float fdata1;
	/* 0x34 */ void *vdata1;
};

typedef setupbutton_s setupbutton;

struct lvbuttondata_s { // 0x30
	/* 0x00 */ int setupref;
	/* 0x04 */ int chrpadnum;
	/* 0x08 */ prop_s *prop;
	/* 0x0c */ int type;
	/* 0x10 */ int flags;
	/* 0x14 */ lvbtnhandlerfn handlerfn;
	/* 0x18 */ boolean status;
	/* 0x1c */ prop_s *activater;
	/* 0x20 */ float timer1;
	/* 0x24 */ int data1;
	/* 0x28 */ float fdata1;
	/* 0x2c */ void *vdata1;
};

typedef lvbuttondata_s lvbuttondata;

enum {
	TEAM_NONE = 0,
	TEAM_A = 1,
	TEAM_B = 2,
	TEAM_C = 3,
	TEAM_D = 4,
	TEAM_BAG = 5
};

struct setuppickup_s { // 0x30
	/* 0x00 */ int createflags;
	/* 0x04 */ int propnum;
	/* 0x08 */ int pickuptype;
	/* 0x0c */ float data;
	/* 0x10 */ int data2;
	/* 0x14 */ int team;
	/* 0x18 */ int padextref;
	/* 0x1c */ float rot[3];
	/* 0x28 */ float dy;
	/* 0x2c */ int realpadnum;
};

typedef setuppickup_s setuppickup;

enum {
	DOORFLAG_NONE = 0,
	DOORFLAG_LOCKED = 1,
	DOORFLAG_NOFRONTLOCK = 2,
	DOORFLAG_NOBACKLOCK = 4,
	DOORFLAG_AUTO = 8,
	DOORFLAG_STARTOPEN = 16,
	DOORFLAG_HASBUTTON = 32
};

struct setupdoor_s { // 0x2c
	/* 0x00 */ int createflags;
	/* 0x04 */ int propnum;
	/* 0x08 */ int volumenum;
	/* 0x0c */ int id;
	/* 0x10 */ int extrefpadnum;
	/* 0x14 */ int key;
	/* 0x18 */ int doorflags;
	/* 0x1c */ float pos[3];
	/* 0x28 */ float roty;
};

typedef setupdoor_s setupdoor;

struct setupspawn_s { // 0x10
	/* 0x0 */ int createflags;
	/* 0x4 */ int padextref;
	/* 0x8 */ int flags;
	/* 0xc */ int realpadnum;
};

typedef setupspawn_s setupspawn;

enum {
	GUNSET_GUN1 = 0,
	GUNSET_GUN2 = 1,
	GUNSET_GUN3 = 2,
	GUNSET_GUN4 = 3,
	GUNSET_GUN5 = 4,
	GUNSET_GUN6 = 5,
	GUNSET_GUN7 = 6,
	GUNSET_GUN8 = 7,
	GUNSET_GUN9 = 8,
	GUNSET_GUN10 = 9,
	GUNSET_GUN11 = 10,
	GUNSET_GUN12 = 11,
	GUNSET_GUN13 = 12,
	GUNSET_GUN14 = 13,
	GUNSET_GUN15 = 14
};

struct AIHandler_s { // 0x4
	/* 0x0 */ void (*function)(/* parameters unknown */);
};

typedef AIHandler_s aihandler;

struct setupNPC_s { // 0x3c
	/* 0x00 */ int createflags;
	/* 0x04 */ int startpad;
	/* 0x08 */ int chrtype;
	/* 0x0c */ int gunsetgun;
	/* 0x10 */ int startstate;
	/* 0x14 */ int triggerdata;
	/* 0x18 */ int triggerpad2;
	/* 0x1c */ int aiflags;
	/* 0x20 */ int maxactive;
	/* 0x24 */ int maxspawns;
	/* 0x28 */ float timeIntervals;
	/* 0x2c */ int patrolroutenum;
	/* 0x30 */ int triggertype;
	/* 0x34 */ int data1;
	/* 0x38 */ int sleepgroup;
};

typedef setupNPC_s setupNPC;

struct setuppropspawn_s { // 0x30
	/* 0x00 */ int setupref;
	/* 0x04 */ int createflags;
	/* 0x08 */ int propnum;
	/* 0x0c */ float pos[3];
	/* 0x18 */ float rot[3];
	/* 0x24 */ int triggertype;
	/* 0x28 */ int triggerdata;
	/* 0x2c */ int alarmnum;
};

typedef setuppropspawn_s setuppropspawn;

struct propspawninfo_s { // 0x4
	/* 0x0 */ int numspawned;
};

typedef propspawninfo_s propspawninfo;

struct npcspawninfo_s { // 0x10
	/* 0x0 */ int numspawned;
	/* 0x4 */ int numactive;
	/* 0x8 */ float timerCountDown;
	/* 0xc */ boolean triggerset;
};

typedef npcspawninfo_s npcspawninfo;

struct setupPatrolRoutes_s { // 0x8
	/* 0x0 */ int *patrolrt;
	/* 0x4 */ int size;
};

typedef setupPatrolRoutes_s setupPatrolRoutes;

struct setupcar_s { // 0x18
	/* 0x00 */ int createflags;
	/* 0x04 */ int propnum;
	/* 0x08 */ int mode;
	/* 0x0c */ int carflags;
	/* 0x10 */ carpath_s *paths;
	/* 0x14 */ int numpaths;
};

typedef setupcar_s setupcar;

struct setupspecialfx_s { // 0x20
	/* 0x00 */ int createflags;
	/* 0x04 */ int type;
	/* 0x08 */ int subtype;
	/* 0x0c */ float pos[3];
	/* 0x18 */ float param;
	/* 0x1c */ void *extra;
};

typedef setupspecialfx_s setupspecialfx;

struct flycameradata_s { // 0x1c
	/* 0x00 */ float pos[3];
	/* 0x0c */ float dir[3];
	/* 0x18 */ float speed;
};

typedef flycameradata_s flycameradata;

struct cameradata_s { // 0x10
	/* 0x0 */ flycameradata_s *lvflycameradata;
	/* 0x4 */ int numcamerapoints;
	/* 0x8 */ float stillTime;
	/* 0xc */ int text;
};

typedef cameradata_s cameradata;

struct weatherdata_s { // 0x28
	/* 0x00 */ int type;
	/* 0x04 */ int magnitude;
	/* 0x08 */ float wind[3];
	/* 0x14 */ float windvariation[3];
	/* 0x20 */ int precipitationalpha;
	/* 0x24 */ int splashalpha;
};

typedef weatherdata_s weatherdata;

struct setuplsphase_s { // 0xd8
	/* 0x00 */ float delay;
	/* 0x04 */ int numattackloops;
	/* 0x08 */ struct { // 0x14
		/* 0x08 */ int numchrs;
		/* 0x0c */ int groupnum;
		/* 0x10 */ int targetbase;
		/* 0x14 */ float chrdelay;
		/* 0x18 */ float enddelay;
	} attack[10];
	/* 0xd0 */ int numattacks;
	/* 0xd4 */ float targettime;
};

typedef setuplsphase_s setuplsphase;

struct setuplssnipergrp_s { // 0xc
	/* 0x0 */ int groupnum;
	/* 0x4 */ float mininterval;
	/* 0x8 */ float maxinterval;
};

typedef setuplssnipergrp_s setuplssnipergrp;

struct setupheader_s { // 0xa0
	/* 0x00 */ int setupflags;
	/* 0x04 */ int gunset;
	/* 0x08 */ setupprop *props;
	/* 0x0c */ int numprops;
	/* 0x10 */ setuppickup *pickups;
	/* 0x14 */ int numpickups;
	/* 0x18 */ setupdoor *doors;
	/* 0x1c */ int numdoors;
	/* 0x20 */ setupspawn *spawnpads;
	/* 0x24 */ int numspawnpads;
	/* 0x28 */ setupNPC *NPCsetup;
	/* 0x2c */ int numNPCs;
	/* 0x30 */ setupPatrolRoutes *setupPatrolRoutes;
	/* 0x34 */ int numPatrolroutes;
	/* 0x38 */ aihandler *AIEventHandlers;
	/* 0x3c */ int numAIEventHandlers;
	/* 0x40 */ setupNPC *si;
	/* 0x44 */ int numNPCspawns;
	/* 0x48 */ setupcar *cars;
	/* 0x4c */ int numcars;
	/* 0x50 */ setupremote *sr;
	/* 0x54 */ int numremotes;
	/* 0x58 */ setupspecialfx *specialfx;
	/* 0x5c */ int numspecialfx;
	/* 0x60 */ weatherdata *weatherdat;
	/* 0x64 */ int numweatherdata;
	/* 0x68 */ setuplsphase *lsphases;
	/* 0x6c */ int numlsphases;
	/* 0x70 */ setuplssnipergrp *lssnipergrps;
	/* 0x74 */ int numlssnipergrps;
	/* 0x78 */ setupalarm *alarms;
	/* 0x7c */ int numalarms;
	/* 0x80 */ setuplift_s *lifts;
	/* 0x84 */ int numlifts;
	/* 0x88 */ setupbutton_s *lvbuttons;
	/* 0x8c */ int numlvbuttons;
	/* 0x90 */ cameradata_s *lvcameradata;
	/* 0x94 */ int numcamera;
	/* 0x98 */ setuppropspawn_s *lvpropspawn;
	/* 0x9c */ int numpropspawns;
};

typedef setupheader_s setupheader;

struct setupref_s { // 0x8
	/* 0x0 */ int setupref;
	/* 0x4 */ void *data;
};

typedef setupref_s setupref;

struct gunset_s { // 0x44
	/* 0x00 */ short int name;
	/* 0x04 */ int numguns;
	/* 0x08 */ int guncombo[15];
};

typedef gunset_s gunset;

struct skySettings_s { // 0x28
	/* 0x00 */ char *name;
	/* 0x04 */ int skypropnum;
	/* 0x08 */ u32 bgcol;
	/* 0x0c */ u32 cloudcol;
	/* 0x10 */ u32 outercloudcol;
	/* 0x14 */ float cloudradius;
	/* 0x18 */ float cloudheight;
	/* 0x1c */ float cloudheightadjust;
	/* 0x20 */ float skyheightadjust;
	/* 0x24 */ float skyroty;
};

typedef skySettings_s skySetting;

struct level_info_s { // 0x20
	/* 0x00 */ short int name;
	/* 0x04 */ int number;
	/* 0x08 */ int tunenum;
	/* 0x0c */ int skySetting;
	/* 0x10 */ setupheader *setup1up;
	/* 0x14 */ setupheader *setupArcade;
	/* 0x18 */ void (*objectivesSetup)(/* parameters unknown */);
	/* 0x1c */ void (*objectivesTick)(/* parameters unknown */);
};

typedef level_info_s level_info;

enum {
	CHALLENGE1_A = 0,
	CHALLENGE1_B = 1,
	CHALLENGE1_C = 2,
	CHALLENGE2_A = 3,
	CHALLENGE2_B = 4,
	CHALLENGE2_C = 5,
	CHALLENGE3_A = 6,
	CHALLENGE3_B = 7,
	CHALLENGE3_C = 8,
	CHALLENGE4_A = 9,
	CHALLENGE4_B = 10,
	CHALLENGE4_C = 11,
	CHALLENGE5_A = 12,
	CHALLENGE5_B = 13,
	CHALLENGE5_C = 14,
	CHALLENGE6_A = 15,
	CHALLENGE6_B = 16,
	CHALLENGE6_C = 17,
	CHALLENGE7_A = 18,
	CHALLENGE7_B = 19,
	CHALLENGE7_C = 20,
	CHALLENGE8_A = 21,
	CHALLENGE8_B = 22,
	CHALLENGE8_C = 23,
	CHALLENGE9_A = 24,
	CHALLENGE9_B = 25,
	CHALLENGE9_C = 26,
	NUM_CHALLENGES = 27
};

typedef int (*chfunc_t)(/* parameters unknown */);

enum {
	CHATTR_TIME = 0,
	CHATTR_RANKCHR = 1,
	CHATTR_RANKTEAM = 2,
	CHATTR_HEALTH = 3,
	CHATTR_KILLS = 4,
	CHATTR_LOSSES = 5,
	CHATTR_TEAMSCORE = 6,
	CHATTR_STAT = 7,
	CHATTR_FUNCTION = 8
};

enum {
	STYPE_NONE = 0,
	STYPE_TIME = 1,
	STYPE_KILLS = 2,
	STYPE_HEALTH = 3,
	STYPE_HEADSKNOCKEDOFF = 4
};

enum {
	CHCOMP_LESS = 0,
	CHCOMP_LESSEQUAL = 1,
	CHCOMP_EQUAL = 2,
	CHCOMP_MORE = 3,
	CHCOMP_MOREEQUAL = 4
};

struct challengecondition_s { // 0x14
	/* 0x00 */ u16 conditionflags;
	/* 0x02 */ u16 scoretype;
	/* 0x04 */ int attribute;
	/* 0x08 */ int source;
	/* 0x0c */ int comp;
	/* 0x10 */ int data1;
};

typedef challengecondition_s challengecondition_t;

struct challengeplayerstart_s { // 0x8
	/* 0x0 */ int spawnpad;
	/* 0x4 */ int guncombo;
};

typedef challengeplayerstart_s challengeplayerstart;

struct challengechrset_s { // 0x10
	/* 0x0 */ int chrtype;
	/* 0x4 */ float DamageScaleIn;
	/* 0x8 */ float DamageScaleOut;
	/* 0xc */ int team;
};

typedef challengechrset_s challengechrset;

struct setupchallenge_s { // 0x70
	/* 0x00 */ short int title;
	/* 0x04 */ int levelnum;
	/* 0x08 */ int gamemode;
	/* 0x0c */ int gameflags;
	/* 0x10 */ challengecondition_t *conditions;
	/* 0x14 */ int numconditions;
	/* 0x18 */ int gunset;
	/* 0x1c */ gunset guns;
	/* 0x60 */ challengechrset *chrset;
	/* 0x64 */ challengeplayerstart playerstart;
	/* 0x6c */ short int description;
};

typedef setupchallenge_s setupchallenge;

struct chrstats_s { // 0x4
	/* 0x0 */ u32 count;
};

typedef chrstats_s chrstats_t;

struct levelstats_s { // 0x24
	/* 0x00 */ u32 countstory;
	/* 0x04 */ u32 totaltime;
	/* 0x08 */ u32 besttime[3];
	/* 0x14 */ u32 besttime2P[3];
	/* 0x20 */ u32 countarcade;
};

typedef levelstats_s levelstats_t;

struct lifestats_s { // 0x1c4
	/* 0x000 */ int totalgames;
	/* 0x004 */ int totalframesplayed;
	/* 0x008 */ int totalkills;
	/* 0x00c */ int totaltimeskilled;
	/* 0x010 */ int succesivekills;
	/* 0x014 */ int multikills;
	/* 0x018 */ int repeatkills;
	/* 0x01c */ int totalshots;
	/* 0x020 */ int totalhits;
	/* 0x024 */ float headhits;
	/* 0x028 */ float bodyhits;
	/* 0x02c */ float armhits;
	/* 0x030 */ float leghits;
	/* 0x034 */ int headsshotoff;
	/* 0x038 */ int headspunchedoff;
	/* 0x03c */ int glasshits;
	/* 0x040 */ int gunshots[41];
	/* 0x0e4 */ float guntime[41];
	/* 0x188 */ int timesplitterskilled;
	/* 0x18c */ int itemsrecovered;
	/* 0x190 */ float disttravelled;
	/* 0x194 */ char medalcollected[48];
};

typedef lifestats_s lifestats_t;

struct challengestats_s { // 0x8
	/* 0x0 */ u32 count;
	/* 0x4 */ int bestscore;
};

typedef challengestats_s challengestats_t;

struct gamestatus_s { // 0xd88
	/* 0x000 */ chrstats_t chrs[50];
	/* 0x0c8 */ levelstats_t levels[47];
	/* 0x764 */ challengestats_t challenges[27];
	/* 0x83c */ lifestats_t lifestats_story;
	/* 0xa00 */ lifestats_t lifestats_arcade;
	/* 0xbc4 */ lifestats_t lifestats_challenge;
};

typedef gamestatus_s gamestatus_t;

struct gamesettings_s { // 0x4
	/* 0x0 */ int gv_dispx;
};

typedef gamesettings_s gamesettings_t;

struct signondata_s { // 0xe68
	/* 0x000 */ u8 name[31];
	/* 0x020 */ playerprefs_t playerprefs;
	/* 0x0dc */ gamesettings_t gamesettings;
	/* 0x0e0 */ gamestatus_t gamestatus;
};

typedef signondata_s signondata_t;

struct gamefile1_s { // 0xe690
	/* 0x0000 */ int lastsignon;
	/* 0x0004 */ u32 unique;
	/* 0x0008 */ int reserved[2];
	/* 0x0010 */ signondata_t soentries[16];
};

typedef gamefile1_s gamefile1_t;

struct signoninfo_s { // 0x8
	/* 0x0 */ int card;
	/* 0x4 */ u32 fileid;
};

typedef signoninfo_s signoninfo_t;

enum {
	PRELOAD_FILE = 0,
	PRELOAD_OB = 1,
	PRELOAD_TEXNAME = 2,
	PRELOAD_TEXNUM = 3,
	PRELOAD_FILELOCAL = 4,
	PRELOAD_OB_AFTER = 5,
	PRELOAD_NUM = 6
};

struct preloadfileinfo_s { // 0x18
	/* 0x00 */ u16 type;
	/* 0x02 */ u16 flags;
	/* 0x04 */ preloadinfo_u *next;
	/* 0x08 */ int cdsector;
	/* 0x0c */ char *filename;
	/* 0x10 */ u8 *loadpos;
	/* 0x14 */ int size;
};

typedef preloadfileinfo_s preloadfileinfo;

struct preloadtexnameinfo_s { // 0x18
	/* 0x00 */ u16 type;
	/* 0x02 */ u16 flags;
	/* 0x04 */ preloadinfo_u *next;
	/* 0x08 */ int cdsector;
	/* 0x0c */ char *filename;
	/* 0x10 */ texinfo *inf;
	/* 0x14 */ int texnum;
};

typedef preloadtexnameinfo_s preloadtexnameinfo;

struct preloadtexnuminfo_s { // 0x18
	/* 0x00 */ u16 type;
	/* 0x02 */ u16 flags;
	/* 0x04 */ preloadinfo_u *next;
	/* 0x08 */ int cdsector;
	/* 0x0c */ int texfilenum;
	/* 0x10 */ texinfo *inf;
	/* 0x14 */ int texnum;
};

typedef preloadtexnuminfo_s preloadtexnuminfo;

union preloadinfo_u { // 0x18
	/* 0x00 */ preloadfileinfo file;
	/* 0x00 */ preloadfileinfo ob;
	/* 0x00 */ preloadtexnameinfo texname;
	/* 0x00 */ preloadtexnuminfo texnum;
};

typedef preloadinfo_u preloadinfo;

struct room_s { // 0x24
	/* 0x00 */ obdef *ob;
	/* 0x04 */ int *portals;
	/* 0x08 */ weatherdef_s **weather;
	/* 0x0c */ float bb[2][3];
};

typedef room_s room;

struct portal_s { // 0x18
	/* 0x00 */ int room1;
	/* 0x04 */ int room2;
	/* 0x08 */ float normal[3];
	/* 0x14 */ short int numpoints;
	/* 0x16 */ short int flags;
	/* 0x18 */ float points[0][3];
};

typedef portal_s portal;

struct volume_s { // 0x2c
	/* 0x00 */ int num;
	/* 0x04 */ int room;
	/* 0x08 */ float pos[3];
	/* 0x14 */ float size[3];
	/* 0x20 */ float angle[3];
};

typedef volume_s volume;

struct roombbinfo_s { // 0x8c
	/* 0x00 */ float floorbb[2][3];
	/* 0x18 */ float wallbb[2][3];
	/* 0x30 */ float polybb[2][3];
	/* 0x48 */ float overallbb[2][3];
	/* 0x60 */ float roomsize[3];
	/* 0x6c */ float centrepos[3];
	/* 0x78 */ float bbRadius;
	/* 0x7c */ float volume;
	/* 0x80 */ float totalfloorvolume;
	/* 0x84 */ float totalweatherfloorvolume;
	/* 0x88 */ int numfloors;
};

typedef roombbinfo_s roombbinfo;

enum {
	MEMDYNAMIC_FREE = 0,
	MEMDYNAMIC_SHORTSTAY = 1,
	MEMDYNAMIC_RESIDENT = 2
};

enum {
	LOADBAR_PRELOAD_STAGE = 0,
	LOADBAR_SOUND_STAGE = 1,
	LOADBAR_STAGE_NUM = 2
};

typedef enum {
	SCE_DEMO_ENDREASON_ATTRACT_INTERRUPTED = 0,
	SCE_DEMO_ENDREASON_ATTRACT_COMPLETE = 1,
	SCE_DEMO_ENDREASON_PLAYABLE_INACTIVITY_TIMEOUT = 2,
	SCE_DEMO_ENDREASON_PLAYABLE_GAMEPLAY_TIMEOUT = 3,
	SCE_DEMO_ENDREASON_PLAYABLE_COMPLETE = 4,
	SCE_DEMO_ENDREASON_PLAYABLE_QUIT = 5
} sceDemoEndReason;

struct dbufinfo_s { // 0x14
	/* 0x00 */ boolean gsReadyToSend;
	/* 0x04 */ boolean gsSending;
	/* 0x08 */ boolean gsFinishedSending;
	/* 0x0c */ int cpuStartFrame;
	/* 0x10 */ int cpuCreateFrame;
};

typedef dbufinfo_s dbufinfo;

struct quaternion_s { // 0x10
	/* 0x0 */ float x;
	/* 0x4 */ float y;
	/* 0x8 */ float z;
	/* 0xc */ float w;
};

typedef quaternion_s quaternion;

enum {
	PARTORDER_BASE = 0,
	PARTORDER_HIPS = 1,
	PARTORDER_WAIST = 2,
	PARTORDER_NECK = 3,
	PARTORDER_HEAD = 4,
	PARTORDER_RBLADE = 5,
	PARTORDER_RSHOULDER = 6,
	PARTORDER_RELBOW = 7,
	PARTORDER_RWRIST = 8,
	PARTORDER_LBLADE = 9,
	PARTORDER_LSHOULDER = 10,
	PARTORDER_LELBOW = 11,
	PARTORDER_LWRIST = 12,
	PARTORDER_RHIP = 13,
	PARTORDER_RKNEE = 14,
	PARTORDER_RHEEL = 15,
	PARTORDER_LHIP = 16,
	PARTORDER_LKNEE = 17,
	PARTORDER_LHEEL = 18,
	PARTORDER_NUM = 19
};

struct jointanimframe_s { // 0x18
	/* 0x00 */ float trans[3];
	/* 0x0c */ float rot[3];
};

typedef jointanimframe_s jointanimframe;

struct jointanimframequat_s { // 0x20
	/* 0x00 */ float trans[3];
	/* 0x10 */ quaternion q;
};

typedef jointanimframequat_s jointanimframequat;

struct keyframe_s { // 0x8
	/* 0x0 */ float time;
	/* 0x4 */ keyframe_s *next;
	/* 0x8 */ jointanimframe data[0];
};

typedef keyframe_s keyframe;

struct anim_s { // 0x1c
	/* 0x00 */ int numjoints;
	/* 0x04 */ int numkeyframes;
	/* 0x08 */ float length;
	/* 0x0c */ keyframe *firstkeyframe;
	/* 0x10 */ float rootTrans[3];
};

typedef anim_s anim;

enum {
	ANIM_NONE = 0,
	ANIM_SOFTWARE = 1,
	ANIM_BIND_POSE = 2,
	ANIM_STAND = 3,
	ANIM_RUN = 4,
	ANIM_RUNBACK = 5,
	ANIM_RUNLEFT = 6,
	ANIM_RUNRIGHT = 7,
	ANIM_WALK = 8,
	ANIM_WALKBACK = 9,
	ANIM_WALKLEFT = 10,
	ANIM_WALKRIGHT = 11,
	ANIM_PATROL = 12,
	ANIM_PATROL2 = 13,
	ANIM_PATROL3 = 14,
	ANIM_PATROL4 = 15,
	ANIM_SEARCHINGPATROL = 16,
	ANIM_SEARCHINGPATROL2 = 17,
	ANIM_SEARCHINGPATROL3 = 18,
	ANIM_SEARCHINGPATROL4 = 19,
	ANIM_ACTINGPATROL = 20,
	ANIM_PATROLREACTION = 21,
	ANIM_PATROLREACTSHORT = 22,
	ANIM_PATROLWALKTOSTAND = 23,
	ANIM_PATROLIDLE1 = 24,
	ANIM_PATROLIDLE2 = 25,
	ANIM_PATROLIDLE3 = 26,
	ANIM_PATROLSTANDTOWALKLEFT = 27,
	ANIM_PATROLSTANDTOWALKRIGHT = 28,
	ANIM_PATROLSTANDTOWALK180 = 29,
	ANIM_PATROLSTANDTOWALK = 30,
	ANIM_PATROLTURN90LEFT = 31,
	ANIM_PATROLTURN90LEFT2 = 32,
	ANIM_PATROLTURN90RIGHT = 33,
	ANIM_PATROLTURN90RIGHT2 = 34,
	ANIM_PATROLTURN90RIGHT3 = 35,
	ANIM_PATROLTURN90RIGHT4 = 36,
	ANIM_DIVE = 37,
	ANIM_SHUFFLE_LEFT = 38,
	ANIM_SHUFFLE = 39,
	ANIM_SIDESTEP_RIGHT = 40,
	ANIM_SIDESTEP_RIGHTLITTLE = 41,
	ANIM_SLIDE = 42,
	ANIM_SUMMERSAULT = 43,
	ANIM_LOWLEFT = 44,
	ANIM_BACKFLIP = 45,
	ANIM_CARTWHEEL = 46,
	ANIM_DIAGBACKRIGHT2 = 47,
	ANIM_DIAGFORLEFT = 48,
	ANIM_DIAGLEFTRIGHT = 49,
	ANIM_DOUBLEDODGE = 50,
	ANIM_DOUBLEDODGE_FLIPPED = 51,
	ANIM_ROLLRIGHT = 52,
	ANIM_ROLLLEFT_FLIPPED = 53,
	ANIM_STEPRIGHT = 54,
	ANIM_SMALLSTEP10 = 55,
	ANIM_SMALLSTEP9 = 56,
	ANIM_STEPBACK5 = 57,
	ANIM_SMALLSTEPBACK = 58,
	ANIM_FAINTLEFT = 59,
	ANIM_FAINTRIGHT_FLIPPED = 60,
	ANIM_STRAFEFARRIGHT = 61,
	ANIM_DODGELEFTRIGHT = 62,
	ANIM_STRAFEFARLEFT = 63,
	ANIM_TURNANDRUN = 64,
	ANIM_RETREAT = 65,
	ANIM_MOVEFORWARD = 66,
	ANIM_MOVELEFT = 67,
	ANIM_MOVERIGHT = 68,
	ANIM_STANDFEINTLEFT = 69,
	ANIM_STANDFEINTRIGHT = 70,
	ANIM_DROPTOKNEE = 71,
	ANIM_ONKNEE = 72,
	ANIM_STANDFROMKNEE = 73,
	ANIM_AMBUSH_SAL = 74,
	ANIM_AMBUSH_SALB = 75,
	ANIM_AMBUSH_STANDPOSE_FLIP = 76,
	ANIM_AMBUSH_STANDPOSE = 77,
	ANIM_AMBUSH_CRATE_TOSTAND = 78,
	ANIM_AMBUSH_CRATE_TOCROUCH = 79,
	ANIM_AMBUSH_CRATE_STAND = 80,
	ANIM_AMBUSH_CRATE_CROUCH = 81,
	ANIM_AMBUSH_CRATE_GRENADE = 82,
	ANIM_AMBUSH_CRATE_SHOOTOVER = 83,
	ANIM_AMBUSH_CROUCHATTACK_BACK_FLIP = 84,
	ANIM_AMBUSH_CROUCHATTACK_BACK = 85,
	ANIM_AMBUSH_CROUCHATTACK_FLIP = 86,
	ANIM_AMBUSH_CROUCHATTACK = 87,
	ANIM_AMBUSH_ROLLATTACK_BACK_FLIP = 88,
	ANIM_AMBUSH_ROLLATTACK_BACK = 89,
	ANIM_AMBUSH_ROLLATTACK_FLIP = 90,
	ANIM_AMBUSH_ROLLATTACK = 91,
	ANIM_AMBUSH_SPRAYATTACK_BACK_FLIP = 92,
	ANIM_AMBUSH_SPRAYATTACK_BACK = 93,
	ANIM_AMBUSH_SPRAYATTACK_FLIP = 94,
	ANIM_AMBUSH_SPRAYATTACK = 95,
	ANIM_AMBUSH_WALL1_BACK_FLIP = 96,
	ANIM_AMBUSH_WALL1_BACK = 97,
	ANIM_AMBUSH_WALL1_FLIP = 98,
	ANIM_AMBUSH_WALL1 = 99,
	ANIM_AMBUSH_WALL2_BACK = 100,
	ANIM_AMBUSH_WALL2_FLIP = 101,
	ANIM_AMBUSH_WALL2 = 102,
	ANIM_AMBUSH_WALL3_BACK_FLIP = 103,
	ANIM_AMBUSH_WALL3_BACK = 104,
	ANIM_AMBUSH_WALL3_FLIP = 105,
	ANIM_AMBUSH_WALL3 = 106,
	ANIM_HR_LEFTSHOULDER = 107,
	ANIM_HR_LEFTSTOMACH = 108,
	ANIM_HR_RIGHTLEG = 109,
	ANIM_HR_RIGHTSHOULDER = 110,
	ANIM_HR_RIGHTSTOMACH = 111,
	ANIM_SHOTHEAD = 112,
	ANIM_SHOTHEAD2 = 113,
	ANIM_SHOTHEAD3 = 114,
	ANIM_SHOTSHOULDER = 115,
	ANIM_CHESTSHOT1 = 116,
	ANIM_CHESTSHOT2 = 117,
	ANIM_HEARTSHOT = 118,
	ANIM_RIGHTFRONT = 119,
	ANIM_SHOTSHOULDER2 = 120,
	ANIM_OVERWRITE = 121,
	ANIM_OVERWRITE2 = 122,
	ANIM_BARRELOVERWRITE = 123,
	ANIM_PUNCH = 124,
	ANIM_CUTSCENE = 125,
	ANIM_CS_INTRO_DAM_1 = 126,
	ANIM_CS_INTRO_DAM_2 = 127,
	ANIM_CS_INTRO_DAM_3 = 128,
	ANIM_CS_INTRO_DAM_4 = 129,
	ANIM_CS_INTRO_DAM_5 = 130,
	ANIM_CS_INTRO_DAM_6 = 131,
	ANIM_CS_INTRO_DAM_7 = 132,
	ANIM_CS_INTRO_DAM_8 = 133,
	ANIM_CS_INTRO_DAM_9 = 134,
	ANIM_CS_INTRO_DAM_10 = 135,
	ANIM_CS_INTRO_DAM_11 = 136,
	ANIM_CS_INTRO_DAM_12 = 137,
	ANIM_CS_INTRO_DAM_13 = 138,
	ANIM_CS_INTRO_DAM_14 = 139,
	ANIM_CS_INTRO_DAM_15 = 140,
	ANIM_CS_INTRO_DAM_16 = 141,
	ANIM_CS_INTRO_DAM_17 = 142,
	ANIM_CS_INTRO_DAM_18 = 143,
	ANIM_BARRELWALK = 144,
	ANIM_BARRELTOTURRET = 145,
	ANIM_BARRELDROPTOTURN = 146,
	ANIM_BARRELENDTURN = 147,
	ANIM_BARRELSTANDTOWALK = 148,
	ANIM_BARRELSTARTTURN = 149,
	ANIM_BARRELTURNTOSTAND = 150,
	ANIM_BARRELTURRETTOSTAND = 151,
	ANIM_ZOMBIESTAND = 152,
	ANIM_ZOMBIESTAND2 = 153,
	ANIM_ZOMBIEGETUP1 = 154,
	ANIM_ZOMBIEGETUP2 = 155,
	ANIM_ZOMBIESWIPE1 = 156,
	ANIM_ZOMBIESWIPE2 = 157,
	ANIM_ZOMBIESWIPE3 = 158,
	ANIM_ZOMBIESWIPE4 = 159,
	ANIM_ZOMBIEWALK1 = 160,
	ANIM_ZOMBIEWALK2 = 161,
	ANIM_ZOMBIEWALK3 = 162,
	ANIM_NUM = 163
};

enum {
	ANIM_FE_NONE = 163,
	ANIM_FE_SOFTWARE = 164,
	ANIM_FE_BIND_POSE = 165,
	ANIM_FE_STAND = 166,
	ANIM_FE_FSTAND = 167,
	ANIM_FE_NUM = 168,
	ANIM_ALL_NUM = 168
};

enum {
	ANIMPROP_NULL = 0,
	ANIMPROP_LOOPING = 1,
	ANIMPROP_ROOT_TRANSLATE = 2,
	ANIMPROP_NOTAG = 4,
	ANIMPROP_NOINTERRUPT = 8,
	ANIMPROP_NOTWEENFROM = 16,
	ANIMPROP_DEATH = 32,
	ANIMPROP_POINTING = 256,
	ANIMPROP_TRAVERSAL = 512,
	ANIMPROP_ANGLE_L90 = 1024,
	ANIMPROP_ANGLE_R90 = 2048,
	ANIMPROP_ANGLE_180 = 4096,
	ANIMPROP_PATROLCANROTATE = 8192,
	ANIMPROP_NOROTATE = 16384,
	ANIMPROP_TAGAIMING = 32768,
	ANIMPROP_NUM = 32769
};

struct bulletSparkData_s { // 0x234
	/* 0x000 */ float startpos[3];
	/* 0x00c */ float vel[46][3];
};

typedef bulletSparkData_s bulletSparkData;

struct spriteSparkData_s { // 0x178
	/* 0x000 */ int type;
	/* 0x004 */ float startpos[3];
	/* 0x010 */ float vel[30][3];
};

typedef spriteSparkData_s spriteSparkData;

struct impactExplosionData_s { // 0x50
	/* 0x00 */ int type;
	/* 0x04 */ u32 colour;
	/* 0x08 */ float explosionSize[3];
	/* 0x14 */ float explosionRot[3];
	/* 0x20 */ float explosionTime[3];
	/* 0x2c */ float explosionPos[3][3];
};

typedef impactExplosionData_s impactExplosionData;

struct blastExplosionData_s { // 0x348
	/* 0x000 */ int type;
	/* 0x004 */ u32 colour;
	/* 0x008 */ float size;
	/* 0x00c */ float point[23][3];
	/* 0x120 */ float time[23];
	/* 0x17c */ float psize[23];
	/* 0x1d8 */ float vel[23][3];
	/* 0x2ec */ float rotSpeed[23];
};

typedef blastExplosionData_s blastExplosionData;

struct bulletSmokeData_s { // 0x28
	/* 0x00 */ float pos[3];
	/* 0x0c */ float size;
	/* 0x10 */ u32 col;
	/* 0x14 */ float rot[5];
};

typedef bulletSmokeData_s bulletSmokeData;

struct pulseData_s { // 0x6c
	/* 0x00 */ int type;
	/* 0x04 */ float pos[3];
	/* 0x10 */ float dir[3];
	/* 0x1c */ float rot[20];
};

typedef pulseData_s pulseData;

enum {
	TRACER_YELLOW = 0,
	TRACER_NUM = 1
};

struct tracerData_s { // 0x1c
	/* 0x00 */ int subtype;
	/* 0x04 */ float pos[3];
	/* 0x10 */ float dir[3];
};

typedef tracerData_s tracerData;

struct spriteStreamData_s { // 0xc84
	/* 0x000 */ float currentparticle;
	/* 0x004 */ float points[100][3];
	/* 0x4b4 */ float vel[100][3];
	/* 0x964 */ float timeafter[100];
	/* 0xaf4 */ float rot[100];
};

typedef spriteStreamData_s spriteStreamData;

struct spriteTrailData_s { // 0xc84
	/* 0x000 */ float points[100][3];
	/* 0x4b0 */ float rot[100];
	/* 0x640 */ float vel[100][3];
	/* 0xaf0 */ float timeafter[100];
	/* 0xc80 */ float previoustime;
};

typedef spriteTrailData_s spriteTrailData;

struct stripTrailData_s { // 0x2b0
	/* 0x000 */ float currentparticle;
	/* 0x004 */ float points[17][3];
	/* 0x0d0 */ float timeafter[17];
	/* 0x114 */ float axis1[17][3];
	/* 0x1e0 */ float axis2[17][3];
	/* 0x2ac */ float disappearRatePerSecond;
};

typedef stripTrailData_s stripTrailData;

struct straightTrailData_s { // 0x13c
	/* 0x000 */ float dir[3];
	/* 0x00c */ float currentparticle;
	/* 0x010 */ float points[17][3];
	/* 0x0dc */ float timeafter[17];
	/* 0x120 */ float axis1[3];
	/* 0x12c */ float axis2[3];
	/* 0x138 */ float disappearRatePerSecond;
};

typedef straightTrailData_s straightTrailData;

struct spriteBurstData_s { // 0xc80
	/* 0x000 */ float points[100][4];
	/* 0x640 */ float vel[100][3];
	/* 0xaf0 */ float rot[100];
};

typedef spriteBurstData_s spriteBurstData;

struct spriteManualData_s { // 0x810
	/* 0x000 */ mtx_u particlematrix;
	/* 0x040 */ float points[100][3];
	/* 0x4f0 */ u32 col[100];
	/* 0x680 */ float rot[100];
};

typedef spriteManualData_s spriteManualData;

struct sparkBurstData_s { // 0x7f0
	/* 0x000 */ float points[46][2][4];
	/* 0x5c0 */ float vel[46][3];
};

typedef sparkBurstData_s sparkBurstData;

struct sparkStreamData_s { // 0x12d0
	/* 0x0000 */ float currentparticle;
	/* 0x0010 */ float points[100][2][4];
	/* 0x0c90 */ float vel[100][3];
	/* 0x1140 */ float timeafter[100];
};

typedef sparkStreamData_s sparkStreamData;

struct glassData_s { // 0x4d90
	/* 0x0000 */ mtx_u mat[80];
	/* 0x1400 */ float xyz[80][4][4];
	/* 0x2800 */ float stnorm[80][4][4];
	/* 0x3c00 */ u32 abgr[80][4];
	/* 0x4100 */ float vel[80][3];
	/* 0x44c0 */ float rot[80][3];
	/* 0x4880 */ float rotvel[80][3];
	/* 0x4c40 */ float time[80];
	/* 0x4d80 */ int texnum;
	/* 0x4d84 */ int reflect;
	/* 0x4d88 */ int glassPieces;
	/* 0x4d8c */ int ucodetype;
};

typedef glassData_s glassData;

struct spriteData_t { // 0x2c
	/* 0x00 */ boolean aligned;
	/* 0x04 */ float rot;
	/* 0x08 */ float normal[3];
	/* 0x14 */ float axisRight[3];
	/* 0x20 */ float axisUp[3];
};

typedef spriteData_t spriteData;

struct glowData_t { // 0xc
	/* 0x0 */ float dir[3];
};

typedef glowData_t glowData;

struct particleClone_s { // 0xa0
	/* 0x00 */ mtx_u matrix;
	/* 0x40 */ particleClone_s *next;
	/* 0x44 */ int flags;
	/* 0x48 */ int numRooms;
	/* 0x4c */ int rooms[20];
};

typedef particleClone_s particleClone;

struct particlegroup_s { // 0xf0
	/* 0x00 */ int type;
	/* 0x04 */ int particleID;
	/* 0x08 */ int flags;
	/* 0x0c */ float time;
	/* 0x10 */ float endTime;
	/* 0x14 */ void *ref;
	/* 0x18 */ u8 *data;
	/* 0x1c */ int numPoints;
	/* 0x20 */ float pos[3];
	/* 0x2c */ float groundHeight;
	/* 0x30 */ float ratePerSecond;
	/* 0x34 */ int viewMask;
	/* 0x38 */ float delay;
	/* 0x3c */ float velocity[3];
	/* 0x48 */ float velocityRandom[3];
	/* 0x54 */ float velocityBias[3];
	/* 0x60 */ particlegroup_s *previous;
	/* 0x64 */ particlegroup_s *next;
	/* 0x68 */ float bbRelative[2][3];
	/* 0x80 */ float bbAbsolute[2][3];
	/* 0x98 */ int numRooms;
	/* 0x9c */ int rooms[20];
	/* 0xec */ particleClone *clones;
};

typedef particlegroup_s particlegroup;

enum {
	PARTICLEID_ROCKETSMOKETRAIL = 0,
	PARTICLEID_TNTSMOKETRAIL = 1,
	PARTICLEID_TNTSPARKTRAIL = 2,
	PARTICLEID_CLUSTER_GRENADESMOKETRAIL = 3,
	PARTICLEID_EMP_GRENADESMOKETRAIL = 4,
	PARTICLEID_GAS_GRENADESMOKETRAIL = 5,
	PARTICLEID_TIMED_GRENADESMOKETRAIL = 6,
	PARTICLEID_ROCKETSMOKESTREAM = 7,
	PARTICLEID_PLANETSPAWN = 8,
	PARTICLEID_SPHEREROTATESPAWN = 9,
	PARTICLEID_RINGSPAWN1 = 10,
	PARTICLEID_RINGSPAWN2 = 11,
	PARTICLEID_EXPLOSIONSMOKE = 12,
	PARTICLEID_EXPLOSIONSMOKETHICK = 13,
	PARTICLEID_BLASTSHARDORANGE = 14,
	PARTICLEID_CRATESMOKE = 15,
	PARTICLEID_CRATESMOKEQUICK = 16,
	PARTICLEID_PICKUPSPAWN = 17,
	PARTICLEID_TOXIC = 18,
	PARTICLEID_CRYSTAL = 19,
	PARTICLEID_TIMESPLITTER_HANDS = 20,
	PARTICLEID_TIMESPLITTER_RADIUS = 21,
	PARTICLEID_CRANESPARKS = 22,
	PARTICLEID_THICKCHIMNEYSMOKESTREAM = 23,
	PARTICLEID_MANHOLESMOKESTREAM = 24,
	PARTICLEID_DAMTUNNEL_THICKSTEAMSTREAM = 25,
	PARTICLEID_DAMSTAIRCASE_THICKSTEAMSTREAM = 26,
	PARTICLEID_FIREEXT_THICKFOAMSTREAM = 27,
	PARTICLEID_FLAMETORCHCINDERS = 28,
	PARTICLEID_TRAINSPARKS = 29,
	PARTICLEID_REDBLOOD = 30,
	PARTICLEID_GREENBLOOD = 31,
	PARTICLEID_SPLITTERBLOOD = 32,
	PARTICLEID_ROBOTBLOOD = 33,
	PARTICLEID_REDBLOODTHICK = 34,
	PARTICLEID_GREENBLOODTHICK = 35,
	PARTICLEID_SPLITTERBLOODTHICK = 36,
	PARTICLEID_ROBOTBLOODTHICK = 37,
	PARTICLEID_ELECTRICHIT = 38,
	PARTICLEID_BLUEGLOW = 39,
	PARTICLEID_REDHIT = 40,
	PARTICLEID_CHARHIT = 41,
	PARTICLEID_LASERSPARKS_GREEN = 42,
	PARTICLEID_LASERSPARKS_BLUE = 43,
	PARTICLEID_LASERSPARKS_PURPLE = 44,
	PARTICLEID_LASERSPARKS_ORANGE = 45,
	PARTICLEID_LASERSPARKS_RED = 46,
	PARTICLEID_GUIDEDROCKETSTRIPTRAIL = 47,
	PARTICLEID_FIXEDROCKETSTRIPTRAIL = 48,
	PARTICLEID_COPTERROCKETSTRIPTRAIL = 49,
	PARTICLEID_BULLETTRAIL = 50,
	PARTICLEID_ARCLASERTRAIL = 51,
	PARTICLEID_ARCLASERHIT_SPRITE = 52,
	PARTICLEID_WALLHUGGERTRAIL = 53,
	PARTICLEID_BREATH = 54,
	PARTICLEID_DAMAGESPARKS_PINK = 55,
	PARTICLEID_DAMAGESPARKS_YELLOW = 56,
	PARTICLEID_DAMAGESMOKE = 57,
	PARTICLEID_SHOWER = 58,
	PARTICLEID_INVSHOWER = 59,
	NUM_PARTICLE_ID = 60
};

enum {
	PARTICLE_SMOKE_TEXTURE = 0,
	PARTICLE_THICKSMOKE_TEXTURE = 1,
	PARTICLE_SPARK_TEXTURE = 2,
	PARTICLE_EXPLOSION_TEXTURE1 = 3,
	PARTICLE_EXPLOSION_TEXTURE2 = 4,
	PARTICLE_STAR_TEXTURE = 5,
	PARTICLE_GLOW_TEXTURE = 6,
	PARTICLE_BLAST_TEXTURE = 7,
	PARTICLE_LASER_TEXTURE = 8,
	PARTICLE_ELECTRIC_TEXTURE = 9,
	PARTICLE_ELECTRICHIT_TEXTURE = 10,
	PARTICLE_TRACER_TEXTURE = 11,
	PARTICLE_LASERHIT_TEXTURE = 12,
	PARTICLE_SPARKGREY_TEXTURE = 13,
	PARTICLE_CHARHIT_TEXTURE = 14,
	PARTICLE_MUZZLE_TEXTURE = 15,
	PARTICLE_LASERFOG_TEXTURE = 16,
	PARTICLE_LASERSTATIC_TEXTURE = 17,
	NUM_PARTICLE_TEXTURES = 18
};

enum {
	OWNER_PLAYER = 1,
	OWNER_CHARACTER = 2,
	OWNER_REMOTE = 3,
	OWNER_PLAYERREMOTE = 4,
	OWNER_DAMAPACHE = 5,
	OWNER_PROP = 6
};

enum {
	BULLETTYPE_NONE = -1,
	BULLETTYPE_PUNCH = 0,
	BULLETTYPE_SMALLBULLET = 1,
	BULLETTYPE_BIGBULLET = 2,
	BULLETTYPE_SHELL = 3,
	BULLETTYPE_ROCKET = 4,
	BULLETTYPE_FIXEDROCKET = 5,
	BULLETTYPE_MULTIROCKET = 6,
	BULLETTYPE_GUIDEDROCKET = 7,
	BULLETTYPE_APACHEROCKET = 8,
	BULLETTYPE_TIMED_GRENADE = 9,
	BULLETTYPE_GAS_GRENADE = 10,
	BULLETTYPE_CLUSTER_GRENADE = 11,
	BULLETTYPE_EMP_GRENADE = 12,
	BULLETTYPE_REMOTEMINE = 13,
	BULLETTYPE_TIMEDMINE = 14,
	BULLETTYPE_PROXIMITYMINE = 15,
	BULLETTYPE_TNT_NORMAL = 16,
	BULLETTYPE_TNT_ALT = 17,
	BULLETTYPE_BRICK = 18,
	BULLETTYPE_FLAME = 19,
	BULLETTYPE_PETROL = 20,
	BULLETTYPE_FOAM = 21,
	BULLETTYPE_EXPLOSION = 22,
	BULLETTYPE_LASERCOILS = 23,
	BULLETTYPE_ELECTRIC = 24,
	BULLETTYPE_ELECTROROCKET = 25,
	BULLETTYPE_WALLHUGGER = 26,
	BULLETTYPE_GREENLASERBOLT = 27,
	BULLETTYPE_PURPLELASERBOLT = 28,
	BULLETTYPE_ORANGELASERBOLT = 29,
	BULLETTYPE_BLUELASERBOLT = 30,
	BULLETTYPE_REDLASERBOLT = 31,
	BULLETTYPE_ARCLASER = 32,
	BULLETTYPE_DISC = 33,
	BULLETTYPE_FLARE = 34,
	BULLETTYPE_NUM = 35
};

enum {
	EXPLOSION_ROCKET = 0,
	EXPLOSION_NORMAL = 1,
	EXPLOSION_MUSHROOM = 2,
	EXPLOSION_MUSHROOM2 = 3,
	EXPLOSION_BLUEROCKET = 4,
	NUM_EXPLOSION_TYPES = 5
};

enum {
	BULLETFLAG_SILENCED = 1,
	BULLETFLAG_EXPLOSIVE = 2,
	BULLETFLAG_DESTROYGLASS = 4,
	BULLETFLAG_LIGHT = 8,
	BULLETFLAG_EXCLUDENOHITSPROP = 16
};

struct explosionDef_s { // 0x10
	/* 0x0 */ int explosionRenderType1;
	/* 0x4 */ int explosionRenderType2;
	/* 0x8 */ float damageFactor;
	/* 0xc */ float damageDist;
};

typedef explosionDef_s explosionDef;

enum {
	BLOOD_NORMAL = 0,
	BLOOD_THICK = 1
};

struct laserNode_s { // 0x1c
	/* 0x00 */ float origin[3];
	/* 0x0c */ float pos[3];
	/* 0x18 */ u32 alpha;
};

typedef laserNode_s laserNode;

struct laserCoil_s { // 0x1e0
	/* 0x000 */ int numNodes;
	/* 0x004 */ laserNode nodes[16];
	/* 0x1c4 */ float angle;
	/* 0x1c8 */ float cosangle;
	/* 0x1cc */ float sinangle;
	/* 0x1d0 */ float radius;
	/* 0x1d4 */ float timedelay;
	/* 0x1d8 */ float speed1;
	/* 0x1dc */ float speed2;
};

typedef laserCoil_s laserCoil;

struct laserData_s { // 0x974
	/* 0x000 */ int numCoils;
	/* 0x004 */ laserCoil coils[5];
	/* 0x964 */ float endpos[3];
	/* 0x970 */ float length;
};

typedef laserData_s laserData;

struct electricData_s { // 0x1c
	/* 0x00 */ float discardTime;
	/* 0x04 */ float translate;
	/* 0x08 */ float endpos[3];
	/* 0x14 */ float length;
	/* 0x18 */ u32 randAlpha;
};

typedef electricData_s electricData;

struct bullet_s { // 0xad0
	/* 0x000 */ int type;
	/* 0x004 */ int subType;
	/* 0x008 */ int damageType;
	/* 0x00c */ int flags;
	/* 0x010 */ int next;
	/* 0x014 */ int prev;
	/* 0x018 */ boolean ticked;
	/* 0x020 */ float pos[3];
	/* 0x02c */ float dir[3];
	/* 0x038 */ float rotvel[3];
	/* 0x044 */ float time;
	/* 0x048 */ prop *hitprop;
	/* 0x04c */ prop_s *prop;
	/* 0x050 */ particlegroup_s *particlefx[4];
	/* 0x060 */ int room;
	/* 0x064 */ float ricochet;
	/* 0x068 */ int isricochet;
	/* 0x06c */ int ownertype;
	/* 0x070 */ chrdata_s *firedByChr;
	/* 0x074 */ prop *firedByProp;
	/* 0x078 */ prop *attackerProp;
	/* 0x07c */ float RoomHitPos[3];
	/* 0x088 */ float RoomHitNorm[3];
	/* 0x094 */ prop *pRoomHitProp;
	/* 0x098 */ HitInfoDef RoomHitInfo;
	/* 0x0ac */ boolean FirstUpdate;
	/* 0x0b0 */ prop *pPropAttachedTo;
	/* 0x0b4 */ int MatrixNumAttachedTo;
	/* 0x0b8 */ float AttachedPos[3];
	/* 0x0c4 */ float AttachedNorm[3];
	/* 0x0d0 */ int detonationStage;
	/* 0x0d4 */ float normal[3];
	/* 0x0e0 */ prop_s *clip;
	/* 0x0e4 */ prop_s *mine;
	/* 0x0e8 */ float basepos;
	/* 0x0ec */ int bounces;
	/* 0x0f0 */ prop *target;
	/* 0x0f4 */ float targetpos[3];
	/* 0x100 */ int retargetcount;
	/* 0x104 */ int voice;
	/* 0x108 */ int soundsdone;
	/* 0x10c */ float alpha;
	/* 0x110 */ int aiming;
	/* 0x114 */ int shellsfx;
	/* 0x118 */ int explosionCauseType;
	/* 0x11c */ laserData laser;
	/* 0xa90 */ electricData electric;
	/* 0xaac */ float axis1[3];
	/* 0xab8 */ float axis2[3];
	/* 0xac4 */ float angle;
};

typedef bullet_s bullet;

struct bulletInfo_s { // 0x2c
	/* 0x00 */ int groupType;
	/* 0x04 */ float lightCol[3];
	/* 0x10 */ float dualShockDamage;
	/* 0x14 */ float dualShockSlowdown;
	/* 0x18 */ int decalType;
	/* 0x1c */ float decalScale;
	/* 0x20 */ int paintballabgr;
	/* 0x24 */ float paintballScale;
	/* 0x28 */ int flags;
};

typedef bulletInfo_s bulletInfo;

enum {
	DEATHFLAG_NONE = 0,
	DEATHFLAG_EXPLOSION = 1,
	DEATHFLAG_ALWAYSKILL = 2
};

struct pad_s { // 0x20
	/* 0x00 */ int extref;
	/* 0x04 */ u32 flags;
	/* 0x08 */ short int hallnum;
	/* 0x0a */ short int room;
	/* 0x0c */ float pos[3];
	/* 0x18 */ float roty;
	/* 0x1c */ int size;
};

typedef pad_s pad;

struct padv1_s { // 0x1c
	/* 0x00 */ int extref;
	/* 0x04 */ u32 flags;
	/* 0x08 */ short int hallnum;
	/* 0x0a */ short int room;
	/* 0x0c */ float pos[3];
	/* 0x18 */ float roty;
};

typedef padv1_s padv1;

struct padextrainfo_s { // 0x34
	/* 0x00 */ prop_s *closesthealth;
	/* 0x04 */ prop_s *closestarmour;
	/* 0x08 */ float closesthealthdist;
	/* 0x0c */ float closestarmourdist;
	/* 0x10 */ prop_s *closestdrop[4];
	/* 0x20 */ prop_s *closestgun[5];
};

typedef padextrainfo_s padextrainfo;

struct padfile_s { // 0xc
	/* 0x0 */ int revision;
	/* 0x4 */ int numpads;
	/* 0x8 */ int numlinks;
	/* 0xc */ union { // 0x0
		/* 0xc */ pad v2[0];
		/* 0xc */ padv1 v1[0];
	} pads;
};

typedef padfile_s padfile;

struct link_s { // 0x14
	/* 0x00 */ u32 flags;
	/* 0x04 */ int pad1num;
	/* 0x08 */ int pad2num;
	/* 0x0c */ float multiplier;
	/* 0x10 */ float cost;
};

typedef link_s link;

struct roomhalllinks_s { // 0x8
	/* 0x0 */ int numlinks;
	/* 0x4 */ link *links;
};

typedef roomhalllinks_s roomhalllinks;

struct propio_s { // 0x18
	/* 0x00 */ int extref;
	/* 0x04 */ int num;
	/* 0x08 */ float pos[3];
	/* 0x14 */ float roty;
};

typedef propio_s propio;

typedef enum {
	STATE_NULL = 0,
	STATE_ATTACK = 1,
	STATE_DEFEND = 2,
	STATE_TRACK_TARGET = 4,
	STATE_DYING = 8,
	STATE_SPAWN = 16,
	STATE_ARM = 32,
	STATE_SELECT_TARGET = 64,
	STATE_FINDBEARINGS = 128,
	STATE_FINDMYPAD = 256,
	STATE_FOLLOW_PASSIVE = 512,
	STATE_SLEEP = 1024,
	STATE_AMBUSH = 2048,
	STATE_PATROL = 4096,
	STATE_AWAKE = 8192,
	STATE_NOSLEEP = 16384,
	STATE_AMBUSHCROUCH = 32768,
	STATE_SNIPE1 = 65536,
	STATE_PILLARALIEN = 131072,
	STATE_NOROUTE = 262144,
	STATE_RUNAWAY = 524288,
	STATE_SNIPE = 1048576,
	STATE_BARRELROBOT = 2097152,
	STATE_GETHEALTH = 4194304,
	STATE_LIFT = 8388608,
	STATE_GAMEOVER = 16777216,
	STATE_GETARMOUR = 33554432,
	STATE_PLAYDEAD = 67108864,
	STATE_ONFIRE = 134217728,
	STATE_PRESSBUTTON = 268435456,
	STATE_STANDSHOOT = 536870912,
	STATE_CHARGE = 1073741824,
	STATE_MAX = 1073741825
} enemyState;

enum {
	canSeePlayer = 1
};

enum {
	AIFLAG_NULL = 0,
	AIFLAG_NOPROGRESS = 1,
	AIFLAG_SHOOTING = 2,
	AIFLAG_NOINFORM = 4,
	AIFLAG_ARM_GOFORFAVE = 8,
	AIFLAG_PICKEDUPHEALTH = 16,
	AIFLAG_NOHEAR = 32,
	AIFLAG_CTFTARGETBAG = 64,
	AIFLAG_CTFTARGETDROP = 128,
	AIFLAG_NOALERT = 256,
	AIFLAG_OFFSCREENMOVING = 512,
	AIFLAG_NOGRENADES = 1024,
	AIFLAG_SENTTOSLEEP = 2048,
	AIFLAG_PRESSBUTTON = 4096,
	AIFLAG_DEATHFALLEN = 8192,
	AIFLAG_NOVISIBLESPAWN = 16384,
	AIFLAG_NOCRATESHOOT = 32768,
	AIFLAG_BLOCKED = 65536,
	AIFLAG_PICKEDUPGUN = 131072,
	AIFLAG_NOBREAKCOVER = 262144,
	AIFLAG_ONFIRE = 524288,
	AIFLAG_PARTIALALERT = 1048576,
	AIFLAG_ALERT = 2097152,
	AIFLAG_PATROLNOTURNANIM = 4194304,
	AIFLAG_CANBECLONED = 8388608,
	AIFLAG_ISACLONE = 16777216,
	AIFLAG_RUNTOPATROL = 33554432,
	AIFLAG_OUTDOOR = 67108864,
	AIFLAG_CANZOMBIFY = 134217728,
	AIFLAG_INSTANTGETUP = 268435456,
	AIFLAG_TARGETSPROP = 536870912,
	AIFLAG_SEENBYAPLAYER = 1073741824,
	AIFLAG_PICKEDUPARMOUR = -2147483648
};

enum {
	TEAMFLAG_NULL = 0,
	TEAMFLAG_GOTOPPONENTSBAG = 1,
	TEAMFLAG_GOTOURBAG = 2,
	TEAMFLAG_OPPONENTSGOTOURBAG = 4,
	TEAMFLAG_OPPONENTSGOTTHEIRBAG = 8,
	TEAMFLAG_ESCORT = 16,
	TEAMFLAG_ASSASSIN = 32
};

enum {
	ST_NULL = 0,
	ST_BYSIGHT = 1,
	ST_BYCOLLISION = 2,
	ST_BYDAMAGE = 3,
	ST_BYTRIGGER = 4
};

enum {
	EPA_PILLAR = 0,
	EPA_AWAKENING = 1,
	EPA_AWOKEN = 2
};

enum {
	AOT_UNAWARE = 0,
	AOT_SIGHTACTIVATED = 1,
	AOT_SOUNDACTIVATED = 2,
	AOT_PARTIALLYAWARE = 3
};

struct triggerpad_s { // 0x8
	/* 0x0 */ int pad;
	/* 0x4 */ int id;
};

typedef triggerpad_s triggerpad;

struct padprop_s { // 0x8
	/* 0x0 */ int pad;
	/* 0x4 */ prop *prop;
};

typedef padprop_s padprop;

struct aifireinfo_s { // 0xc
	/* 0x0 */ float minrange;
	/* 0x4 */ float maxrange;
	/* 0x8 */ int repeatfire;
};

typedef aifireinfo_s aifireinfo;

struct explosioninfo_s { // 0x10
	/* 0x0 */ float pos[3];
	/* 0xc */ int id;
};

typedef explosioninfo_s explosioninfo;

struct lookup_s { // 0xc
	/* 0x0 */ int canseechr;
	/* 0x4 */ int framechecked;
	/* 0x8 */ int framechanged;
};

typedef lookup_s lookup;

struct communicationList_s { // 0x34
	/* 0x00 */ int numactive;
	/* 0x04 */ prop *p[12];
};

typedef communicationList_s communicationList;

enum {
	ALARMSTATE_OFF = 0,
	ALARMSTATE_ON = 1
};

struct alarmdata_s { // 0x1c
	/* 0x00 */ int setupref;
	/* 0x04 */ int commlist;
	/* 0x08 */ float duration;
	/* 0x0c */ prop *triggerprop;
	/* 0x10 */ int state;
	/* 0x14 */ float timer1;
	/* 0x18 */ float timer2;
};

typedef alarmdata_s alarmdata;

enum {
	INFTYPE_CHR = 0,
	INFTYPE_ALARM = 1
};

enum {
	EP_SETUPPATROL = 0,
	EP_UNAWARE = 1,
	EP_CURIOUS = 2,
	EP_PARTIALALERT = 3,
	EP_ALERT = 4,
	EP_REACT = 5,
	EP_RUNTOPATROL = 6
};

enum {
	FOLLOW_USEPADS = 0,
	FOLLOW_USELOS = 1,
	FOLLOW_STOPPED = 2,
	FOLLOW_GETOUTOFWAY = 4,
	FOLLOW_GOAHEAD = 8,
	FOLLOW_GOTOPAD = 16,
	FOLLOW_WAIT = 32,
	FOLLOW_COWER = 64
};

enum {
	AI_SFX_INFORMALERT = 0,
	AI_SFX_REACT = 1
};

enum {
	WEATHER_NORMAL = 0,
	WEATHER_RAIN = 1,
	WEATHER_STORM = 2,
	WEATHER_SNOW = 3,
	WEATHER_FIREFLIES = 4
};

struct weatherinfo_s { // 0x24
	/* 0x00 */ int numweatherdata;
	/* 0x04 */ weatherdata_s *data;
	/* 0x08 */ int currentweather;
	/* 0x0c */ int destweather;
	/* 0x10 */ float ratio;
	/* 0x14 */ float windspeed[3];
	/* 0x20 */ float windtime;
};

typedef weatherinfo_s weatherinfo;

struct bumpmapPlane_s { // 0x2c
	/* 0x00 */ float normal[3];
	/* 0x0c */ rgba_t *palette[4];
	/* 0x1c */ int frameUpdated[4];
};

typedef bumpmapPlane_s bumpmapPlane;

struct bumpmapData_s { // 0x10c
	/* 0x000 */ int numPlanes;
	/* 0x004 */ bumpmapPlane planes[6];
};

typedef bumpmapData_s bumpmapData;

struct localhead_s { // 0x10
	/* 0x0 */ u32 id[2];
	/* 0x8 */ s32 length;
	/* 0xc */ u8 *check;
};

typedef localhead_s localhead_t;

struct dynamicMemoryNode_s { // 0x14
	/* 0x00 */ int type;
	/* 0x04 */ int length;
	/* 0x08 */ int previousLength;
	/* 0x0c */ void *ref;
	/* 0x10 */ void (*callback)(/* parameters unknown */);
};

typedef dynamicMemoryNode_s dynamicMemoryNode;

struct mousedata_s { // 0x80
	/* 0x00 */ char len;
	/* 0x01 */ char buttons;
	/* 0x02 */ char x;
	/* 0x03 */ char y;
	/* 0x04 */ char wheel;
	/* 0x05 */ char extra[123];
};

typedef mousedata_s mousedata_t;

enum {
	FONTLOADFLAG_DUMMY = 1,
	FONTLOADFLAG_FRONTEND = 2,
	FONTLOADFLAG_LEVEL = 4,
	FONTLOADFLAG_MAPMAKER = 8,
	FONTLOADFLAG_CREDITS = 16,
	FONTLOADFLAG_CLAMP = 32,
	FONTLOADFLAG_LANGUAGE = 64
};

struct capsinfo_s { // 0x4
	/* 0x0 */ u8 left;
	/* 0x1 */ u8 width;
	/* 0x2 */ u8 height;
	/* 0x3 */ u8 basechar;
};

typedef capsinfo_s capsinfo_t;

struct textCallbackData_s { // 0x1c
	/* 0x00 */ textfx *fx;
	/* 0x04 */ mtx_u *matrix;
	/* 0x08 */ textSettings3D *settings;
	/* 0x0c */ int yFadeTopStart;
	/* 0x10 */ int yFadeTopEnd;
	/* 0x14 */ int yFadeBottomStart;
	/* 0x18 */ int yFadeBottomEnd;
};

typedef textCallbackData_s textCallbackData;

struct controller_s { // 0x180
	/* 0x000 */ u128 dmabuf[16];
	/* 0x100 */ int port;
	/* 0x104 */ int slot;
	/* 0x108 */ int state;
	/* 0x10c */ int laststate;
	/* 0x110 */ int phase;
	/* 0x114 */ int termid;
	/* 0x118 */ int rtermid;
	/* 0x11c */ int lastbut;
	/* 0x120 */ int curbut;
	/* 0x124 */ int newbut;
	/* 0x128 */ int releasebut;
	/* 0x12c */ int axisX1;
	/* 0x130 */ int axisX2;
	/* 0x134 */ int axisY1;
	/* 0x138 */ int axisY2;
	/* 0x13c */ float centrezone;
	/* 0x140 */ u8 act_direct[6];
	/* 0x146 */ u8 act_align[6];
	/* 0x14c */ int actlefttime;
	/* 0x150 */ int actrighttime;
	/* 0x154 */ int clearedbuts;
	/* 0x158 */ int pad[10];
};

typedef controller_s controller;

struct demoheader_s { // 0x6c
	/* 0x00 */ resetgameparms gameparms;
};

typedef demoheader_s demoheader_t;

// warning: multiple differing types with the same name (size not equal)
struct cheatdef_s { // 0x30
	/* 0x00 */ u16 buttons[20];
	/* 0x28 */ int numbuttons;
	/* 0x2c */ void (*func)(/* parameters unknown */);
};

typedef cheatdef_s cheatdef;
typedef int (*sceSdTransIntrHandler)(/* parameters unknown */);
typedef int (*sceSdSpu2IntrHandler)(/* parameters unknown */);

typedef struct { // 0x8
	/* 0x0 */ u_short func;
	/* 0x2 */ u_short entry;
	/* 0x4 */ u_int value;
} sceSdBatch;

typedef struct { // 0x14
	/* 0x00 */ int core;
	/* 0x04 */ int mode;
	/* 0x08 */ short int depth_L;
	/* 0x0a */ short int depth_R;
	/* 0x0c */ int delay;
	/* 0x10 */ int feedback;
} sceSdEffectAttr;

struct soundbuffer_s { // 0x10
	/* 0x0 */ int sfxloadpos;
	/* 0x4 */ int sfxloadsize;
	/* 0x8 */ int cursfxloadpos;
	/* 0xc */ int cursfxloadleft;
};

typedef soundbuffer_s soundbuffer;

struct loopsound_s { // 0x20
	/* 0x00 */ sound *snd;
	/* 0x04 */ int sfxnum;
	/* 0x08 */ int voice;
	/* 0x0c */ int haspos;
	/* 0x10 */ float pos[3];
	/* 0x1c */ float range;
};

typedef loopsound_s loopsound;

struct delaysound_s { // 0x20
	/* 0x00 */ int state;
	/* 0x04 */ int sfxnum;
	/* 0x08 */ u16 haspos;
	/* 0x0a */ u16 locked;
	/* 0x0c */ float pos[3];
	/* 0x18 */ int delay;
	/* 0x1c */ int voice;
};

typedef delaysound_s delaysound;

enum {
	DS_FREE = 0,
	DS_WAIT = 1,
	DS_TRANSIOPSTART = 2,
	DS_TRANSIOPWAIT = 3,
	DS_TRANSSPUSTART = 4,
	DS_TRANSSPUWAIT = 5,
	DS_PLAY = 6,
	DS_NUM = 7
};

enum {
	MUSIC_OFF = 0,
	MUSIC_PAUSED = 1,
	MUSIC_RUNNING = 2
};

// warning: multiple differing types with the same name (fields size not equal)
struct menu_s { // 0x10
	/* 0x0 */ int numitems;
	/* 0x4 */ s16 baseleft;
	/* 0x6 */ s16 basetop;
	/* 0x8 */ void *spare[2];
};

typedef menu_s menu_t;

// warning: multiple differing types with the same name (fields size not equal)
struct menuitem_s { // 0x20
	/* 0x00 */ char *text;
	/* 0x04 */ s16 left;
	/* 0x06 */ s16 top;
	/* 0x08 */ u16 id;
	/* 0x0a */ u16 flags;
	/* 0x0c */ void *data;
	/* 0x10 */ u16 next[4];
	/* 0x18 */ void *spare[2];
};

typedef menuitem_s menuitem_t;

// warning: multiple differing types with the same name (descriptor not equal)
struct menulist_s { // 0x10
	/* 0x0 */ u16 numitems;
	/* 0x2 */ u16 numdisplay;
	/* 0x4 */ s16 baseleft;
	/* 0x6 */ s16 basetop;
	/* 0x8 */ u16 flags;
	/* 0xa */ u16 selected;
	/* 0xc */ u8 firstdisplay[4];
};

typedef menulist_s menulist_t;

struct zoomboxinfo_s { // 0x28
	/* 0x00 */ rect_t s;
	/* 0x10 */ u32 bgcol;
	/* 0x14 */ int left;
	/* 0x18 */ int top;
	/* 0x1c */ int width;
	/* 0x20 */ int height;
	/* 0x24 */ int frame;
};

typedef zoomboxinfo_s zoomboxinfo_t;

struct snd_s { // 0x8
	/* 0x0 */ int cursound;
	/* 0x4 */ s16 *envelope;
};

typedef snd_s snd_t;

struct rate_s { // 0x8
	/* 0x0 */ int value;
	/* 0x4 */ float time;
};

typedef rate_s rate_t;
// warning: multiple differing types with the same name (type name not equal)
typedef boolean (*msgfunc_t)(/* parameters unknown */);

enum {
	main_sound = 1,
	main_soundfile = 2,
	main_msg = 3,
	main_envelope = 4,
	main_env1 = 5,
	main_env2 = 6,
	main_env3 = 7,
	main_env4 = 8,
	main_env5 = 9,
	main_pitch = 10,
	main_volume = 11,
	main_save = 12,
	main_last = 13
};

enum {
	MCARD_TYPE_NONE = 0,
	MCARD_TYPE_PS1 = 1,
	MCARD_TYPE_PS2 = 2,
	MCARD_TYPE_POCKETSTATION = 3,
	MCARD_TYPE_NUM = 4
};

enum {
	MCSTATE_IDLE = 0,
	MCSTATE_CHECKCARDS_INIT = 1,
	MCSTATE_CHECKCARDS_FLUSHFUNC = 2,
	MCSTATE_CHECKCARDS_START = 3,
	MCSTATE_CHECKCARDS_WAIT = 4,
	MCSTATE_CHECKCARDS_NEXT = 5,
	MCSTATE_FORMAT_START = 6,
	MCSTATE_FORMAT_WAIT = 7,
	MCSTATE_GETENTSPACE_START = 8,
	MCSTATE_GETENTSPACE_WAIT = 9,
	MCSTATE_EXISTS_OPEN_START = 10,
	MCSTATE_EXISTS_OPEN_WAIT = 11,
	MCSTATE_EXISTS_CLOSE_START = 12,
	MCSTATE_EXISTS_CLOSE_WAIT = 13,
	MCSTATE_MKDIR_START = 14,
	MCSTATE_MKDIR_WAIT = 15,
	MCSTATE_MKDIR_GETDIR_START = 16,
	MCSTATE_MKDIR_GETDIR_WAIT = 17,
	MCSTATE_MKDIR_ICONSYS_OPEN_START = 18,
	MCSTATE_MKDIR_ICONSYS_OPEN_WAIT = 19,
	MCSTATE_MKDIR_ICONSYS_WRITE_START = 20,
	MCSTATE_MKDIR_ICONSYS_WRITE_WAIT = 21,
	MCSTATE_MKDIR_ICONSYS_CLOSE_START = 22,
	MCSTATE_MKDIR_ICONSYS_CLOSE_WAIT = 23,
	MCSTATE_MKDIR_ICON1_OPEN_START = 24,
	MCSTATE_MKDIR_ICON1_OPEN_WAIT = 25,
	MCSTATE_MKDIR_ICON1_WRITE_START = 26,
	MCSTATE_MKDIR_ICON1_WRITE_WAIT = 27,
	MCSTATE_MKDIR_ICON1_CLOSE_START = 28,
	MCSTATE_MKDIR_ICON1_CLOSE_WAIT = 29,
	MCSTATE_MKDIR_SETATTR_START = 30,
	MCSTATE_MKDIR_SETATTR_WAIT = 31,
	MCSTATE_READ_OPEN_START = 32,
	MCSTATE_READ_OPEN_WAIT = 33,
	MCSTATE_READ_SEEK_START = 34,
	MCSTATE_READ_SEEK_WAIT = 35,
	MCSTATE_READ_READ_START = 36,
	MCSTATE_READ_READ_WAIT = 37,
	MCSTATE_READ_CLOSE_START = 38,
	MCSTATE_READ_CLOSE_WAIT = 39,
	MCSTATE_WRITE_OPEN_START = 40,
	MCSTATE_WRITE_OPEN_WAIT = 41,
	MCSTATE_WRITE_SEEK_START = 42,
	MCSTATE_WRITE_SEEK_WAIT = 43,
	MCSTATE_WRITE_WRITE_START = 44,
	MCSTATE_WRITE_WRITE_WAIT = 45,
	MCSTATE_WRITE_CLOSE_START = 46,
	MCSTATE_WRITE_CLOSE_WAIT = 47,
	MCSTATE_DELETE_START = 48,
	MCSTATE_DELETE_WAIT = 49,
	MCSTATE_NUM = 50
};

enum {
	ROOMLIGHT_FIXED = 0,
	ROOMLIGHT_SINE = 1,
	ROOMLIGHT_SQUARE = 2,
	ROOMLIGHT_RANDOM = 3,
	ROOMLIGHT_NUM = 4
};

struct roomlightinit_s { // 0x18
	/* 0x00 */ int type;
	/* 0x04 */ float speed;
	/* 0x08 */ float frac;
	/* 0x0c */ u32 mincol;
	/* 0x10 */ u32 maxcol;
	/* 0x14 */ u32 col;
};

typedef roomlightinit_s roomlightinit;

struct hudHealthArmourSegment_s { // 0x14
	/* 0x00 */ float healthArmourThreshold;
	/* 0x04 */ float gfxThreshold;
	/* 0x08 */ int col[3];
};

typedef hudHealthArmourSegment_s hudHealthArmourSegment;

enum {
	HUDMESSAGE_NONE = 0,
	HUDMESSAGE_FADE = 1,
	HUDMESSAGE_SMALLFADE = 2,
	HUDMESSAGE_SCROLL = 3,
	HUDMESSAGE_MAIN = 4,
	HUDMESSAGE_OBJECTIVE = 5,
	HUDMESSAGE_TYPES = 6
};

struct hudMessage_s { // 0x11c
	/* 0x000 */ int type;
	/* 0x004 */ u8 text[256];
	/* 0x104 */ objective_s *objectiveMessage;
	/* 0x108 */ float time;
	/* 0x10c */ float waitTime;
	/* 0x110 */ float moveTime;
	/* 0x114 */ float lifeTime;
	/* 0x118 */ float forceOutTime;
};

typedef hudMessage_s hudMessage;

enum {
	HUDTYPE_NONE = -1,
	HUDTYPE_NORMAL = 0,
	HUDTYPE_CONVENTIONAL = 1,
	HUDTYPE_SCIFI = 2,
	HUDTYPE_SNIPER = 3,
	HUDTYPE_SNIPERZOOM = 4,
	HUDTYPE_FIXED = 5,
	HUDTYPE_REMOTEDEVICE = 6,
	HUDTYPE_NUM = 7
};

struct hudHealthArmourData_s { // 0x144
	/* 0x000 */ boolean healthSegmentOn[20];
	/* 0x050 */ boolean armourSegmentOn[20];
	/* 0x0a0 */ float healthSegmentFadeTime[20];
	/* 0x0f0 */ float armourSegmentFadeTime[20];
	/* 0x140 */ float hudBarsTime;
};

typedef hudHealthArmourData_s hudHealthArmourData;

struct hudplrparms_s { // 0x920
	/* 0x000 */ int type;
	/* 0x004 */ float lasthealth;
	/* 0x008 */ float lastarmour;
	/* 0x00c */ float lasthealthtime;
	/* 0x010 */ float lastarmourtime;
	/* 0x014 */ int lastdtime;
	/* 0x018 */ int damagetime;
	/* 0x01c */ int ranktimer;
	/* 0x020 */ int ranktimertime;
	/* 0x024 */ float radartime;
	/* 0x028 */ int currentMessage;
	/* 0x02c */ int numMessages;
	/* 0x030 */ hudMessage messages[8];
	/* 0x910 */ float oldMeter[2];
	/* 0x918 */ float meter[2];
};

typedef hudplrparms_s hudplrparms_t;

struct hudparms_s { // 0x2480
	/* 0x0000 */ hudplrparms_t plr[4];
};

typedef hudparms_s hudparms_t;
typedef void devguiresponder_t(/* parameters unknown */);
typedef char* devguigetstr_t(/* parameters unknown */);

enum {
	DEVGUIMSGTYPE_MENUCLICK = 1,
	DEVGUIMSGTYPE_LEFTCLICK = 2,
	DEVGUIMSGTYPE_MIDDLECLICK = 3,
	DEVGUIMSGTYPE_LEFTCLICKHOLD = 4,
	DEVGUIMSGTYPE_MIDDLECLICKHOLD = 5
};

struct devguimsg_s { // 0x20
	/* 0x00 */ int type;
	/* 0x04 */ devguiwin_s *window;
	/* 0x08 */ int winclickx;
	/* 0x0c */ int winclicky;
	/* 0x10 */ devguimnu_s *menu;
	/* 0x14 */ devguibtn_s *button;
	/* 0x18 */ int btnclickx;
	/* 0x1c */ int btnclicky;
};

typedef devguimsg_s devguimsg_t;

enum {
	DEVGUIBTNTYPE_LABEL = 0,
	DEVGUIBTNTYPE_BUTTON = 1,
	DEVGUIBTNTYPE_CHECKBOX = 2,
	DEVGUIBTNTYPE_PUSHBUTTON = 3,
	DEVGUIBTNTYPE_RADIOBUTTON = 4,
	DEVGUIBTNTYPE_LIST = 5,
	DEVGUIBTNTYPE_ARROWUP = 6,
	DEVGUIBTNTYPE_ARROWDOWN = 7,
	DEVGUIBTNTYPE_SLIDER = 8,
	DEVGUIBTNTYPE_NUM = 9
};

enum {
	ID_USER = 2000
};

struct devguibtn_s { // 0x2c
	/* 0x00 */ int id;
	/* 0x04 */ int type;
	/* 0x08 */ int left;
	/* 0x0c */ int top;
	/* 0x10 */ int width;
	/* 0x14 */ int height;
	/* 0x18 */ u8 *caption;
	/* 0x1c */ union { // 0x4
		/* 0x1c */ devguilistinfo_s *listinfo;
		/* 0x1c */ devguibtn_s *parent;
		/* 0x1c */ int state;
	} data;
	/* 0x20 */ boolean focus;
	/* 0x24 */ devguibtn_s *next;
	/* 0x28 */ devguibtn_s *sub;
};

typedef devguibtn_s devguibtn_t;

struct devguilistinfo_s { // 0x94
	/* 0x00 */ int count;
	/* 0x04 */ int index;
	/* 0x08 */ int selected;
	/* 0x0c */ devguigetstr_t *getstr;
	/* 0x10 */ devguibtn_t toparrow;
	/* 0x3c */ devguibtn_t slider;
	/* 0x68 */ devguibtn_t downarrow;
};

typedef devguilistinfo_s devguilistinfo_t;

struct devguimnu_s { // 0x4
	/* 0x0 */ devguibtn_s *buttons;
};

typedef devguimnu_s devguimnu_t;

struct devguiwin_s { // 0x64
	/* 0x00 */ u8 *title;
	/* 0x04 */ int left;
	/* 0x08 */ int top;
	/* 0x0c */ int width;
	/* 0x10 */ int height;
	/* 0x14 */ devguiresponder_t *responder;
	/* 0x18 */ void (*drawer)(/* parameters unknown */);
	/* 0x1c */ devguimnu_s *menu;
	/* 0x20 */ devguibtn_s *buttons;
	/* 0x24 */ boolean visible;
	/* 0x28 */ int borderleft;
	/* 0x2c */ int bordertop;
	/* 0x30 */ int borderright;
	/* 0x34 */ int borderbottom;
	/* 0x38 */ devguibtn_s titlebtn;
};

typedef devguiwin_s devguiwin_t;

enum {
	OBJECTIVE_TYPE_NONE = -1,
	OBJECTIVE_TYPE_MAIN = 0,
	OBJECTIVE_TYPE_SECONDARY = 1,
	OBJECTIVE_TYPE_BONUS = 2,
	OBJECTIVE_NUM_TYPES = 3
};

enum {
	OBJECTIVE_STATE_NOTINLEVEL = 0,
	OBJECTIVE_STATE_UNREVEALED = 1,
	OBJECTIVE_STATE_INCOMPLETE = 2,
	OBJECTIVE_STATE_FAILED = 3,
	OBJECTIVE_STATE_COMPLETE = 4
};

enum {
	OBJECTIVE_FLAG_COUNTER = 1
};

struct objective_s { // 0x20
	/* 0x00 */ u8 *text;
	/* 0x04 */ int flags;
	/* 0x08 */ int (*handler1)(/* parameters unknown */);
	/* 0x0c */ int (*handler2)(/* parameters unknown */);
	/* 0x10 */ int type[3];
	/* 0x1c */ int state;
};

typedef objective_s objective;

struct checkpoint_s { // 0x14
	/* 0x00 */ float pos[3];
	/* 0x0c */ float radiusxz;
	/* 0x10 */ float radiusy;
};

typedef checkpoint_s checkpoint;

struct checkrect_s { // 0x18
	/* 0x00 */ float min[3];
	/* 0x0c */ float max[3];
};

typedef checkrect_s checkrect;

enum {
	RANKINGS_SCORES = 0,
	RANKINGS_KILLS = 1,
	RANKINGS_LOSSES = 2,
	RANKINGS_NUMTYPES = 3
};

struct rankData_s { // 0x220
	/* 0x000 */ bubblesort_t table[58];
	/* 0x1d0 */ bubblesort_t *rank[18];
	/* 0x218 */ int numRank;
	/* 0x21c */ int playerRank;
};

typedef rankData_s rankData;

struct igmplayer_s { // 0xde0
	/* 0x000 */ mtx_u scrollMatrixDl;
	/* 0x040 */ mtx_u tentacleMatrixDl;
	/* 0x080 */ mtx_u scrollMatrixUcodeBuffer[2];
	/* 0x100 */ mtx_u tentacleMatrixUcodeBuffer[2];
	/* 0x180 */ mtx_u *scrollMatrixUcode;
	/* 0x184 */ mtx_u *tentacleMatrixUcode;
	/* 0x190 */ mtx_u barsMatrix;
	/* 0x1d0 */ mtx_u perspectiveMatrix;
	/* 0x210 */ int mnum;
	/* 0x214 */ float frustrumHalfWidth;
	/* 0x218 */ float frustrumHalfHeight;
	/* 0x21c */ window_t window;
	/* 0x260 */ int level;
	/* 0x264 */ int oldLevel;
	/* 0x268 */ int flags;
	/* 0x26c */ float time;
	/* 0x270 */ float worldpos[3];
	/* 0x27c */ float startworldpos[3];
	/* 0x288 */ float destworldpos[3];
	/* 0x294 */ textSettings3D textSettings;
	/* 0x2a8 */ float exitTime;
	/* 0x2ac */ float tentacleRotateTimeVertical;
	/* 0x2b0 */ float tentacleRotateTimeHorizontal;
	/* 0x2b4 */ float tentacleRotateAngleVertical;
	/* 0x2b8 */ float tentacleRotateAngleHorizontal;
	/* 0x2bc */ float tentacleDirectionHorizontal;
	/* 0x2c0 */ rankData rankings[3];
	/* 0x920 */ pagedef_t *scrollPageIn;
	/* 0x924 */ pagedef_t *scrollPageOut;
	/* 0x928 */ float scrollTime;
	/* 0x92c */ float scrollDurationX;
	/* 0x930 */ float scrollDurationY;
	/* 0x934 */ prop *inventoryProp;
	/* 0x938 */ int inventoryPropItemID;
	/* 0x93c */ int inventoryItemID;
	/* 0x940 */ float inventoryItemTime;
	/* 0x944 */ float inventoryScale;
	/* 0x948 */ int numInventoryItems;
	/* 0x94c */ int inventoryIDs[20];
	/* 0x99c */ s8 *inventoryItemNames[20];
	/* 0x9ec */ boolean inventoryItemSelectable[20];
	/* 0xa3c */ int inventoryItemAmmo[20];
	/* 0xa8c */ int inventoryItemAmmoType[20];
	/* 0xadc */ int inventoryItemAmmoSecondary[20];
	/* 0xb2c */ int inventoryItemAmmoTypeSecondary[20];
	/* 0xb7c */ int inventoryItemClipCount[20];
	/* 0xbcc */ playerprefs_t newprefs;
	/* 0xc88 */ int newcontrols[42];
	/* 0xd30 */ int tmpcontrols[42];
};

typedef igmplayer_s igmplayer_t;

struct igmparms_s { // 0x3780
	/* 0x0000 */ igmplayer_t plr[4];
};

typedef igmparms_s igmparms_t;

struct menufxTentacleNode_s { // 0x150
	/* 0x000 */ float pos[4];
	/* 0x010 */ float points[8][4];
	/* 0x090 */ float stq[8][3];
	/* 0x0f0 */ float radius;
	/* 0x0f4 */ float circlex[8];
	/* 0x114 */ float circley[8];
	/* 0x134 */ float axis1[3];
	/* 0x140 */ float axis2[3];
};

typedef menufxTentacleNode_s menufxTentacleNode;

struct menufxTentacle_s { // 0xd50
	/* 0x000 */ menufxTentacleNode nodes[10];
	/* 0xd20 */ float startpos[3];
	/* 0xd2c */ float endpos[3];
	/* 0xd38 */ float time;
	/* 0xd3c */ float noiseval0;
	/* 0xd40 */ float noiseval1;
	/* 0xd44 */ float noiseSpeed;
	/* 0xd48 */ float noiseOffset;
};

typedef menufxTentacle_s menufxTentacle;

enum {
	PAGEBAR_ON = 0,
	PAGEBAR_OFF = 1,
	PAGEBAR_NA = 2
};

enum {
	IGM_SETUPCONFIRM_TITLE = 0,
	IGM_SETUPCONFIRM_YES = 1,
	IGM_SETUPCONFIRM_NO = 2,
	IGM_SETUPCONFIRM_NUM = 3
};

enum {
	GAME_AXIS_HORIZONTAL = 0,
	GAME_AXIS_VERTICAL = 1,
	GAME_AXIS_EITHER = 2
};

enum {
	IGM_SETUP_TITLE = 0,
	IGM_SETUP_CONFIGURATION = 1,
	IGM_SETUP_VIEW = 2,
	IGM_SETUP_L1 = 3,
	IGM_SETUP_L2 = 4,
	IGM_SETUP_R1 = 5,
	IGM_SETUP_R2 = 6,
	IGM_SETUP_SQUARE = 7,
	IGM_SETUP_TRIANGLE = 8,
	IGM_SETUP_CIRCLE = 9,
	IGM_SETUP_CROSS = 10,
	IGM_SETUP_R3 = 11,
	IGM_SETUP_RIGHT_ANALOGUE = 12,
	IGM_SETUP_RIGHT_ANALOGUE_UPDOWN = 13,
	IGM_SETUP_RIGHT_ANALOGUE_LEFTRIGHT = 14,
	IGM_SETUP_L3 = 15,
	IGM_SETUP_LEFT_ANALOGUE = 16,
	IGM_SETUP_LEFT_ANALOGUE_UPDOWN = 17,
	IGM_SETUP_LEFT_ANALOGUE_LEFTRIGHT = 18,
	IGM_SETUP_DPAD = 19,
	IGM_SETUP_DPAD_UPDOWN = 20,
	IGM_SETUP_DPAD_LEFTRIGHT = 21,
	IGM_SETUP_ACCEPT = 22,
	IGM_SETUP_CANCEL = 23,
	IGM_SETUP_NUM = 24
};

enum {
	IGM_PREFSACCEPT_TITLE = 0,
	IGM_PREFSACCEPT_YES = 1,
	IGM_PREFSACCEPT_NO = 2,
	IGM_PREFSACCEPT_NUM = 3
};

enum {
	IGM_PREFS_TITLE = 0,
	IGM_PREFS_AUTOAIM = 1,
	IGM_PREFS_INVERSELOOK = 2,
	IGM_PREFS_AIMMODE = 3,
	IGM_PREFS_CROUCHMODE = 4,
	IGM_PREFS_AUTOLOOKAHEAD = 5,
	IGM_PREFS_WEAPONCHANGE = 6,
	IGM_PREFS_VIBRATION = 7,
	IGM_PREFS_VIBRATIONMODE = 8,
	IGM_PREFS_ACCEPT = 9,
	IGM_PREFS_CANCEL = 10,
	IGM_PREFS_NUM = 11
};

enum {
	IGM_CONFIRMEND_TITLE = 0,
	IGM_CONFIRMEND_YES = 1,
	IGM_CONFIRMEND_NO = 2,
	IGM_CONFIRMEND_NUM = 3
};

enum {
	IGM_CONFIRMRESTART_TITLE = 0,
	IGM_CONFIRMRESTART_YES = 1,
	IGM_CONFIRMRESTART_NO = 2,
	IGM_CONFIRMRESTART_NUM = 3
};

enum {
	IGM_STATS_TITLE = 0,
	IGM_STATS_NUM = 1
};

enum {
	IGM_AWARDS_TITLE = 0,
	IGM_AWARDS_NUM = 1
};

enum {
	IGM_ENDGAME_TITLE = 0,
	IGM_ENDGAME_CONTINUERESTART = 1,
	IGM_ENDGAME_QUIT = 2,
	IGM_ENDGAME_NUM = 3
};

enum {
	IGM_OPTIONS_TITLE = 0,
	IGM_OPTIONS_CONTINUE = 1,
	IGM_OPTIONS_SETUP = 2,
	IGM_OPTIONS_PREFERENCES = 3,
	IGM_OPTIONS_RESTART = 4,
	IGM_OPTIONS_QUIT = 5,
	IGM_OPTIONS_NUM = 6
};

enum {
	IGM_SCORES_TITLE = 0,
	IGM_SCORES_NUM = 1
};

enum {
	IGM_INVENTORY_TITLE = 0,
	IGM_INVENTORY_NUM = 1
};

enum {
	IGM_STATUS_TITLE = 0,
	IGM_STATUS_NUM = 1
};

enum {
	IGM_BRIEFING_TITLE = 0,
	IGM_BRIEFING_NUM = 1
};

typedef struct { // 0x4
	/* 0x0 */ u16 keyframenum;
	/* 0x2 */ u16 tags;
} kftaginfo_t;

typedef struct { // 0x10
	/* 0x0 */ int version;
	/* 0x4 */ int animProperties;
	/* 0x8 */ int numKeyframes;
	/* 0xc */ int numTaggedKeyframes;
	/* 0x10 */ kftaginfo_t tags[0];
} animinfoheader_t;

enum {
	ANIMINFO_RIGHTFOOT_IMPORTED = -2147483648
};

enum {
	KEYFRAMETAG_LEFTFOOT = 1,
	KEYFRAMETAG_RIGHTFOOT = 2,
	KEYFRAMETAG_NOSHOOT = 4,
	KEYFRAMETAG_NOTWEEN = 8,
	KEYFRAMETAG_NOINTERRUPT = 16,
	KEYFRAMETAG_TRIGGERSFX = 32,
	KEYFRAMETAG_TRIGGERGFX = 64,
	KEYFRAMETAG_NOCOLLISION = 128,
	KEYFRAMETAG_ROTATE = 256,
	KEYFRAMETAG_SHOOT = 512,
	KEYFRAMETAG_NUM = 10
};

struct corpsedata_s { // 0x28
	/* 0x00 */ float shootdirx;
	/* 0x04 */ float shootdiry;
	/* 0x08 */ float animscale;
	/* 0x0c */ float time;
	/* 0x10 */ float burnEndTime;
	/* 0x14 */ float fadeStartTime;
	/* 0x18 */ float fadeDuration;
	/* 0x1c */ boolean overportal;
	/* 0x20 */ boolean burning;
	/* 0x24 */ int limbflag;
};

typedef corpsedata_s corpsedata;

struct cs_gfxchunk_s { // 0xc
	/* 0x0 */ int texnum;
	/* 0x4 */ int offset;
	/* 0x8 */ int numvtx;
};

typedef cs_gfxchunk_s cs_gfxchunk;

struct cs_partdef_s { // 0x14
	/* 0x00 */ cs_gfxchunk *chunklist;
	/* 0x04 */ int numchunks;
	/* 0x08 */ int *bindings;
	/* 0x0c */ int numbindings;
	/* 0x10 */ int firstbinding;
};

typedef cs_partdef_s cs_partdef;

struct cs_hierarchyinfo_s { // 0x14
	/* 0x00 */ int matrixnum;
	/* 0x04 */ int parent;
	/* 0x08 */ int child;
	/* 0x0c */ int next;
	/* 0x10 */ int prev;
};

typedef cs_hierarchyinfo_s cs_hierarchyinfo;

struct cs_obdef_s { // 0x28
	/* 0x00 */ float *xyz;
	/* 0x04 */ float *st;
	/* 0x08 */ float *normal;
	/* 0x0c */ cs_partdef *parts;
	/* 0x10 */ cs_hierarchyinfo *hr;
	/* 0x14 */ int numparts;
	/* 0x18 */ int nummatrices;
	/* 0x1c */ int numbindings;
	/* 0x20 */ texinfo *textures;
	/* 0x24 */ mtx_u *bindmatrices;
};

typedef cs_obdef_s cs_obdef;

struct cs_obinst_s { // 0x60
	/* 0x00 */ cs_obdef *ob;
	/* 0x04 */ mtx_u *realmatrices;
	/* 0x08 */ mtx_u *gfxmatrices;
	/* 0x0c */ mtx_u *lightdir;
	/* 0x10 */ animinfo anim1;
	/* 0x50 */ float pos[3];
	/* 0x5c */ float roty;
};

typedef cs_obinst_s cs_obinst;

struct cs_animslot_s { // 0x20
	/* 0x00 */ int animnum;
	/* 0x04 */ int framestart;
	/* 0x08 */ int frameend;
	/* 0x0c */ int chrtype;
	/* 0x10 */ int sfx;
	/* 0x14 */ animRawHeader_t *animheader;
	/* 0x18 */ prop_s *prop;
	/* 0x1c */ cs_obinst *cs_inst;
};

typedef cs_animslot_s cs_animslot;

struct cs_animheader_s { // 0x200
	/* 0x000 */ int numframes;
	/* 0x004 */ float time;
	/* 0x008 */ int curframe;
	/* 0x00c */ float fadeTime;
	/* 0x010 */ float fadeBeforeEnd;
	/* 0x014 */ float currentFadeTime;
	/* 0x018 */ boolean fading;
	/* 0x01c */ int numslots;
	/* 0x020 */ cs_animslot as[15];
};

typedef cs_animheader_s cs_animheader;

typedef struct { // 0x3c
	/* 0x00 */ char name[48];
	/* 0x30 */ int filepos;
	/* 0x34 */ int filelen;
	/* 0x38 */ int gziplen;
} packfile_t;

typedef struct { // 0xc
	/* 0x0 */ char id[4];
	/* 0x4 */ int dirofs;
	/* 0x8 */ int dirlen;
} packheader_t;

typedef struct { // 0x8
	/* 0x0 */ int pos;
	/* 0x4 */ int size;
} FILEDETAILS;

typedef struct { // 0x18
	/* 0x00 */ int handle;
	/* 0x04 */ int cdsector;
	/* 0x08 */ int filesize;
	/* 0x0c */ int numfiles;
	/* 0x10 */ u8 *filebuffer;
	/* 0x14 */ packfile_t *pfiles;
} packinfo_t;

union speedy_u { // 0x30
	/* 0x00 */ u32 w[12];
	/* 0x00 */ u8 s[48];
};

struct huft { // 0x8
	/* 0x0 */ u8 e;
	/* 0x1 */ u8 b;
	/* 0x4 */ union { // 0x4
		/* 0x4 */ u16 n;
		/* 0x4 */ huft *t;
	} v;
};

struct preloadpass2info_s { // 0x18
	/* 0x00 */ int type;
	/* 0x04 */ u8 *texname;
	/* 0x08 */ int texnum;
	/* 0x0c */ texinfo *inf;
	/* 0x10 */ int *newtexnum;
	/* 0x14 */ preloadpass2info_s *next;
};

typedef preloadpass2info_s preloadpass2info;

struct laststanddef_s { // 0x14
	/* 0x00 */ int levelnum;
	/* 0x04 */ float x;
	/* 0x08 */ float z;
	/* 0x0c */ float radius;
	/* 0x10 */ float patroltime;
};

typedef laststanddef_s laststanddef;

struct zonesgminfo_s { // 0x18
	/* 0x00 */ float teamscore[5];
	/* 0x14 */ float scoreinc;
};

typedef zonesgminfo_s zonesgminfo;

enum {
	TILESET_VIRTUAL = 0,
	TILESET_INDUSTRIAL = 1,
	TILESET_GOTHIC = 2,
	TILESET_ALIEN = 3,
	TILESET_SPACEPORT = 4,
	TILESET_NUM = 5
};

enum {
	TILE_CORRIDOR_2 = 0,
	TILE_CORNER = 1,
	TILE_CORRIDOR_1 = 2,
	TILE_ROOM_2_2 = 3,
	TILE_TJUNC = 4,
	TILE_STAIR_2_2 = 5,
	TILE_LAUNCHBAY = 6,
	TILE_LARGE_DBL1_TRENCH = 7,
	TILE_CORE_2_2 = 8,
	TILE_TJUNC_1_1 = 9,
	TILE_ADAPTER2 = 10,
	TILE_LARGE_DBL1_BRIDGE = 11,
	TILE_LARGE_DBL1_CORNER = 12,
	TILE_LARGE_DBL1_CROSS = 13,
	TILE_CORRIDOR_RAMP = 14,
	TILE_BASE1 = 15,
	TILE_LARGE_DBL1_OPEN = 16,
	TILE_OPEN_SMALL = 17,
	TILE_ADAPTER = 18,
	TILE_LARGE_DBL1_RING = 19,
	TILE_LARGE_BUNKER_CORNER_ALT = 20,
	TILE_LARGE_DBL1_RAMP = 21,
	TILE_LARGE_BUNKER_CORNER = 22,
	TILE_LARGE_BUNKER_WALL = 23,
	TILE_LARGE_BRIDGE_OPEN = 24,
	TILE_LARGE_DBL1_TRENCH_FLAT = 25,
	TILE_LARGE_DBL1_RAMP_WIDE = 26,
	TILE_LARGE_PIT = 27,
	TILE_ROOM_BOX1 = 28,
	TILE_ADAPTER3_RAMP = 29,
	TILE_NUM = 30
};

struct tilelighttype_s { // 0x4
	/* 0x0 */ short int desc;
	/* 0x2 */ u8 mask;
};

typedef tilelighttype_s tilelighttype_t;

enum {
	LT_SLOW = 0,
	LT_MEDIUM = 1,
	LT_FAST = 2,
	LT_SPEED_NUM = 3
};

enum {
	LT_FIXED = 0,
	LT_FLICKERING = 4,
	LT_SWITCHING = 8,
	LT_PULSING = 12,
	LT_TYPE_NUM = 4
};

enum {
	ITEM_NONE = -1,
	ITEM_START_FIRST = 0,
	ITEM_START_ALL = 0,
	ITEM_START_TEAM_A = 1,
	ITEM_START_TEAM_B = 2,
	ITEM_START_TEAM_C = 3,
	ITEM_START_TEAM_D = 4,
	ITEM_TELEPORT_FIRST = 5,
	ITEM_TELEPORT_A = 5,
	ITEM_TELEPORT_B = 6,
	ITEM_TELEPORT_C = 7,
	ITEM_TELEPORT_D = 8,
	ITEM_TELEPORT_E = 9,
	ITEM_TELEPORT_F = 10,
	ITEM_TELEPORT_G = 11,
	ITEM_TELEPORT_H = 12,
	ITEM_TELEPORT_I = 13,
	ITEM_TELEPORT_J = 14,
	ITEM_PICKUP_FIRST = 15,
	ITEM_DROP_TEAM_A = 15,
	ITEM_DROP_TEAM_B = 16,
	ITEM_DROP_TEAM_C = 17,
	ITEM_DROP_TEAM_D = 18,
	ITEM_PICKUP_GUN1 = 19,
	ITEM_PICKUP_GUN2 = 20,
	ITEM_PICKUP_GUN3 = 21,
	ITEM_PICKUP_GUN4 = 22,
	ITEM_PICKUP_GUN5 = 23,
	ITEM_PICKUP_AMMO1 = 24,
	ITEM_PICKUP_AMMO2 = 25,
	ITEM_PICKUP_AMMO3 = 26,
	ITEM_PICKUP_AMMO4 = 27,
	ITEM_PICKUP_AMMO5 = 28,
	ITEM_PICKUP_KEYCARD1 = 29,
	ITEM_PICKUP_KEYCARD2 = 30,
	ITEM_PICKUP_KEYCARD3 = 31,
	ITEM_PICKUP_KEYCARD4 = 32,
	ITEM_PICKUP_BAG = 33,
	ITEM_KNOCKOUT_BAG = 34,
	ITEM_PICKUP_HEALTH_LO = 35,
	ITEM_PICKUP_HEALTH_HI = 36,
	ITEM_PICKUP_ARMOUR_LO = 37,
	ITEM_PICKUP_ARMOUR_HI = 38,
	ITEM_POWERUP_1 = 39,
	ITEM_POWERUP_2 = 40,
	ITEM_POWERUP_3 = 41,
	ITEM_POWERUP_4 = 42,
	ITEM_POWERUP_5 = 43,
	ITEM_PROP_FIRST = 44,
	ITEM_PROP_CRATE = 44,
	ITEM_REMOTE_FIRST = 45,
	ITEM_REMOTE_GUNTURRET = 45,
	ITEM_REMOTE_AUTOGUN = 46,
	ITEM_NPC_FIRST = 47,
	ITEM_NPC_1 = 47,
	ITEM_NPC_2 = 48,
	ITEM_NPC_3 = 49,
	ITEM_NPC_4 = 50,
	ITEM_NPC_5 = 51,
	ITEM_NPC_6 = 52,
	NUM_ITEMS = 53
};

enum {
	ITEMGROUP_START = 0,
	ITEMGROUP_BASE1 = 1,
	ITEMGROUP_BASE2 = 2,
	ITEMGROUP_BASE3 = 3,
	ITEMGROUP_BASE4 = 4,
	ITEMGROUP_GUN = 5,
	ITEMGROUP_AMMO = 6,
	ITEMGROUP_KEYCARD1 = 7,
	ITEMGROUP_KEYCARD2 = 8,
	ITEMGROUP_KEYCARD3 = 9,
	ITEMGROUP_KEYCARD4 = 10,
	ITEMGROUP_TELEPORT = 11,
	ITEMGROUP_HEALTH = 12,
	ITEMGROUP_ARMOUR = 13,
	ITEMGROUP_POWERUP = 14,
	ITEMGROUP_BAGTAGBAG = 15,
	ITEMGROUP_KNOCKOUTBAG = 16,
	ITEMGROUP_PROP = 17,
	ITEMGROUP_REMOTE = 18,
	ITEMGROUP_NPCS = 19,
	ITEMGROUP_NUM = 20
};

typedef enum {
	ITEMANGLE_SOUTH = 0,
	ITEMANGLE_SOUTHWEST = 1,
	ITEMANGLE_WEST = 2,
	ITEMANGLE_NORTHWEST = 3,
	ITEMANGLE_NORTH = 4,
	ITEMANGLE_NORTHEAST = 5,
	ITEMANGLE_EAST = 6,
	ITEMANGLE_SOUTHEAST = 7,
	ITEMANGLE_NUM = 8
} itemangle_t;

struct itemdef_s { // 0x14
	/* 0x00 */ short int desc;
	/* 0x02 */ short int group;
	/* 0x04 */ u32 spotcol;
	/* 0x08 */ int propnum;
	/* 0x0c */ int mapicon;
	/* 0x10 */ int flags;
};

typedef itemdef_s itemdef;

enum {
	PF_NORTH = 1,
	PF_EAST = 2,
	PF_SOUTH = 3,
	PF_WEST = 4
};

typedef struct { // 0x5
	/* 0x0 */ u8 dir;
	/* 0x1 */ u8 x;
	/* 0x2 */ u8 y;
	/* 0x3 */ u8 z;
	/* 0x4 */ u8 length;
} plugdef;

struct tiledef_s { // 0x88
	/* 0x00 */ int width;
	/* 0x04 */ int height;
	/* 0x08 */ int slices;
	/* 0x0c */ u8 *cells[4];
	/* 0x1c */ u16 *ipads[4];
	/* 0x2c */ int cost;
	/* 0x30 */ int numplugs;
	/* 0x34 */ plugdef plugs[16];
	/* 0x84 */ tiledef_s *next;
};

typedef tiledef_s tiledef;

struct plugpad_s { // 0x4
	/* 0x0 */ s16 extref;
	/* 0x2 */ u16 switchmask;
};

typedef plugpad_s plugpad_t;

enum {
	TILEROT_0 = 0,
	TILEROT_90 = 1,
	TILEROT_180 = 2,
	TILEROT_270 = 3,
	TILEROT_NUM = 4
};

struct leveltile_s { // 0x24
	/* 0x00 */ int tilenum;
	/* 0x04 */ float trans[3];
	/* 0x10 */ int rot;
	/* 0x14 */ u16 switchmask;
	/* 0x18 */ u32 lightcolour;
	/* 0x1c */ int lighttype;
	/* 0x20 */ int lightphase;
};

typedef leveltile_s leveltile;

struct internalstats_s { // 0x5e4
	/* 0x000 */ stats game;
	/* 0x584 */ int succesivekills;
	/* 0x588 */ float killtimes[20];
	/* 0x5d8 */ int recentkill;
	/* 0x5dc */ int repeatkills;
	/* 0x5e0 */ float repeatkilltime;
};

typedef internalstats_s internalstats;

enum {
	TIMERTYPE_COUNTDOWN = 0,
	TIMERTYPE_REPEAT = 1,
	TIMERTYPE_COMPLETED = 2
};

struct timer_s { // 0x18
	/* 0x00 */ int type;
	/* 0x04 */ int time;
	/* 0x08 */ int lasttime;
	/* 0x0c */ float duration;
	/* 0x10 */ void *data;
	/* 0x14 */ void (*function)(/* parameters unknown */);
};

typedef timer_s timer;

enum {
	CARMODE_ABSOLUTE_SINE = 0,
	CARMODE_RELATIVE_SINE = 1,
	CARMODE_SPLINE = 2
};

enum {
	CARFLAGS_USESTARTANGLE = 1
};

enum {
	CARPATH_START = 0,
	CARPATH_STOP = 1,
	CARPATH_LOOP = 2,
	CARPATH_EVENT = 3,
	CARPATH_WAIT = 4,
	CARPATH_FORWARD = 5,
	CARPATH_BACKWARD = 6,
	CARPATH_TURNLEFT = 7,
	CARPATH_TURNRIGHT = 8,
	CARPATH_JUMP = 9
};

struct carpath_s { // 0x38
	/* 0x00 */ int type;
	/* 0x04 */ float destPos[3];
	/* 0x10 */ float destAng;
	/* 0x14 */ float speed;
	/* 0x18 */ float bankingAngle;
	/* 0x1c */ float liftingAngle;
	/* 0x20 */ float turningAngleAdjust;
	/* 0x24 */ float turnRad;
	/* 0x28 */ float turningPointAngle;
	/* 0x2c */ int special;
	/* 0x30 */ boolean distanceSet;
	/* 0x34 */ float distance;
};

typedef carpath_s carpath;

struct carPathTracker_s { // 0x1c
	/* 0x00 */ carpath *currentPath;
	/* 0x04 */ float pos[3];
	/* 0x10 */ float distance;
	/* 0x14 */ float scalarCurve;
	/* 0x18 */ float scalarCurveChange;
};

typedef carPathTracker_s carPathTracker;

struct cardata_s { // 0xf8
	/* 0x00 */ int mode;
	/* 0x04 */ int flags;
	/* 0x08 */ carpath *paths;
	/* 0x0c */ int numPaths;
	/* 0x10 */ carPathTracker trackers[3];
	/* 0x64 */ float turningPos[3];
	/* 0x70 */ float prevPos[3];
	/* 0x7c */ float rot[3];
	/* 0x88 */ float wait;
	/* 0x8c */ float speed;
	/* 0x90 */ float angleAroundTurningPos;
	/* 0x94 */ float turningAngleAdjust;
	/* 0x98 */ float bumpiness;
	/* 0x9c */ float damageRot[3];
	/* 0xa8 */ int pad;
	/* 0xac */ float rotorAngle;
	/* 0xb0 */ float bodyRotate[2];
	/* 0xb8 */ float wheelRotate;
	/* 0xbc */ float wheelTurn;
	/* 0xc0 */ float trailingPos1[3];
	/* 0xcc */ float trailingPos2[3];
	/* 0xd8 */ float lastTrailingPos1[3];
	/* 0xe4 */ float lastTrailingPos2[3];
	/* 0xf0 */ int voice;
	/* 0xf4 */ float totalDistance;
};

typedef cardata_s cardata;

struct specialdata_s { // 0xf8
	/* 0x00 */ void *ref;
	/* 0x04 */ void (*callback)(/* parameters unknown */);
	/* 0x08 */ float *extra;
	/* 0x0c */ float intensity;
	/* 0x10 */ float textureoffset[2];
	/* 0x18 */ float scalar;
	/* 0x1c */ float xzscalar;
	/* 0x20 */ float ascalar[2];
	/* 0x28 */ float start[3];
	/* 0x34 */ float dest[3];
	/* 0x40 */ float specialcol[6];
	/* 0x58 */ gfxpointers override[3];
	/* 0x94 */ int section;
	/* 0x98 */ float time;
	/* 0x9c */ float timeChange;
	/* 0xa0 */ int state;
	/* 0xa4 */ float rotaxis[3];
	/* 0xb0 */ float normal[3];
	/* 0xbc */ float hitSensitivity;
	/* 0xc0 */ float windSensitivity;
	/* 0xc4 */ float weight;
	/* 0xc8 */ float frictionExp;
	/* 0xcc */ float rotationRestriction;
	/* 0xd0 */ float leverageDistanceSq;
	/* 0xd4 */ float rotaxial;
	/* 0xd8 */ float rotaxialvel;
	/* 0xdc */ float rotnonaxialX;
	/* 0xe0 */ float rotnonaxialZ;
	/* 0xe4 */ float rotnonaxialvelX;
	/* 0xe8 */ float rotnonaxialvelZ;
	/* 0xec */ float soundTime;
	/* 0xf0 */ int soundVoice;
	/* 0xf4 */ particlegroup_s *pg;
};

typedef specialdata_s specialdata;

enum {
	SWITCH_OFF = 0,
	SWITCH_ON = 1
};

enum {
	DAM_TURBINE_OFF = 0,
	DAM_TURBINE_ON = 1,
	DAM_TURBINE_BROKEN = 2
};

enum {
	DAM_RADAR_OFF = 0,
	DAM_RADAR_ON = 1,
	DAM_RADAR_BROKEN = 2
};

enum {
	SPECIALFX_NONE = -1,
	SPECIALFX_PICKUPSPAWN = 0,
	SPECIALFX_FLAMETORCH = 1,
	SPECIALFX_FLAMETORCH_PROTO = 2,
	SPECIALFX_OCCASIONALROCKETSMOKE = 3,
	SPECIALFX_DAMTUNNEL_THICKSTEAM = 4,
	SPECIALFX_DAMSTAIRCASE_THICKSTEAM = 5,
	SPECIALFX_THICKCHIMNEYSMOKE = 6,
	SPECIALFX_HYDRANTSPRAY = 7,
	SPECIALFX_MANHOLESMOKE_PROTO = 8,
	SPECIALFX_MANHOLESMOKE = 9,
	SPECIALFX_SHOWER = 10,
	SPECIALFX_TIMEPORTAL = 11,
	SPECIALFX_LASERBEAM = 12,
	NUM_SPECIALFX = 13
};

enum {
	SPECIALFXFLAGS_UPDATEONLYIFVISIBLE = 65536,
	SPECIALFXFLAGS_DISABLED = 131072
};

enum {
	LASERBEAM_TRIGGER = 0,
	LASERBEAM_FORCEFIELD = 1
};

struct specialfx_s { // 0x180
	/* 0x000 */ float pos[4];
	/* 0x010 */ specialfx_s *nextUsed;
	/* 0x014 */ specialfx_s *previousUsed;
	/* 0x018 */ int type;
	/* 0x01c */ int subtype;
	/* 0x020 */ int flags;
	/* 0x024 */ void *ref;
	/* 0x028 */ void (*callback)(/* parameters unknown */);
	/* 0x02c */ float param;
	/* 0x030 */ float time;
	/* 0x034 */ int closestRoom[16];
	/* 0x074 */ int numRooms;
	/* 0x078 */ int rooms[10];
	/* 0x0a0 */ prop_s *prop[4];
	/* 0x0b0 */ particlegroup_s *pg[4];
	/* 0x0c0 */ particleClone clone;
	/* 0x160 */ float onduration;
	/* 0x164 */ float offduration;
	/* 0x168 */ float translatex;
	/* 0x16c */ float translatey;
	/* 0x170 */ float intensity;
	/* 0x174 */ void *extraInfo;
};

typedef specialfx_s specialfx;

struct laserBeam_s { // 0x28
	/* 0x00 */ float startpos[3];
	/* 0x0c */ float endpos[3];
	/* 0x18 */ float glowscalar[2];
	/* 0x20 */ float glowspeed[2];
};

typedef laserBeam_s laserBeam;

struct laserBeamInfo_s { // 0x28
	/* 0x00 */ float wallmin[3];
	/* 0x0c */ float wallmax[3];
	/* 0x18 */ float starttime;
	/* 0x1c */ void (*activate)(/* parameters unknown */);
	/* 0x20 */ laserBeam *beams;
	/* 0x24 */ int numBeams;
};

typedef laserBeamInfo_s laserBeamInfo;

enum {
	LIFTFLAGS_WAITING = 1,
	LIFTFLAGS_TIMETOENTER = 2,
	LIFTFLAGS_AUTOMATIC = 4,
	LIFTFLAGS_DOORS = 8
};

enum {
	LIFTSTATE_NOPOWER = 0,
	LIFTSTATE_POWERING_UP = 1,
	LIFTSTATE_POWER = 2
};

struct liftNode_s { // 0x98
	/* 0x00 */ int valid;
	/* 0x04 */ float pos[3];
	/* 0x10 */ int padref;
	/* 0x14 */ int leftDoorPropnum;
	/* 0x18 */ float leftDoorPos[3];
	/* 0x24 */ float leftDoorRoty;
	/* 0x28 */ float leftDoorMove[3];
	/* 0x34 */ int rightDoorPropnum;
	/* 0x38 */ float rightDoorPos[3];
	/* 0x44 */ float rightDoorRoty;
	/* 0x48 */ float rightDoorMove[3];
	/* 0x54 */ int buttonUpPropnum;
	/* 0x58 */ float buttonUpPos[3];
	/* 0x64 */ float buttonUpRoty;
	/* 0x68 */ int buttonDownPropnum;
	/* 0x6c */ float buttonDownPos[3];
	/* 0x78 */ float buttonDownRoty;
	/* 0x7c */ int liftCalled;
	/* 0x80 */ float durationCalled;
	/* 0x84 */ prop *buttonUp;
	/* 0x88 */ prop *buttonDown;
	/* 0x8c */ prop *doorLeft;
	/* 0x90 */ prop *doorRight;
	/* 0x94 */ int floor;
};

typedef liftNode_s liftNode;

struct setuplift_s { // 0x420
	/* 0x000 */ int createflags;
	/* 0x004 */ int propnum;
	/* 0x008 */ float roty;
	/* 0x00c */ int defaultLiftFlags;
	/* 0x010 */ int padref;
	/* 0x014 */ float liftSpeed;
	/* 0x018 */ float liftTimeEvaluate;
	/* 0x01c */ float liftTimeWaiting;
	/* 0x020 */ float doorOpenTime;
	/* 0x024 */ float doorCloseTime;
	/* 0x028 */ int leftDoorPropnum;
	/* 0x02c */ float leftDoorPos[3];
	/* 0x038 */ float leftDoorRoty;
	/* 0x03c */ float leftDoorMove[3];
	/* 0x048 */ int rightDoorPropnum;
	/* 0x04c */ float rightDoorPos[3];
	/* 0x058 */ float rightDoorRoty;
	/* 0x05c */ float rightDoorMove[3];
	/* 0x068 */ int buttonUpPropnum;
	/* 0x06c */ float buttonUpPos[3];
	/* 0x078 */ float buttonUpRoty;
	/* 0x07c */ int buttonDownPropnum;
	/* 0x080 */ float buttonDownPos[3];
	/* 0x08c */ float buttonDownRoty;
	/* 0x090 */ liftNode nodes[6];
};

typedef setuplift_s setuplift;

struct liftObData_s { // 0x28
	/* 0x00 */ prop *lift;
	/* 0x04 */ liftData_s *liftData;
	/* 0x08 */ liftNode *nodeBelongTo;
	/* 0x0c */ float start[3];
	/* 0x18 */ float dest[3];
	/* 0x24 */ float scalar;
};

typedef liftObData_s liftObData;

struct liftData_s { // 0x4cc
	/* 0x000 */ setuplift *setup;
	/* 0x004 */ liftNode *liftNodes;
	/* 0x008 */ liftNode *liftStart;
	/* 0x00c */ liftNode *liftDest;
	/* 0x010 */ int liftState;
	/* 0x014 */ float powerTime;
	/* 0x018 */ int liftFlags;
	/* 0x01c */ int floor;
	/* 0x020 */ int pad;
	/* 0x024 */ int numinlift;
	/* 0x028 */ float liftTime;
	/* 0x02c */ int liftCalled;
	/* 0x030 */ int liftDir;
	/* 0x034 */ float time;
	/* 0x038 */ void (*liftButtonResetFunction)(/* parameters unknown */);
	/* 0x03c */ liftNode *liftQueue[6];
	/* 0x054 */ prop *liftProp;
	/* 0x058 */ prop *liftDoorLeft;
	/* 0x05c */ prop *liftDoorRight;
	/* 0x060 */ prop *liftButtonUp;
	/* 0x064 */ prop *liftButtonDown;
	/* 0x068 */ int numLiftObs;
	/* 0x06c */ liftObData liftObs[28];
};

typedef liftData_s liftData;

enum {
	DAMAGETYPE_NONE = -1,
	DAMAGETYPE_SMALLBULLET = 0,
	DAMAGETYPE_BIGBULLET = 1,
	DAMAGETYPE_SHELL = 2,
	DAMAGETYPE_BRICK = 3,
	DAMAGETYPE_LASERCOILS = 4,
	DAMAGETYPE_ELECTRIC = 5,
	DAMAGETYPE_LASERBOLT = 6,
	DAMAGETYPE_ARCLASER = 7,
	DAMAGETYPE_DISC = 8,
	DAMAGETYPE_APACHEROCKET = 9,
	DAMAGETYPE_APACHEBULLET = 10,
	DAMAGETYPE_FIXEDGUNROCKET = 11,
	DAMAGETYPE_FIXEDGUNBULLET = 12,
	DAMAGETYPE_FLAME = 13,
	DAMAGETYPE_FLARE = 14,
	DAMAGE_TYPES = 15
};

enum {
	DAMAGEPARTGROUP_HEAD = 0,
	DAMAGEPARTGROUP_BODY = 1,
	DAMAGEPARTGROUP_ARMSLEGS = 2,
	NUM_DAMAGEPARTGROUPS = 3
};

struct damageInfo_s { // 0x3c
	/* 0x00 */ float characterDamageStory[3][3];
	/* 0x24 */ float characterDamageArcade[3];
	/* 0x30 */ float backgroundDamage;
	/* 0x34 */ float glassDamage;
	/* 0x38 */ float obDamage;
};

typedef damageInfo_s damageInfo;

enum {
	OBJECTIVE_DAM_DESTROY_RADAR = 0,
	OBJECTIVE_DAM_REACH_SITE = 1,
	OBJECTIVE_DAM_DESTROY_CONTAINER = 2,
	OBJECTIVE_DAM_ACTIVATE_TURBINES = 3,
	OBJECTIVE_DAM_REACH_TOP = 4,
	OBJECTIVE_DAM_DESTROY_COPTER = 5,
	OBJECTIVE_DAM_DESTROY_CABINETS = 6,
	OBJECTIVE_DAM_KILL_MUTANTS = 7,
	OBJECTIVE_RFACTORY_ACTIVATE_BRIDGE = 8,
	OBJECTIVE_RFACTORY_FIND_ELECTROGUN = 9,
	OBJECTIVE_RFACTORY_DESTROY_POWERTOWERS = 10,
	OBJECTIVE_TOTAL = 11
};

enum {
	MMFILE_VERSION = 20071974,
	MMFILE_INFO = 20071975,
	MMFILE_TILES = 20071976,
	MMFILE_EOF = 20071977,
	MMFILE_DOORS = 20071978,
	MMFILE_PATROL = 20071979,
	MMFILE_LIGHTPALETTE = 20071980
};

struct mmfilechunk_s { // 0x8
	/* 0x0 */ int id;
	/* 0x4 */ int length;
};

typedef mmfilechunk_s mmfilechunk;

struct mmfileinfo_s { // 0xcc
	/* 0x00 */ int setupflags;
	/* 0x04 */ int numtiles;
	/* 0x08 */ u16 tileset;
	/* 0x0a */ u16 tunenum;
	/* 0x0c */ s16 weaponset;
	/* 0x0e */ s16 weapons[15];
	/* 0x2c */ u8 mapname[32];
	/* 0x4c */ u8 mapdesc[128];
};

typedef mmfileinfo_s mmfileinfo;

struct mmfiletile_s { // 0x14
	/* 0x00 */ int tilenum;
	/* 0x04 */ s8 x;
	/* 0x05 */ s8 y;
	/* 0x06 */ s8 z;
	/* 0x07 */ s8 rot;
	/* 0x08 */ u16 seals;
	/* 0x0a */ u16 numitems;
	/* 0x0c */ u32 lightcolour;
	/* 0x10 */ u8 lighttype;
	/* 0x11 */ u8 lightphase;
	/* 0x12 */ u16 unused;
};

typedef mmfiletile_s mmfiletile;

struct mmfileitem_s { // 0x8
	/* 0x0 */ s16 itemnum;
	/* 0x2 */ s16 padextref;
	/* 0x4 */ int angle;
};

typedef mmfileitem_s mmfileitem;

struct mmfiledoor_s { // 0x10
	/* 0x0 */ s8 x;
	/* 0x1 */ s8 y;
	/* 0x2 */ s8 z;
	/* 0x3 */ s8 rot;
	/* 0x4 */ u16 key;
	/* 0x6 */ u16 unused;
	/* 0x8 */ u16 tileref1;
	/* 0xa */ u16 plugref1;
	/* 0xc */ u16 tileref2;
	/* 0xe */ u16 plugref2;
};

typedef mmfiledoor_s mmfiledoor;

typedef struct { // 0x4
	/* 0x0 */ u16 padref;
	/* 0x2 */ u16 tileref;
} mmpatrolnode_t;

struct mmfilepatrol_s { // 0x4
	/* 0x0 */ u16 length;
	/* 0x2 */ u16 mode;
	/* 0x4 */ mmpatrolnode_t nodes[0];
};

typedef mmfilepatrol_s mmfilepatrol;

typedef struct { // 0x28
	/* 0x00 */ char name[32];
	/* 0x20 */ u32 datemod;
	/* 0x24 */ u16 block;
	/* 0x26 */ u16 size;
} mapentry_t;

struct gamefile2_s { // 0xc
	/* 0x0 */ u32 crc;
	/* 0x4 */ u32 magic;
	/* 0x8 */ int numentries;
	/* 0xc */ mapentry_t mapentries[0];
};

typedef gamefile2_s gamefile2_t;

enum {
	ECM_NULL = 0,
	ECM_ATTACK_DROP = 1,
	ECM_DEFEND_DROP = 2,
	ECM_CAPTURED_DROP = 4,
	ECM_DIED = 8,
	ECM_CANCEL = 16
};

enum {
	CARTRIDGEFLAGS_FIRSTPERSON = 1,
	CARTRIDGEFLAGS_THIRDPERSON = 2
};

enum {
	CARTRIDGETYPE_NONE = -1,
	CARTRIDGETYPE_LARGE = 0,
	CARTRIDGETYPE_SMALL = 1,
	CARTRIDGETYPE_ASSAULT_SHOTGUN = 2,
	CARTRIDGETYPE_SCIFI = 3,
	CARTRIDGETYPE_GOLD = 4,
	NUM_CARTRIDGETYPE = 5
};

enum {
	DECAL_BULLETTYPE_NONE = 0,
	DECAL_BULLETTYPE_BULLET = 1,
	DECAL_BULLETTYPE_SCIFI = 2,
	DECAL_BULLETTYPE_EXPLODE = 3,
	DECAL_BULLETTYPE_PETROL = 4
};

enum {
	SPRAYTYPE_NONE = 0,
	SPRAYTYPE_FLOOR = 1,
	SPRAYTYPE_CHAR = 2
};

struct sprayParticle_s { // 0x20
	/* 0x00 */ int viewmask;
	/* 0x04 */ int type;
	/* 0x08 */ float time;
	/* 0x0c */ float lifeTime;
	/* 0x10 */ float pos[4];
};

typedef sprayParticle_s sprayParticle;

enum {
	CLOUD_DENSITY_NONE = 0,
	CLOUD_DENSITY_LIGHT = 1,
	CLOUD_DENSITY_MEDIUM = 2,
	CLOUD_DENSITY_HIGH = 3,
	CLOUD_DENSITY_FULL = 4,
	CLOUD_DENSITY_TYPES = 5
};

enum {
	GUNFX_FIRE = 0,
	GUNFX_EXTINGUISH = 1,
	GUNFX_NUM = 2
};

enum {
	REMOTEDEVICE_PLAYERCONTROLLED = 1,
	REMOTEDEVICE_CAMERA = 2,
	REMOTEDEVICE_GUN = 4,
	REMOTEDEVICE_SIDEMOUNTED = 8,
	REMOTEDEVICE_CEILINGMOUNTED = 16,
	REMOTEDEVICE_FLOORMOUNTED = 32,
	REMOTEDEVICE_FIXED_GUN = 64,
	REMOTEDEVICE_HAS_BUTTON = 128
};

enum {
	REMOTESTATE_SLEEP = 0,
	REMOTESTATE_SWEEP = 1,
	REMOTESTATE_LOCKON = 2,
	REMOTESTATE_BACKTOSWEEP = 3,
	REMOTESTATE_WAIT_FOR_CHR = 4,
	REMOTESTATE_LINEUP_WITH_CHR = 5,
	REMOTESTATE_CONTROLLED_BY_CHR = 6,
	REMOTESTATE_OFF = 7,
	REMOTESTATE_BROKEN = 8
};

enum {
	REMOTETEAM_ANYPLAYER = 0
};

struct remotedata_s { // 0x128
	/* 0x000 */ prop *prop;
	/* 0x004 */ int setupref;
	/* 0x008 */ int type;
	/* 0x00c */ int state;
	/* 0x010 */ int team;
	/* 0x014 */ float anglex;
	/* 0x018 */ float oldanglex;
	/* 0x01c */ float angley;
	/* 0x020 */ float oldangley;
	/* 0x024 */ float anglez;
	/* 0x028 */ float oldanglez;
	/* 0x02c */ float minanglex;
	/* 0x030 */ float maxanglex;
	/* 0x034 */ float minangley;
	/* 0x038 */ float maxangley;
	/* 0x03c */ float minanglez;
	/* 0x040 */ float maxanglez;
	/* 0x044 */ float speedx;
	/* 0x048 */ float speedy;
	/* 0x04c */ float speedz;
	/* 0x050 */ float target[3];
	/* 0x05c */ float sweeppt[3];
	/* 0x068 */ float sweepradius;
	/* 0x06c */ prop *lockon;
	/* 0x070 */ chrgun_s *gun;
	/* 0x074 */ int barrelfire;
	/* 0x078 */ float starty;
	/* 0x07c */ float startx;
	/* 0x080 */ float startAngles[3];
	/* 0x08c */ float startSpeeds[3];
	/* 0x098 */ float startMins[3];
	/* 0x0a4 */ float startMaxs[3];
	/* 0x0b0 */ int CanSeeTimer;
	/* 0x0b4 */ int FireFromRoom;
	/* 0x0b8 */ float recoilVelocityLeft;
	/* 0x0bc */ float recoilVelocityRight;
	/* 0x0c0 */ float recoilVelocitySlide;
	/* 0x0c4 */ float dualshockpower;
	/* 0x0c8 */ int alarmnum;
	/* 0x0cc */ float innerradius;
	/* 0x0d0 */ float fovHorizontal;
	/* 0x0d4 */ float fovVertical;
	/* 0x0d8 */ int AlertPause;
	/* 0x0dc */ prop *controller;
	/* 0x0e0 */ int section;
	/* 0x0e4 */ int ammo[17];
};

typedef remotedata_s remotedata;

enum {
	SKY_NONE = 0,
	SKY_VILLAGE = 1,
	SKY_COMPOUND = 2,
	SKY_CHINESE = 3,
	SKY_DOCKS = 4,
	SKY_STREETS = 5,
	SKY_OUTPOST = 6,
	SKY_WAREHOUSE = 7,
	SKY_PINKDAWN = 8,
	SKY_GREENDUSK = 9,
	SKY_COLDNIGHT = 10,
	SKY_CLEARDAY = 11,
	SKY_AFTERNOON = 12,
	SKY_MARS = 13,
	SKY_PURPLEHAZE = 14,
	SKY_RAINBOW = 15,
	SKY_FLAREDAWN = 16,
	SKY_ORANGE = 17,
	SKY_BRIGHTDAWN = 18,
	SKY_CRISPDAWN = 19,
	SKY_SETTINGSUN = 20,
	SKY_YELLOWAFTERNOON = 21,
	SKY_DAM = 22,
	SKY_NOTREDAME = 23,
	SKY_PIVOTAL = 24,
	SKY_PLANET2 = 25,
	SKY_RFACTORY = 26,
	SKY_MEXICAN = 27,
	SKY_NEOTOKYO = 28,
	SKY_NIGHTCLUB = 29,
	SKY_ATOMSMASHER = 30,
	SKY_MARTIAN = 31,
	SKY_HOSPITAL = 32,
	SKY_SCRAPYARD = 33,
	SKY_CIRCUS = 34,
	SKY_NUM = 35
};

typedef struct { // 0x8
	/* 0x0 */ short int TimeZone;
	/* 0x2 */ u_char Aspect;
	/* 0x3 */ u_char DateNotation;
	/* 0x4 */ u_char Language;
	/* 0x5 */ u_char Spdif;
	/* 0x6 */ u_char SummerTime;
	/* 0x7 */ u_char TimeNotation;
} sceScfT10kConfig;

enum {
	STATE_AUTOLANGUAGE = 0,
	STATE_LANGUAGE = 1,
	STATE_LOADINGSCREEN = 2
};

struct textbox_s { // 0x3c
	/* 0x00 */ int left;
	/* 0x04 */ int top;
	/* 0x08 */ int width;
	/* 0x0c */ int height;
	/* 0x10 */ int numlines;
	/* 0x14 */ int editwidth;
	/* 0x18 */ int editpos;
	/* 0x1c */ u8 *chartab;
	/* 0x20 */ boolean done;
	/* 0x24 */ boolean cancelled;
	/* 0x28 */ int col;
	/* 0x2c */ int row;
	/* 0x30 */ u8 *string;
	/* 0x34 */ int maxchars;
	/* 0x38 */ u8 *edittitle;
};

typedef textbox_s textbox_t;

enum {
	FRONTFX_NORMAL = 0,
	FRONTFX_STARTPAGE = 1,
	FRONTFX_CHRPAGE = 2,
	FRONTFX_MAIN = 3,
	FRONTFX_GOODIES = 4,
	FRONTFX_STATSPAGE = 5
};

enum {
	LOGO_TOP = -1,
	LOGO_GLOW = 0,
	LOGO_BACK = 1,
	LOGO_GOTH = 2,
	LOGO_NUM_SPRITES = 3
};

struct logolayer_s { // 0x3c
	/* 0x00 */ int logo;
	/* 0x04 */ float starttime;
	/* 0x08 */ float endtime;
	/* 0x0c */ float startscale[2];
	/* 0x14 */ float endscale[2];
	/* 0x1c */ float startcolour[4];
	/* 0x2c */ float endcolour[4];
};

typedef logolayer_s logolayer;

struct flarefx_s { // 0x94
	/* 0x00 */ int numflares;
	/* 0x04 */ float flareScales[6];
	/* 0x1c */ float flareSizes[6];
	/* 0x34 */ int flareTextures[6];
	/* 0x4c */ float flareColours[6][3];
};

typedef flarefx_s flarefx;

struct ringfx_s { // 0x12c
	/* 0x000 */ u32 ringCol;
	/* 0x004 */ u32 glowCol;
	/* 0x008 */ float controlPoints[10][3];
	/* 0x080 */ float pointrot[10];
	/* 0x0a8 */ float startradius[10];
	/* 0x0d0 */ float radius[10];
	/* 0x0f8 */ float t;
	/* 0x0fc */ float tspeed;
	/* 0x100 */ float startx;
	/* 0x104 */ float starty;
	/* 0x108 */ float offsetx;
	/* 0x10c */ float offsety;
	/* 0x110 */ float rot;
	/* 0x114 */ float noise1;
	/* 0x118 */ float noise2;
	/* 0x11c */ float noise3;
	/* 0x120 */ float noise4;
	/* 0x124 */ float movex;
	/* 0x128 */ float movey;
};

typedef ringfx_s ringfx;

struct gridpoint_s { // 0x14
	/* 0x00 */ u32 rgba;
	/* 0x04 */ float x;
	/* 0x08 */ float y;
	/* 0x0c */ float xoff;
	/* 0x10 */ float yoff;
};

typedef gridpoint_s gridpoint;

enum {
	MAPMAKER = 1,
	FRONTEND = 2,
	INGAME = 4,
	DEVELOP = 8
};

enum {
	MOR = 252,
	SPC = 253,
	BAK = 254,
	END = 255
};

struct leveldef_s { // 0x8
	/* 0x0 */ char *name;
	/* 0x4 */ int levelnum;
};

typedef leveldef_s leveldef;

enum {
	FEANIM_NULL = 0,
	FEANIM_GUNTAGGEDALL = 1,
	FEANIM_GUNTAGGEDACT = 2,
	FEANIM_PROPTAGGEDACT = 3,
	FEANIM_PROPTAGGEDALL = 4
};

enum {
	MODE_INIT = 0,
	MODE_DEMO = 1,
	MODE_STORY = 2,
	MODE_ARCADE = 3,
	MODE_CHALLENGE = 4,
	MODE_MAPMAKER = 5,
	MODE_CREDITS = 6,
	MODE_ILINK = 7
};

struct mpg_s { // 0x44
	/* 0x00 */ int lastmode;
	/* 0x04 */ int flags;
	/* 0x08 */ int tdflags[4];
	/* 0x18 */ int delay;
	/* 0x1c */ int curgametype;
	/* 0x20 */ int curstorylevel;
	/* 0x24 */ int curarcadelevel;
	/* 0x28 */ int curarcadelevelnum;
	/* 0x2c */ int curchallenge;
	/* 0x30 */ int curgamemode;
	/* 0x34 */ int democountdown;
	/* 0x38 */ int numgamemodes;
	/* 0x3c */ int testingupdate;
	/* 0x40 */ u8 allowedteams[4];
};

typedef mpg_s mpg_t;

enum {
	state_signon_init = 1,
	state_signon_main = 2,
	state_signon_re_edit = 3,
	state_signon_edit_run = 4,
	state_signon_ready = 5
};

enum {
	state_chrselect_init = 1,
	state_chrselect_model = 2,
	state_chrselect_handicap = 3,
	state_chrselect_team = 4,
	state_chrselect_ready = 5,
	state_chrselect_zzz = 6
};

struct menutree_s { // 0x8
	/* 0x0 */ char *title;
	/* 0x4 */ void *data;
};

typedef menutree_s menutree;

struct splitmsg_s { // 0x104
	/* 0x000 */ int id;
	/* 0x004 */ u8 text[256];
};

typedef splitmsg_s splitmsg_t;

enum {
	MSGBOX_STATE_BUSY = 0,
	MSGBOX_STATE_YES = 1,
	MSGBOX_STATE_NO = 2
};

struct msgboxinfo_s { // 0x410
	/* 0x000 */ u8 msg[1024];
	/* 0x400 */ msgfunc_t func;
	/* 0x404 */ u32 colour;
	/* 0x408 */ int control;
	/* 0x40c */ int state;
};

typedef msgboxinfo_s msgboxinfo_t;

enum {
	SIGNONLOAD_BUSY = 0,
	SIGNONLOAD_OK = 1,
	SIGNONLOAD_CANCELLED = 2
};

enum {
	SOUPSTATE_INIT = 0,
	SOUPSTATE_WAITCARD_NEWSIGNONTOSAVETO = 1,
	SOUPSTATE_NEWSIGNONTOSAVETO_1 = 2,
	SOUPSTATE_NEWSIGNONTOSAVETO_2 = 3,
	SOUPSTATE_WAITCARD_NEWSIGNON_SAVING = 4,
	SOUPSTATE_NEWSIGNONSAVE_DONE = 5,
	SOUPSTATE_WAITCARD_VERIFCARD = 6,
	SOUPSTATE_WAITCARD_UPDATING = 7,
	SOUPSTATE_UPDATING_DONE = 8,
	SOUPSTATE_ERROR_MESSAGE = 9,
	SOUPSTATE_MESSAGE = 10
};

enum {
	SIGNONUPDATE_BUSY = 0,
	SIGNONUPDATE_OK = 1,
	SIGNONUPDATE_CANCELLED = 2
};

enum {
	SOUPSTATE_DELETE_INIT = 0,
	SOUPSTATE_DELETE_WAITCARD = 1,
	SOUPSTATE_DELETE_WAITCARD_DELETING = 2,
	SOUPSTATE_DELETE_ERROR_MESSAGE = 3,
	SOUPSTATE_DELETE_MESSAGE = 4
};

enum {
	SIGNONDELETE_BUSY = 0,
	SIGNONDELETE_OK = 1,
	SIGNONDELETE_CANCELLED = 2
};

enum {
	we_list = 1,
	we_weaponset = 2,
	we_info = 3,
	we_back = 4,
	we_last = 5
};

enum {
	COL_CHR = 0,
	COL_TEAM = 1,
	COL_SKILL = 2,
	COL_ACTIVE = 3,
	CHRGRID_COLS = 4
};

struct chrsel_s { // 0x10
	/* 0x0 */ int chr;
	/* 0x4 */ int team;
	/* 0x8 */ int skill;
	/* 0xc */ int active;
};

typedef chrsel_s chrsel_t;

enum {
	cs_chrset = 1,
	cs_list = 2,
	cs_grid = 3,
	cs_info = 4,
	cs_back = 5,
	cs_last = 6
};

enum {
	av_musicon = 1,
	av_musicvol = 2,
	av_soundon = 3,
	av_soundvol = 4,
	av_dispx = 5,
	av_back = 6,
	av_last = 7
};

enum {
	chrsel_main_model = 1,
	chrsel_main_info = 2,
	chrsel_main_num = 3
};

enum {
	chrsel_handicap_gv = 1,
	chrsel_handicap_back = 2,
	chrsel_handicap_num = 3
};

enum {
	chrsel_team_team = 1,
	chrsel_team_back = 2,
	chrsel_team_num = 3
};

struct gmoptions_s { // 0x20
	/* 0x00 */ int gv_teamplay;
	/* 0x04 */ int gv_friendfire;
	/* 0x08 */ int gv_dispradar;
	/* 0x0c */ int gv_timelimit;
	/* 0x10 */ int gv_killlimit;
	/* 0x14 */ int gv_scorelimit;
	/* 0x18 */ int gv_scoremethod;
	/* 0x1c */ int gv_oneshotkill;
};

typedef gmoptions_s gmoptions_t;

enum {
	ao_t1 = 1,
	ao_option1 = 2,
	ao_option2 = 3,
	ao_option3 = 4,
	ao_option4 = 5,
	ao_option5 = 6,
	ao_option6 = 7,
	ao_option7 = 8,
	ao_option8 = 9,
	ao_option9 = 10,
	ao_option10 = 11,
	ao_weaponset = 12,
	ao_botset = 13,
	ao_ok = 14,
	ao_back = 15,
	ao_more = 16,
	ao_last = 17
};

enum {
	cht_list = 1,
	cht_back = 2,
	cht_last = 3
};

enum {
	mf_init_load_dir = 0,
	mf_init_load_wait = 1,
	mf_init_poll_start = 2,
	mf_init_make_menu = 3,
	mf_main = 4,
	mf_load_map_wait = 5
};

enum {
	ar_tileset = 1,
	ar_level = 2,
	ar_gamemode1 = 3,
	ar_gamemode2 = 4,
	ar_gamemode3 = 5,
	ar_gamemode4 = 6,
	ar_gamemode5 = 7,
	ar_gamemode6 = 8,
	ar_back = 9,
	ar_more = 10,
	ar_cheat = 11,
	ar_last = 12
};

struct gmtab_s { // 0x2
	/* 0x0 */ u8 gamemode;
	/* 0x1 */ u8 setupflags;
};

typedef gmtab_s gmtab_t;

enum {
	storychrsel_main_model = 1,
	storychrsel_main_ready = 2,
	storychrsel_main_last = 3
};

enum {
	st_level = 1,
	st_skill1 = 2,
	st_skill2 = 3,
	st_skill3 = 4,
	st_back = 5,
	st_more = 6,
	st_cheat = 7,
	st_last = 8
};

enum {
	ch_num = 1,
	ch_desc = 2,
	ch_back = 3,
	ch_more = 4,
	ch_last = 5
};

enum {
	il_back = 0,
	il_more = 1,
	il_last = 2
};

enum {
	sta_player = 1,
	sta_statgametype = 2,
	sta_statcat = 3,
	sta_back = 4,
	sta_last = 5
};

enum {
	gt_story = 1,
	gt_arcade = 2,
	gt_challenge = 3,
	gt_ilink = 4,
	gt_credits = 5,
	gt_statistics = 6,
	gt_audiovideo = 7,
	gt_save = 8,
	gt_back = 9,
	gt_more = 10,
	gt_last = 11
};

enum {
	so_new = 2000,
	so_load = 2001
};

enum {
	MSGID_DELETE = 1,
	MSGID_DUPLICATE = 2
};

enum {
	np_one = 1,
	np_two = 2,
	np_three = 3,
	np_four = 4,
	np_last = 5
};

enum {
	mcseq_state_busy = 0,
	mcseq_state_idle = 1,
	mcseq_state_fail = 2,
	mcseq_state_message = 3,
	mcseq_state_checkcards = 4,
	mcseq_state_selectcard_init = 5,
	mcseq_state_selectcard_pollstart = 6,
	mcseq_state_selectcard_pollloop = 7,
	mcseq_state_selectcard_pollwait = 8,
	mcseq_state_selectcard_done = 9,
	mcseq_state_ask_format = 10,
	mcseq_state_recheckcard = 11,
	mcseq_state_checkdir = 12,
	mcseq_state_checkcreatedir = 13,
	mcseq_state_checkspacedir = 14,
	mcseq_state_dircreated = 15,
	mcseq_state_checkicons = 16,
	mcseq_state_action = 17,
	mcseq_state_action_done = 18,
	mcseq_state_savefile_create = 19,
	mcseq_state_savefile_overwrite = 20,
	mcseq_state_savefile_start = 21,
	mcseq_state_savefile_end = 22,
	mcseq_state_poll_loop = 23,
	mcseq_state_poll_wait = 24
};

enum {
	mca_loadfile = 0,
	mca_savefile = 1
};

enum {
	MAPGEN_TYPE_DEATHMATCH = 0,
	MAPGEN_TYPE_STORY = 1,
	MAPGEN_TYPE_LABYRINTH = 2,
	MAPGEN_TYPE_NUM = 3
};

enum {
	MAPGEN_SIZE_SMALL = 0,
	MAPGEN_SIZE_MEDIUM = 1,
	MAPGEN_SIZE_LARGE = 2,
	MAPGEN_SIZE_NUM = 3
};

enum {
	MAPGEN_LIGHTS_DARK = 0,
	MAPGEN_LIGHTS_BRIGHT = 1,
	MAPGEN_LIGHTS_DISCO = 2,
	MAPGEN_LIGHTS_NUM = 3
};

struct item_s { // 0xc
	/* 0x0 */ u16 padextref;
	/* 0x2 */ u16 itemnum;
	/* 0x4 */ itemangle_t angle;
	/* 0x8 */ item_s *next;
};

typedef item_s item_t;

typedef enum {
	OBJTYPE_UNDEFINED = 0,
	OBJTYPE_TILE = 1,
	OBJTYPE_NUM = 2
} objtype_t;

struct object_s { // 0x44
	/* 0x00 */ objtype_t type;
	/* 0x04 */ fix_t x;
	/* 0x08 */ fix_t y;
	/* 0x0c */ fix_t z;
	/* 0x10 */ int angle;
	/* 0x14 */ int cost;
	/* 0x18 */ u16 flags;
	/* 0x1a */ u8 lighttype;
	/* 0x1b */ u8 lightphase;
	/* 0x1c */ u32 lightcolour;
	/* 0x20 */ u16 doors;
	/* 0x22 */ u16 drawndoors;
	/* 0x24 */ u8 doortype[8];
	/* 0x2c */ tiledef *tile[4];
	/* 0x3c */ item_t *items;
	/* 0x40 */ object_s *next;
};

typedef object_s object_t;

typedef enum {
	TILE_DRMD_FOCUSED = 1,
	TILE_DRMD_INSERTOK = 2,
	TILE_DRMD_REDERROR = 3,
	TILE_DRMD_MARKED = 4,
	TILE_DRMD_FOCUSEDMARKED = 5,
	TILE_DRMD_GHOSTVIEW = 6,
	TILE_DRMD_OUTLINETILE = 7
} tiledrmd_t;

typedef struct { // 0x4
	/* 0x0 */ s8 x;
	/* 0x1 */ s8 y;
	/* 0x2 */ s8 z;
	/* 0x3 */ u8 orientation;
} drawdoor_t;

// warning: multiple differing types with the same name (type name not equal)
typedef int (*msgfunc_t)(/* parameters unknown */);

enum {
	ICON_O = 0,
	ICON_X = 1,
	ICON_GUN = 2,
	ICON_AMMO = 3,
	ICON_BAG = 4,
	ICON_START = 5,
	ICON_HEALTH = 6,
	ICON_ARMOUR_LO = 7,
	ICON_ARMOUR_HI = 8,
	ICON_DROP1 = 9,
	ICON_DROP2 = 10,
	ICON_DROP3 = 11,
	ICON_DROP4 = 12,
	ICON_KEY1 = 13,
	ICON_KEY2 = 14,
	ICON_KEY3 = 15,
	ICON_KEY4 = 16,
	ICON_POWERUP = 17,
	ICON_AUTOGUN = 18,
	ICON_FIXEDGUN = 19,
	ICON_NPC = 20,
	ICON_NUM = 21
};

enum {
	POINTER_MAPVIEW = 0,
	POINTER_TILEPAGE = 1,
	POINTER_ZOOMTILE = 2,
	POINTER_COLOURWHEEL = 3,
	POINTER_NUM = 4
};

struct zoomview_s { // 0x40
	/* 0x00 */ int wcx;
	/* 0x04 */ int wcy;
	/* 0x08 */ int ww;
	/* 0x0c */ int wh;
	/* 0x10 */ int dest[3];
	/* 0x1c */ int destframes;
	/* 0x20 */ float dist;
	/* 0x24 */ float roty;
	/* 0x28 */ float tilt;
	/* 0x2c */ u32 flags;
	/* 0x30 */ prop *prop;
	/* 0x34 */ int itemnum;
	/* 0x38 */ object_t *obj;
	/* 0x3c */ int tilenum;
};

typedef zoomview_s zoomview_t;

struct tilepadinfo_s { // 0x14
	/* 0x00 */ pad *ppad;
	/* 0x04 */ prop *prop;
	/* 0x08 */ float pos[3];
};

typedef tilepadinfo_s tilepadinfo_t;

enum {
	EDITMODE_TILE = 0,
	EDITMODE_ITEM = 1,
	EDITMODE_LIGHT = 2,
	EDITMODE_PATROL = 3,
	EDITMODE_NUM = 4
};

typedef struct { // 0x8
	/* 0x0 */ object_t *pObj;
	/* 0x4 */ int padextref;
} routenode_t;

typedef struct { // 0x48
	/* 0x00 */ int length;
	/* 0x04 */ int mode;
	/* 0x08 */ routenode_t nodes[8];
} patrolroute_t;

struct editmodeinfo_s { // 0x8
	/* 0x0 */ char *desc;
	/* 0x4 */ int icon;
};

typedef editmodeinfo_s editmodeinfo_t;

enum {
	LIGHT_FIXED = 0,
	LIGHT_SINE = 1,
	LIGHT_SQUARE = 2,
	LIGHT_RANDOM = 3,
	LIGHT_NUM = 4
};

// warning: multiple differing types with the same name (descriptor not equal)
struct menulist_s { // 0x10
	/* 0x0 */ u16 numitems;
	/* 0x2 */ u16 numdisplay;
	/* 0x4 */ s16 baseleft;
	/* 0x6 */ s16 basetop;
	/* 0x8 */ u16 flags;
	/* 0xa */ u16 selected;
	/* 0xc */ int firstdisplay;
};

enum {
	mmg_type = 1,
	mmg_size = 2,
	mmg_lights = 3,
	mmg_create = 4,
	mmg_back = 5,
	mmg_last = 6
};

enum {
	mmo_gridintensity = 1,
	mmo_maze = 2,
	mmo_back = 3,
	mmo_last = 4
};

enum {
	enterdesc_init = 0,
	enterdesc_wait = 1
};

enum {
	mmmap_tileset = 1,
	mmmap_wpnset = 2,
	mmmap_tune = 3,
	mmmap_desc = 4,
	mmmap_back = 5,
	mmmap_last = 6
};

enum {
	tm_header = 1,
	tm_gamemode1 = 2,
	tm_gamemode2 = 3,
	tm_gamemode3 = 4,
	tm_gamemode4 = 5,
	tm_gamemode5 = 6,
	tm_gamemode6 = 7,
	tm_back = 8,
	tm_comment1 = 9,
	tm_comment2 = 10,
	tm_comment3 = 11,
	tm_comment4 = 12,
	tm_comment5 = 13,
	tm_comment6 = 14,
	tm_last = 15
};

enum {
	mf_init_load_dir = 0,
	mf_init_load_wait = 1,
	mf_init_poll_start = 2,
	mf_init_make_menu = 3,
	mf_main = 4,
	mf_delete_ask = 5,
	mf_ask_overwrite = 6,
	mf_save_overwrite_ask = 7,
	mf_save_name_init = 8,
	mf_save_name_wait = 9,
	mf_save_map_check = 10,
	mf_save_map_start = 11,
	mf_save_fullsize_wait = 12,
	mf_save_map_wait = 13,
	mf_save_dir_wait = 14,
	mf_okcancel = 15,
	mf_okreloaddir = 16,
	mf_load_map_wait = 17
};

enum {
	mmmain_mapsettings = 1,
	mmmain_testmap = 2,
	mmmain_undo = 3,
	mmmain_centermap = 4,
	mmmain_clearmap = 5,
	mmmain_settings = 6,
	mmmain_loadmap = 7,
	mmmain_savemap = 8,
	mmmain_help = 9,
	mmmain_quit = 10,
	mmmain_exit = 11,
	mmmain_last = 12
};

enum {
	enemyedit_ba = 1,
	enemyedit_bo = 2,
	enemyedit_exit = 3,
	enemyedit_last = 4
};

enum {
	mmpadact_clear = 1,
	mmpadact_start = 2,
	mmpadact_drop = 3,
	mmpadact_health = 4,
	mmpadact_armour = 5,
	mmpadact_gun = 6,
	mmpadact_ammo = 7,
	mmpadact_bag = 8,
	mmpadact_enemy = 9,
	mmpadact_key = 10,
	mmpadact_pwup = 11,
	mmpadact_props = 12,
	mmpadact_tele = 13,
	mmpadact_last = 14
};

enum {
	ID_EDITMODE_0 = 1,
	ID_EDITMODE_LAST = 4,
	ID_TILES_0 = 5,
	ID_TILES_LAST = 34,
	ID_TILES_NEXTPAGE = 35,
	ID_ITEMS_0 = 36,
	ID_ITEMS_LAST = 88,
	ID_ITEMS_NEXTPAGE = 89,
	ID_RESETPALETTE = 90,
	ID_PALETTE_0 = 91,
	ID_PALETTE_LAST = 154,
	ID_LIGHTMODE_0 = 155,
	ID_LIGHTMODE_LAST = 158,
	ID_LIGHTSPEED_0 = 159,
	ID_LIGHTSPEED_LAST = 161,
	ID_LIGHTPHASE = 162,
	ID_NEWPATROL = 163,
	ID_PATROL_0 = 164,
	ID_PATROL_LAST = 171,
	ID_PATROLMODE_0 = 172,
	ID_PATROLMODE_LAST = 179,
	ID_DRAWMISC0 = 180,
	ID_DRAWMISC1 = 181,
	ID_DRAWMISC2 = 182,
	ID_COLOUR_HS = 183,
	ID_COLOUR_V = 184,
	ID_COLOUR_R = 185,
	ID_COLOUR_G = 186,
	ID_COLOUR_B = 187
};

struct neattext_s { // 0x10
	/* 0x0 */ u32 flags;
	/* 0x4 */ u32 fgpen;
	/* 0x8 */ u32 fillpen;
	/* 0xc */ u32 bgpen;
};

typedef neattext_s neattext_t;

struct storepointer_s { // 0xc
	/* 0x0 */ e_icon picture;
	/* 0x4 */ fix_t savexy[2];
};

typedef storepointer_s storepointer_t;

enum {
	D_NORTH = 0,
	D_EAST = 1,
	D_SOUTH = 2,
	D_WEST = 3,
	D_NUM = 4
};

typedef struct { // 0x10
	/* 0x0 */ int x1;
	/* 0x4 */ int y1;
	/* 0x8 */ int x2;
	/* 0xc */ int y2;
} coord_t;

struct tinfo_s { // 0x4
	/* 0x0 */ s8 tile;
	/* 0x1 */ s8 rot;
	/* 0x2 */ u8 occ;
	/* 0x3 */ s8 traffic;
};

typedef tinfo_s tinfo_t;

typedef struct { // 0xc
	/* 0x0 */ int dx;
	/* 0x4 */ int dy;
	/* 0x8 */ u8 doorbit;
} d_info_t;

typedef struct { // 0x18
	/* 0x00 */ s16 startx;
	/* 0x02 */ s16 starty;
	/* 0x04 */ s16 d_dir;
	/* 0x06 */ s16 length;
	/* 0x08 */ s16 connectlength;
	/* 0x0a */ s16 plugs;
	/* 0x0c */ s16 connectplugs;
	/* 0x0e */ s16 intersections;
	/* 0x10 */ float ratio;
	/* 0x14 */ float connectratio;
} branch_t;

struct pos_s { // 0x4
	/* 0x0 */ s8 x;
	/* 0x1 */ s8 y;
	/* 0x2 */ u8 rotation;
	/* 0x3 */ u8 score;
};

enum {
	NORTH = 1,
	EAST = 2,
	SOUTH = 4,
	WEST = 8
};

struct builtinmapinfo_s { // 0x8
	/* 0x0 */ short int name;
	/* 0x4 */ u8 *file;
};

typedef builtinmapinfo_s builtinmapinfo_t;

struct portalcalcdata_s { // 0x30
	/* 0x00 */ float bb[2][3];
	/* 0x18 */ int scrmin[2];
	/* 0x20 */ int scrmax[2];
	/* 0x28 */ int backfacing;
	/* 0x2c */ int culled;
};

typedef portalcalcdata_s portalcalcdata;

struct tileloadinfo_s { // 0x3c
	/* 0x00 */ room *rooms;
	/* 0x04 */ portal **portals;
	/* 0x08 */ texinfo *textures;
	/* 0x0c */ volume *volumes;
	/* 0x10 */ int numrooms;
	/* 0x14 */ int numportals;
	/* 0x18 */ int numtextures;
	/* 0x1c */ int numvolumes;
	/* 0x20 */ int roomstart;
	/* 0x24 */ int portalstart;
	/* 0x28 */ int texturestart;
	/* 0x2c */ int lighttype;
	/* 0x30 */ int lightphase;
	/* 0x34 */ u16 seals;
	/* 0x38 */ u32 col;
};

typedef tileloadinfo_s tileloadinfo;

struct tmppointdata_s { // 0x14
	/* 0x00 */ float proj[4];
	/* 0x10 */ int out;
};

typedef tmppointdata_s tmppointdata;

struct tmppointarray_s { // 0x54
	/* 0x00 */ tmppointdata *points[20];
	/* 0x50 */ int numpoints;
};

typedef tmppointarray_s tmppointarray;

struct bglight_s { // 0x20
	/* 0x00 */ float Pos[3];
	/* 0x0c */ light *l;
	/* 0x10 */ obinst *pInst;
	/* 0x14 */ int Part;
};

typedef bglight_s bglight;

struct hall_s { // 0xc
	/* 0x0 */ int numpads;
	/* 0x4 */ int numhalllinks;
	/* 0x8 */ int numintlinks;
	/* 0xc */ int data[0];
};

typedef hall_s hall;

enum {
	PLMODE_ADDPAD = 0,
	PLMODE_DELETEPAD = 1,
	PLMODE_SETPADFLAGS = 2,
	PLMODE_MOVEPADXYZ = 3,
	PLMODE_ROTATEPAD = 4,
	PLMODE_SETHALL = 5,
	PLMODE_ADDLINK = 6,
	PLMODE_DELETELINK = 7,
	PLMODE_SAVE = 8,
	PLMODE_NUM = 9
};

enum {
	LINKMODE_NORMAL = 0,
	LINKMODE_ONEWAY = 1,
	LINKMODE_DOOR = 2,
	LINKMODE_NUM = 3
};

enum {
	PADMODE_NAVIGATION = 0,
	PADMODE_PLACEMENT = 1,
	PADMODE_NUM = 2
};

enum {
	PADFLAGMODE_ACTIVE = 0,
	PADFLAGMODE_LEDGE = 1,
	PADFLAGMODE_CAMPER = 2,
	PADFLAGMODE_CORNER = 3,
	PADFLAGMODE_PICKUP = 4,
	PADFLAGMODE_PLACEMENTPAD = 5,
	PADFLAGMODE_INTOLIFT = 6,
	PADFLAGMODE_INLIFT = 7,
	PADFLAGMODE_TELEPORT = 8,
	PADFLAGMODE_PLUGNORTH = 9,
	PADFLAGMODE_PLUGEAST = 10,
	PADFLAGMODE_PLUGSOUTH = 11,
	PADFLAGMODE_PLUGWEST = 12,
	PADFLAGMODE_PLUGGED = 13,
	PADFLAGMODE_DROPPEDGUN = 14,
	PADFLAGMODE_DYNAPLACEPAD = 15,
	PADFLAGMODE_NUM = 16
};

struct route_s { // 0x10
	/* 0x0 */ short int next;
	/* 0x2 */ short int parent;
	/* 0x4 */ short int padnum;
	/* 0x6 */ short int linknum;
	/* 0x8 */ float cost;
	/* 0xc */ float esttotal;
};

typedef route_s route;

struct routelist_s { // 0x4
	/* 0x0 */ int head;
};

typedef routelist_s routelist;

struct PropExtraMemChunk_s { // 0x50008
	/* 0x00000 */ PropExtraMemChunk_s *pNext;
	/* 0x00004 */ int AmountUsed;
	/* 0x00008 */ u8 Buffer[327680];
};

typedef PropExtraMemChunk_s PropExtraMemChunk;

struct passDef_t { // 0xc
	/* 0x0 */ prop *p;
	/* 0x4 */ float dist;
	/* 0x8 */ float dot;
};

typedef passDef_t passDef;

enum {
	LIFT_NOTCALLED = 0,
	LIFT_CALLEDUP = 1,
	LIFT_CALLEDDOWN = 2
};

enum {
	LIFTDIR_UNDECIDED = 0,
	LIFTDIR_UP = 1,
	LIFTDIR_DOWN = 2
};

enum {
	PEMODE_MOVEXYZPROP = 0,
	PEMODE_ROTATEPROP = 1,
	PEMODE_SHOWPADS = 2,
	PEMODE_NUM = 3
};

enum {
	AUTOCENTRE_ALLOW = 0,
	AUTOCENTRE_PROHIBIT = 1,
	AUTOCENTRE_ACTIVE = 2,
	AUTOCENTRE_NUM = 3
};

enum {
	ANIMPERS_NORMAL = 0,
	ANIMPERS_BULKY = 1,
	ANIMPERS_ACROBATIC = 2,
	ANIMPERS_NORMAL_AGRESSIVE = 3,
	ANIMPERS_BULKY_AGRESSIVE = 4,
	ANIMPERS_ACROBATIC_AGRESSIVE = 5,
	ANIMPERS_NORMAL_CAUTIOUS = 6,
	ANIMPERS_BULKY_CAUTIOUS = 7,
	ANIMPERS_ACROBATIC_CAUTIOUS = 8,
	ANIMPERS_MIL_STORY1 = 9,
	ANIMPERS_NUM = 10
};

enum {
	ATTACK_PHASE_FIRSTSIGHT = 0,
	ATTACK_PHASE_ATTACK = 1,
	ATTACK_PHASE_CLOSEIN = 2,
	ATTACK_PHASE_BACKOFF = 3,
	ATTACK_PHASE_SEEK = 4,
	NUM_ATTACKANIM_PHASES = 5
};

struct animsequence_s { // 0x2c
	/* 0x00 */ int numanims;
	/* 0x04 */ int animnum[10];
};

typedef animsequence_s animsequence;

struct attackphase_s { // 0x3c
	/* 0x00 */ int numattackseqs;
	/* 0x04 */ int seq[14];
};

typedef attackphase_s attackphase;

struct attackaniminfo_s { // 0x10
	/* 0x0 */ float frequency;
	/* 0x4 */ float skill;
	/* 0x8 */ float mindist;
	/* 0xc */ float maxdist;
};

typedef attackaniminfo_s attackaniminfo;

struct animpersonalityinfo_s { // 0x18
	/* 0x00 */ float backoffdist;
	/* 0x04 */ float closeindist;
	/* 0x08 */ int closeinprob;
	/* 0x0c */ int attackprob;
	/* 0x10 */ int backoffprob;
	/* 0x14 */ int defaultanim;
};

typedef animpersonalityinfo_s animpersonalityinfo;

enum {
	ANIMSEQ_NONE = -1,
	ANIMSEQ_DIVE = 0,
	ANIMSEQ_SHUFFLE_LEFT = 1,
	ANIMSEQ_SHUFFLE = 2,
	ANIMSEQ_SIDESTEP_RIGHT = 3,
	ANIMSEQ_SIDESTEP_RIGHTLITTLE = 4,
	ANIMSEQ_SLIDE = 5,
	ANIMSEQ_SUMMERSAULT = 6,
	ANIMSEQ_LOWLEFT = 7,
	ANIMSEQ_BACKFLIP = 8,
	ANIMSEQ_CARTWHEEL = 9,
	ANIMSEQ_DIAGBACKRIGHT2 = 10,
	ANIMSEQ_DIAGFORLEFT = 11,
	ANIMSEQ_DIAGLEFTRIGHT = 12,
	ANIMSEQ_ROLLRIGHT = 13,
	ANIMSEQ_ROLLLEFT_FLIPPED = 14,
	ANIMSEQ_STEPRIGHT = 15,
	ANIMSEQ_SMALLSTEP10 = 16,
	ANIMSEQ_SMALLSTEP9 = 17,
	ANIMSEQ_STEPBACK5 = 18,
	ANIMSEQ_SMALLSTEPBACK = 19,
	ANIMSEQ_FAINTLEFT = 20,
	ANIMSEQ_FAINTRIGHT_FLIPPED = 21,
	ANIMSEQ_STRAFEFARRIGHT = 22,
	ANIMSEQ_DOUBLEDODGE = 23,
	ANIMSEQ_DOUBLEDODGE_FLIPPED = 24,
	ANIMSEQ_DODGELEFTRIGHT = 25,
	ANIMSEQ_STRAFEFARLEFT = 26,
	ANIMSEQ_TURNANDRUN = 27,
	ANIMSEQ_RETREAT = 28,
	ANIMSEQ_NA_STRAFE_LR = 29,
	ANIMSEQ_NA_STRAFE_RL = 30,
	ANIMSEQ_NA_STATIONARY1 = 31,
	ANIMSEQ_NA_FORWARD1 = 32,
	ANIMSEQ_NA_FORWARD2 = 33,
	ANIMSEQ_NA_FORWARD3 = 34,
	ANIMSEQ_NA_FORWARD4 = 35,
	ANIMSEQ_NA_FORWARD5 = 36,
	ANIMSEQ_NC_BACK1 = 37,
	ANIMSEQ_NC_BACK2 = 38,
	ANIMSEQ_NC_BACK3 = 39,
	ANIMSEQ_NC_BACK4 = 40,
	ANIMSEQ_NC_BACK5 = 41,
	ANIMSEQ_NC_BACK6 = 42,
	ANIMSEQ_NC_BACK7 = 43,
	ANIMSEQ_B_STATIONARY1 = 44,
	ANIMSEQ_B_STATIONARY2 = 45,
	ANIMSEQ_B_STATIONARY3 = 46,
	ANIMSEQ_B_STATIONARY4 = 47,
	ANIMSEQ_B_FORWARD1 = 48,
	ANIMSEQ_B_BACK1 = 49,
	ANIMSEQ_A_STATIONARY1 = 50,
	ANIMSEQ_A_BACK1 = 51,
	ANIMSEQ_A_BACK2 = 52,
	ANIMSEQ_A_FORWARD1 = 53,
	ANIMSEQ_A_FORWARD2 = 54,
	ANIMSEQ_STAND = 55,
	ANIMSEQ_REACTION = 56,
	ANIMSEQ_REACTSHORT = 57,
	ANIMSEQ_RUNL = 58,
	ANIMSEQ_RUNR = 59,
	ANIMSEQ_RUNBACK_SINGLE = 60,
	ANIMSEQ_WALKLEFT = 61,
	ANIMSEQ_WALKRIGHT = 62,
	ANIMSEQ_RUN = 63,
	ANIMSEQ_RUN1 = 64,
	ANIMSEQ_MOVEFORWARD = 65,
	ANIMSEQ_MOVELEFT = 66,
	ANIMSEQ_MOVERIGHT = 67,
	ANIMSEQ_STANDFEINTLEFT = 68,
	ANIMSEQ_STANDFEINTRIGHT = 69,
	ANIMSEQ_NUM = 70
};

struct laserBoltDef_s { // 0x10
	/* 0x0 */ float radius;
	/* 0x4 */ float length;
	/* 0x8 */ u32 abgr;
	/* 0xc */ int repetitions;
};

typedef laserBoltDef_s laserBoltDef;

enum {
	LASERBOLT_GREEN = 0,
	LASERBOLT_BLUE = 1,
	LASERBOLT_PURPLE = 2,
	LASERBOLT_ORANGE = 3,
	LASERBOLT_RED = 4,
	NUM_LASERBOLT_TYPES = 5
};

enum {
	EXPLOSIONRENDER_NONE = -1,
	EXPLOSIONRENDER_NORMAL_IMPACT = 0,
	EXPLOSIONRENDER_SMALL_IMPACT = 1,
	EXPLOSIONRENDER_MUSHROOM = 2,
	EXPLOSIONRENDER_MUSHROOM2 = 3,
	EXPLOSIONRENDER_BLUEROCKET1 = 4,
	EXPLOSIONRENDER_BLUEROCKET2 = 5,
	NUM_EXPLOSION_RENDERS = 6
};

struct explosionRender_s { // 0xc
	/* 0x0 */ boolean blast;
	/* 0x4 */ u32 colour;
	/* 0x8 */ float size;
};

typedef explosionRender_s explosionRender;

enum {
	BULLET_GROUP_NONE = -1,
	BULLET_GROUP_TYPE_BULLETS = 0,
	BULLET_GROUP_TYPE_MINES = 1,
	BULLET_GROUP_TYPE_EXPLOSIONS = 2,
	NUM_BULLET_GROUP_TYPES = 3
};

enum {
	PROXIMITY_STAGE_NOT_ARMED = 0,
	PROXIMITY_STAGE_ARMED = 1,
	PROXIMITY_STAGE_EJECT_CLIP = 2,
	PROXIMITY_STAGE_EJECT_MINE_WAIT = 3,
	PROXIMITY_STAGE_EJECT_MINE = 4,
	PROXIMITY_STAGE_DONE = 5
};

struct cartridge_s { // 0x60
	/* 0x00 */ mtx_u rotationmatrix;
	/* 0x40 */ prop_s *prop;
	/* 0x44 */ float rotvel[3];
	/* 0x50 */ int time;
	/* 0x54 */ float baseHeightWhenFired;
	/* 0x58 */ int drawflags;
};

typedef cartridge_s cartridge;

struct cartridgeGroup_s { // 0x3d0
	/* 0x000 */ cartridge cartridges[10];
	/* 0x3c0 */ int startCartridge;
	/* 0x3c4 */ int numCartridges;
};

typedef cartridgeGroup_s cartridgeGroup;

enum {
	FLAME_NONE = -1,
	FLAME_BG = 0,
	FLAME_PROP = 1,
	FLAME_CORPSE = 2,
	FLAME_CHR_TP = 3,
	FLAME_THROW_FP = 4,
	FLAME_THROW_TP = 5,
	NUM_FLAME_TYPES = 6
};

struct flameparticle_s { // 0x50
	/* 0x00 */ float pos[3];
	/* 0x0c */ int chrnum;
	/* 0x10 */ int viewnum;
	/* 0x14 */ int gunfxType;
	/* 0x18 */ int type;
	/* 0x1c */ float time;
	/* 0x20 */ float endtime;
	/* 0x24 */ float dir[3];
	/* 0x30 */ float rot;
	/* 0x34 */ float sizeInitial;
	/* 0x38 */ float sizeRange;
	/* 0x3c */ float sizeMax;
	/* 0x40 */ float zbias;
	/* 0x44 */ int room;
};

typedef flameparticle_s flameparticle;

struct fcol_s { // 0x10
	/* 0x0 */ float r;
	/* 0x4 */ float g;
	/* 0x8 */ float b;
	/* 0xc */ float a;
};

typedef fcol_s fcol;

struct particleTypeInfo_s { // 0x10
	/* 0x0 */ char *name;
	/* 0x4 */ int autoend;
	/* 0x8 */ int maximum;
	/* 0xc */ int size;
};

typedef particleTypeInfo_s particleTypeInfo;

enum {
	PARTICLETYPE_NONE = -1,
	PARTICLETYPE_BULLETSPARKS = 0,
	PARTICLETYPE_SPRITESPARKS = 1,
	PARTICLETYPE_BULLETSMOKE = 2,
	PARTICLETYPE_TRACER = 3,
	PARTICLETYPE_SPRITEBURST_RGBA = 4,
	PARTICLETYPE_SPRITEBURST_ADDRGBA = 5,
	PARTICLETYPE_SPRITESTREAM_RGBA = 6,
	PARTICLETYPE_SPRITESTREAM_ADDRGBA = 7,
	PARTICLETYPE_SPRITETRAIL_RGBA = 8,
	PARTICLETYPE_SPRITETRAIL_ADDRGBA = 9,
	PARTICLETYPE_GLASS = 10,
	PARTICLETYPE_SPRITEMANUAL_RGBA = 11,
	PARTICLETYPE_SPRITEMANUAL_ADDRGBA = 12,
	PARTICLETYPE_GLOW = 13,
	PARTICLETYPE_SPRITE = 14,
	PARTICLETYPE_IMPACTEXPLOSION = 15,
	PARTICLETYPE_BLASTEXPLOSION = 16,
	PARTICLETYPE_PULSE = 17,
	PARTICLETYPE_SPARKBURST_RGBA = 18,
	PARTICLETYPE_SPARKBURST_ADDRGBA = 19,
	PARTICLETYPE_SPARKSTREAM_RGBA = 20,
	PARTICLETYPE_SPARKSTREAM_ADDRGBA = 21,
	PARTICLETYPE_SPARKSTREAM_INVISIBLE = 22,
	PARTICLETYPE_STRIPTRAIL_RGBA = 23,
	PARTICLETYPE_STRIPTRAIL_ADDRGBA = 24,
	PARTICLETYPE_STRAIGHTTRAIL_RGBA = 25,
	PARTICLETYPE_STRAIGHTTRAIL_ADDRGBA = 26,
	PARTICLETYPE_NUM = 27
};

struct particleTimeData_s { // 0x10
	/* 0x0 */ float lifeTime;
	/* 0x4 */ float fadeInTime;
	/* 0x8 */ float fadeOutTime;
	/* 0xc */ float deltaTime;
};

typedef particleTimeData_s particleTimeData;

struct particleSizeData_s { // 0x20
	/* 0x00 */ float size;
	/* 0x04 */ float sizey;
	/* 0x08 */ float screenSizeMax;
	/* 0x0c */ float screenSizeMaxy;
	/* 0x10 */ float zBias;
	/* 0x14 */ float aspect;
	/* 0x18 */ float expansionRate[2];
};

typedef particleSizeData_s particleSizeData;

struct particleMoveData_s { // 0x40
	/* 0x00 */ float rotation;
	/* 0x04 */ float gravity;
	/* 0x08 */ float velocity[3];
	/* 0x14 */ float velocityRandom[3];
	/* 0x20 */ float velocityBias[3];
	/* 0x2c */ float trailDispersalRate[3];
	/* 0x38 */ float bounceElasticityXZ;
	/* 0x3c */ float bounceElasticityY;
};

typedef particleMoveData_s particleMoveData;

struct particleInfo_s { // 0x80
	/* 0x00 */ int particleTextureIndex;
	/* 0x04 */ int blendMode;
	/* 0x08 */ int number;
	/* 0x0c */ u32 abgr;
	/* 0x10 */ particleTimeData timeData;
	/* 0x20 */ particleSizeData sizeData;
	/* 0x40 */ particleMoveData moveData;
};

typedef particleInfo_s particleInfo;

struct tracerDef_s { // 0x18
	/* 0x00 */ u32 colour;
	/* 0x04 */ int particleTextureIndex;
	/* 0x08 */ float lengthFP;
	/* 0x0c */ float lengthTP;
	/* 0x10 */ float screenWidthFP;
	/* 0x14 */ float screenWidthTP;
};

typedef tracerDef_s tracerDef;

struct pulseDef_s { // 0x8
	/* 0x0 */ u32 colour;
	/* 0x4 */ int particleTextureIndex;
};

typedef pulseDef_s pulseDef;

struct DecalDef_s { // 0xf0
	/* 0x00 */ float Pos[8][4];
	/* 0x80 */ float UV[8][2];
	/* 0xc0 */ DecalDef_s *pNext;
	/* 0xc4 */ DecalDef_s *pPrev;
	/* 0xc8 */ int Type;
	/* 0xcc */ int NumPoints;
	/* 0xd0 */ int TexNum;
	/* 0xd4 */ int Room;
	/* 0xd8 */ int MatrixNum;
	/* 0xdc */ prop *pProp;
	/* 0xe0 */ float AlphaScale;
	/* 0xe4 */ float AlphaScale1;
	/* 0xe8 */ u32 Col;
};

typedef DecalDef_s DecalDef;

struct FootDecalDef_s { // 0x100
	/* 0x00 */ DecalDef Decal;
	/* 0xf0 */ int ChrID;
	/* 0xf4 */ float Dir;
};

typedef FootDecalDef_s FootDecalDef;

struct DecalCreateDef_s { // 0x4c
	/* 0x00 */ int Type;
	/* 0x04 */ int TexNum;
	/* 0x08 */ float Scale;
	/* 0x0c */ u32 Col;
	/* 0x10 */ float Dir;
	/* 0x14 */ boolean RandomUV;
	/* 0x18 */ int Chr;
	/* 0x1c */ boolean LeftFoot;
	/* 0x20 */ HitInfoDef HitInfo;
	/* 0x34 */ float DecalPos[3];
	/* 0x40 */ float DecalNorm[3];
};

typedef DecalCreateDef_s DecalCreateDef;

typedef struct { // 0x2c
	/* 0x00 */ HitInfoDef HitInfo;
	/* 0x14 */ float DecalPos[3];
	/* 0x20 */ float DecalNorm[3];
} PolysDoneDef;

typedef struct { // 0x70
	/* 0x00 */ u32 vifcode[4];
	/* 0x10 */ sceGifTag giftag;
	/* 0x20 */ sceGsBitbltbuf bitbltbuf;
	/* 0x28 */ u64 bitbltbufaddr;
	/* 0x30 */ sceGsTrxpos trxpos;
	/* 0x38 */ u64 trxposaddr;
	/* 0x40 */ sceGsTrxreg trxreg;
	/* 0x48 */ u64 trxregaddr;
	/* 0x50 */ sceGsSignal signal;
	/* 0x58 */ u64 signaladdr;
	/* 0x60 */ sceGsTrxdir trxdir;
	/* 0x68 */ u64 trxdiraddr;
} gsStoreImage;

struct glowinfo_s { // 0x24
	/* 0x00 */ int player;
	/* 0x04 */ int lighttype;
	/* 0x08 */ int texture;
	/* 0x0c */ int type;
	/* 0x10 */ float x;
	/* 0x14 */ float y;
	/* 0x18 */ int sizex;
	/* 0x1c */ int sizey;
	/* 0x20 */ u32 col;
};

typedef glowinfo_s glowinfo;

struct blastring_s { // 0x24
	/* 0x00 */ float radiusinner;
	/* 0x04 */ float radiusouter;
	/* 0x08 */ float speed;
	/* 0x0c */ float time;
	/* 0x10 */ float axisrot;
	/* 0x14 */ float axisrotinc;
	/* 0x18 */ float axis[3];
};

typedef blastring_s blastring;

struct roomlight_s { // 0x1c
	/* 0x00 */ int type;
	/* 0x04 */ float speed;
	/* 0x08 */ float frac;
	/* 0x0c */ u32 amb;
	/* 0x10 */ u32 min;
	/* 0x14 */ u32 max;
	/* 0x18 */ u32 cur;
};

typedef roomlight_s roomlight;

struct fireFlyParticle_s { // 0x30
	/* 0x00 */ float pos[3];
	/* 0x0c */ float velocity[3];
	/* 0x18 */ float destPos[3];
	/* 0x24 */ float timeThisWay;
	/* 0x28 */ float lifetime;
	/* 0x2c */ float totalLifetime;
};

typedef fireFlyParticle_s fireFlyParticle;

struct snowParticle_s { // 0x1c
	/* 0x00 */ float pos[3];
	/* 0x0c */ float velocity[3];
	/* 0x18 */ float wind;
};

typedef snowParticle_s snowParticle;

struct precBlockPrecalc_s { // 0x10
	/* 0x0 */ float blockPos[3];
	/* 0xc */ boolean autopass;
};

typedef precBlockPrecalc_s precBlockPrecalc;

struct weatherBoundsData_s { // 0xa0
	/* 0x00 */ float distsqFromPlayer[4];
	/* 0x10 */ float precipitationScale[4];
	/* 0x20 */ fireFlyParticle fireFlies[2];
	/* 0x80 */ int blocksx;
	/* 0x84 */ int blocksy;
	/* 0x88 */ int blocksz;
	/* 0x8c */ float *clippingx;
	/* 0x90 */ float *clippingy;
	/* 0x94 */ float *clippingz;
	/* 0x98 */ precBlockPrecalc *blocks;
};

typedef weatherBoundsData_s weatherBoundsData;

struct weatherRoomData_s { // 0x2c
	/* 0x00 */ float distsqFromPlayer[4];
	/* 0x10 */ float splashScale[4];
	/* 0x20 */ int fxUsage;
	/* 0x24 */ int numBounds;
	/* 0x28 */ weatherBoundsData *bounds;
};

typedef weatherRoomData_s weatherRoomData;

struct star_s { // 0x1c
	/* 0x00 */ float radiusx;
	/* 0x04 */ float radiusz;
	/* 0x08 */ float signx;
	/* 0x0c */ float signz;
	/* 0x10 */ float time;
	/* 0x14 */ float speed;
	/* 0x18 */ u32 col;
};

typedef star_s star;

struct space_fire_s { // 0x18
	/* 0x00 */ float offsetx;
	/* 0x04 */ float offsety;
	/* 0x08 */ float offsetz;
	/* 0x0c */ float time;
	/* 0x10 */ float speed;
	/* 0x14 */ u32 col;
};

typedef space_fire_s space_fire;

enum {
	CREDITS_END = -1,
	CREDITS_NEWLINE = 0,
	CREDITS_ALIGN_LEFT = 1,
	CREDITS_ALIGN_MIDDLE = 2,
	CREDITS_ALIGN_RIGHT = 3,
	CREDITS_NEWPAGE = 4
};

struct creditline_s { // 0x1c
	/* 0x00 */ int font;
	/* 0x04 */ int colour1;
	/* 0x08 */ int colour2;
	/* 0x0c */ int alignment;
	/* 0x10 */ short int text;
	/* 0x14 */ float waittime;
	/* 0x18 */ float texttime;
};

typedef creditline_s creditline;

struct creditTunnelSection_s { // 0x30
	/* 0x00 */ float pos[2];
	/* 0x08 */ float radius;
	/* 0x0c */ int colour[3][3];
};

typedef creditTunnelSection_s creditTunnelSection;

struct tunnelData_s { // 0x1450
	/* 0x0000 */ float xyz[3][12][4][4];
	/* 0x0900 */ float st[3][12][4][4];
	/* 0x1200 */ u32 rgba[3][12][4];
	/* 0x1440 */ tunnelData_s *next;
	/* 0x1444 */ int section;
};

typedef tunnelData_s tunnelData;

struct vertice_s { // 0x18
	/* 0x00 */ float x;
	/* 0x04 */ float y;
	/* 0x08 */ float z;
	/* 0x0c */ float u;
	/* 0x10 */ float v;
	/* 0x14 */ u32 col;
};

typedef vertice_s vertice;

struct skymesh_s { // 0x7d0
	/* 0x000 */ vertice vertices[9][9];
	/* 0x798 */ int uResolution;
	/* 0x79c */ int vResolution;
	/* 0x7a0 */ float pTL[2];
	/* 0x7a8 */ float pTR[2];
	/* 0x7b0 */ float pBL[2];
	/* 0x7b8 */ float radius;
	/* 0x7bc */ float height;
	/* 0x7c0 */ float heightadjust;
	/* 0x7c4 */ int texturenum;
	/* 0x7c8 */ u32 col;
	/* 0x7cc */ u32 outercol;
};

typedef skymesh_s skymesh;

enum {
	ROOMFXTYPE_NONE = 0,
	ROOMFXTYPE_SHOCKWAVE = 1,
	ROOMFXTYPE_MINIWAVE = 2,
	ROOMFXTYPE_OUTLINE = 3
};

struct roomfx_s { // 0x44
	/* 0x00 */ int type;
	/* 0x04 */ int frame;
	/* 0x08 */ float time;
	/* 0x0c */ float endtime;
	/* 0x10 */ int room;
	/* 0x14 */ prop *fxprop;
	/* 0x18 */ float pos[3];
	/* 0x24 */ float power;
	/* 0x28 */ float dir[3];
	/* 0x34 */ int partindex;
	/* 0x38 */ int chunkindex;
	/* 0x3c */ int polyindex;
	/* 0x40 */ partdef *part;
};

typedef roomfx_s roomfx;

enum {
	BAGICON_DEFAULT = 0,
	BAGICON_NUM = 1
};

struct spot_s { // 0xc
	/* 0x0 */ float ang;
	/* 0x4 */ float dis;
	/* 0x8 */ u32 rgba;
};

enum {
	__no_type_class = -1,
	__void_type_class = 0,
	__integer_type_class = 1,
	__char_type_class = 2,
	__enumeral_type_class = 3,
	__boolean_type_class = 4,
	__pointer_type_class = 5,
	__reference_type_class = 6,
	__offset_type_class = 7,
	__real_type_class = 8,
	__complex_type_class = 9,
	__function_type_class = 10,
	__method_type_class = 11,
	__record_type_class = 12,
	__union_type_class = 13,
	__array_type_class = 14,
	__string_type_class = 15,
	__set_type_class = 16,
	__file_type_class = 17,
	__lang_type_class = 18
};

typedef __gnuc_va_list va_list;

struct profiledata_s { // 0x1c
	/* 0x00 */ int active;
	/* 0x04 */ int timing;
	/* 0x08 */ float totalframes;
	/* 0x0c */ float filtmax;
	/* 0x10 */ int newmaxtime;
	/* 0x14 */ char *id;
	/* 0x18 */ u32 col;
};

typedef profiledata_s profiledata;

typedef enum {
	IMAGE_UNKNOWN = 0,
	IMAGE_RGB = 1,
	IMAGE_P6 = 2,
	IMAGE_P8 = 3,
	IMAGE_Q6 = 4,
	IMAGE_Q8 = 5,
	IMAGE_M6 = 6,
	IMAGE_M8 = 7
} eImageType;

typedef struct { // 0x2c
	/* 0x00 */ short unsigned int imagic;
	/* 0x02 */ short unsigned int type;
	/* 0x04 */ short unsigned int dim;
	/* 0x06 */ short unsigned int sizeX;
	/* 0x08 */ short unsigned int sizeY;
	/* 0x0a */ short unsigned int sizeZ;
	/* 0x0c */ unsigned char *tmp[5];
	/* 0x20 */ unsigned int rleEnd;
	/* 0x24 */ unsigned int *rowStart;
	/* 0x28 */ unsigned int *rowSize;
} RGB_header;

enum {
	EHL_CALLLIFT = 0,
	EHL_WAITFORLIFT = 1,
	EHL_INLIFT = 2,
	EHL_ENTERLIFT = 3,
	EHL_EXITLIFT = 4,
	EHL_WAITFORTARGET = 5
};

enum {
	ONFIRE_CHOOSEPAD = 0,
	ONFIRE_GOTOPAD = 1
};

enum {
	RAW_NULL = 0,
	RAW_CHOOSE_DEST = 1,
	RAW_PROGRESS = 2,
	RAW_STOP = 3
};

struct padinf_s { // 0xc
	/* 0x0 */ float dist;
	/* 0x4 */ int padnum;
	/* 0x8 */ float dot;
};

enum {
	ENR_START = 0,
	ENR_TARGET = 1,
	ENR_CHOOSENEWTARGET = 2,
	ENR_STAND = 3,
	ENR_FIRE = 4
};

enum {
	OBJECTIVE1 = 0,
	OBJECTIVE2 = 1,
	OBJECTIVE3 = 2,
	OBJECTIVE4 = 3,
	OBJECTIVE5 = 4,
	OBJECTIVE6 = 5
};

enum {
	EMS_START = 0,
	EMS_STAND = 1,
	EMS_CROUCH = 2,
	EMS_STANDFIRE = 3,
	EMS_CHANGETARGETBASE_LS = 4,
	EMS_CHECKLOSTTARGET_LS = 5
};

enum {
	EAC_SETUP = 0,
	EAC_READY = 1,
	EAC_CROUCH = 2,
	EAC_STAND = 3,
	EAC_THROWGRENADE = 4,
	EAC_THROWFINISH = 5,
	EAC_STANDFIRE = 6,
	EAC_CRATESHOOT = 7
};

enum {
	ZOM_ATK_ADVANCE = 0
};

enum {
	ATTACKOBJECT_FIRSTENTRY = 0,
	ATTACKOBJECT_GETRANGE = 1,
	ATTACKOBJECT_INRANGE = 2,
	ATTACKOBJECT_FIRE = 3,
	ATTACKOBJECT_CROUCHFIRE = 4,
	ATTACKOBJECT_PAUSE = 5,
	ATTACKOBJECT_CHECKLOSTTARGET = 6,
	ATTACKOBJECT_CHECKRANGE = 7
};

enum {
	SNIPEATTACK_CHOOSESNIPEPAD = 0,
	SNIPEATTACK_ADVANCETOSNIPEPAD = 1,
	SNIPEATTACK_CHOOSETARGET = 2,
	SNIPEATTACK_CHOOSINGTARGET = 3,
	SNIPEATTACK_SHOOT = 4,
	SNIPEATTACK_CHECKLOSTTARGET = 5
};

enum {
	BARRELROBOT_SLEEP = 0,
	BARRELROBOT_SPINHEAD = 1,
	BARRELROBOT_AWAKEN = 2,
	BARRELROBOT_TRACKTARGET = 3,
	BARRELROBOT_TURN = 4,
	BARRELROBOT_SIT = 5,
	BARRELROBOT_SITSHOOT = 6
};

struct ambushDesc_s { // 0x10
	/* 0x0 */ int animstage1;
	/* 0x4 */ int animstage2;
	/* 0x8 */ int animstage3;
	/* 0xc */ int animstage4;
};

typedef ambushDesc_s ambushDesc;

enum {
	EA_START = 0,
	EA_READY = 1,
	EA_AMBUSH = 2,
	EA_ATTACK = 3,
	EA_BACK = 4
};

enum {
	EPD_SETUP = 0,
	EPD_WAITFORTRIGGER = 1,
	EPD_GETUP = 2
};

enum {
	EPB_SETUP = 0,
	EPB_WAITFORTRIGGER = 1,
	EPB_GETTOBUTTON = 2,
	EPB_PRESSBUTTON = 3,
	EPB_FINISHED = 4
};

enum {
	ATTACK_FIRSTSIGHT = 0,
	ATTACK_ATTACK = 1,
	ATTACK_CLOSEIN = 2,
	ATTACK_BACKOFF = 3,
	ATTACK_CANNOTSEETARGET = 4,
	ATTACK_JUSTLOSTSIGHTOFTARGET = 5,
	ATTACK_KNEEL = 6
};

enum {
	EARM_SELECT_GUN = 0,
	EARM_ADVANCE_TO_GUN = 1,
	EARM_WAITFORGUN = 2,
	EARM_WAITFORGUN_RUN = 3
};

struct coredropinfo_s { // 0xa8
	/* 0x00 */ prop *prop;
	/* 0x04 */ int owner;
	/* 0x08 */ int teamdefenders[5];
	/* 0x1c */ int defenderlist[14];
	/* 0x54 */ int totaldefenders;
	/* 0x58 */ int teamattackers[5];
	/* 0x6c */ int totalattackers;
	/* 0x70 */ int attackerlist[14];
};

typedef coredropinfo_s coredropinfo;

struct corechrinfo_s { // 0xc
	/* 0x0 */ int prevmsg;
	/* 0x4 */ int prevmsgdata;
	/* 0x8 */ int numattackers;
};

typedef corechrinfo_s corechrinfo;

enum {
	PACKET_I_AM_DISCONNECTING = 0,
	PACKET_REQUEST_JOIN_GAME_DATA = 1,
	PACKET_ACCEPT_JOIN_GAME_DATA = 2,
	PACKET_REJECT_JOIN_GAME_DATA = 3,
	PACKET_GAMEPARAMS_DATA = 4,
	PACKET_SIGNON_DATA = 5,
	PACKET_DODISCONNECT_DATA = 6,
	PACKET_REQUESTCURRENTGAMESTATE_DATA = 7,
	PACKET_CURRENTGAMESTATE_DATA = 8,
	PACKET_LEVELQUIT_DATA = 9,
	PACKET_MARKER_INGAME_PACKETS_START_HERE = 10,
	PACKET_CLIENT_GAME_DATA = 11,
	PACKET_SERVER_GAME_DATA = 12,
	PACKET_PLAYERPREFS_DATA = 13,
	PACKET_PROPDAMAGE_DATA = 14,
	PACKET_REQUESTPROPDAMAGE_DATA = 15,
	PACKET_PROPKILLCHR_DATA = 16,
	PACKET_REQUESTPROPKILLCHR_DATA = 17,
	PACKET_PROPPICKUP_DATA = 18,
	PACKET_REQUESTPROPPICKUP_DATA = 19,
	PACKET_PROPDROP_DATA = 20,
	PACKET_MAKEPROPVISIBLE_DATA = 21,
	PACKET_RESPAWN_DATA = 22,
	PACKET_REQUESTRESPAWN_DATA = 23,
	PACKET_ENEMYRESPAWN_DATA = 24,
	PACKET_REQUESTENEMYRESPAWN_DATA = 25,
	PACKET_UPDATESCORE_DATA = 26,
	PACKET_SPAWNKNOCKOUTBAG_DATA = 27,
	PACKET_AICHR_DATA = 28
};

enum {
	NET_STATE_NONE = 0,
	NET_STATE_WAITINGCONNECTION = 1,
	NET_STATE_WAITINGINITDATA = 2,
	NET_STATE_WAITINGGAMESTART = 3,
	NET_STATE_WAITINGCURRENTGAMESTATE = 4,
	NET_STATE_INGAME = 5
};

typedef enum {
	SCE1394ERR_OK = 0,
	SCE1394ERR_ERROR = -1,
	SCE1394ERR_NOT_INITIALIZED = -1000,
	SCE1394ERR_NOT_SUPPORTED = -1001,
	SCE1394ERR_NO_MEMORY = -1002,
	SCE1394ERR_RESOURCE_UNAVAILABLE = -1003,
	SCE1394ERR_INVALID_ID = -1004,
	SCE1394ERR_INVALID_REQUEST = -1005,
	SCE1394ERR_INVALID_ARGUMENT = -1006,
	SCE1394ERR_INVALID_SIZE = -1007,
	SCE1394ERR_INVALID_ADDRESS = -1008,
	SCE1394ERR_TRANSACTION_ERROR = -1020,
	SCE1394ERR_RESET_DETECTED = -1021,
	SCE1394ERR_REQUEST_DISABLED = -1022,
	SCE1394ERR_FAILED_RESPONSE = -1023,
	SCE1394ERR_TIMEOUT = -1024,
	SCE1394ERR_ACK_MISSING = -1025,
	SCE1394ERR_RETRY_LIMIT = -1026,
	SCE1394ERR_DATA_ERROR = -1027,
	SCE1394ERR_INVALID_PARAMETER = -1028,
	SCE1394ERR_RESPONSE_DATA_ERROR = -1041,
	SCE1394ERR_RESPONSE_FORMAT_ERROR = -1042,
	SCE1394ERR_REQUEST_DATA_ERROR = -1043,
	SCE1394ERR_RESPONSE_ACK_MISSING = -1044,
	SCE1394ERR_UNSOLICITED_RESPONSE = -1045,
	SCE1394ERR_RESPONSE_RETRY_LIMIT = -1046,
	SCE1394ERR_HEADER_CRC_ERROR = -1061,
	SCE1394ERR_UNKNOWN_TCODE = -1062,
	SCE1394ERR_CYCLE_TOO_LONG = -1063,
	SCE1394ERR_NO_MANAGER = -1081
} Sce1394ErrorCode;

typedef int (*sce1394TrDataIndProc)(/* parameters unknown */);

typedef struct { // 0x8
	/* 0x0 */ int iov_len;
	/* 0x4 */ void *iov_base;
} sce1394Iov;

typedef unsigned int sceILsock_addr_t;
typedef short unsigned int sceILsock_port_t;

struct eui64 { // 0x8
	/* 0x0 */ sceILsock_addr_t eui64_hi;
	/* 0x4 */ sceILsock_addr_t eui64_lo;
};

typedef struct { // 0x10
	/* 0x0 */ unsigned char sock_len;
	/* 0x1 */ unsigned char sock_family;
	/* 0x2 */ sceILsock_port_t sock_port;
	/* 0x4 */ eui64 sock_addr;
	/* 0xc */ char sock_zero[4];
} sceILsock_addr;

enum SceILsockErrorCode {
	SCEILSOCKERR_OK = 0,
	SCEILSOCKERR_ERROR = -1,
	SCEILSOCKERR_NOT_INITIALIZED = -2000,
	SCEILSOCKERR_NOT_SUPPORTED = -2001,
	SCEILSOCKERR_NO_MEMORY = -2002,
	SCEILSOCKERR_RESOURCE_UNAVAILABLE = -2003,
	SCEILSOCKERR_INVALID_ID = -2004,
	SCEILSOCKERR_INVALID_REQUEST = -2005,
	SCEILSOCKERR_INVALID_ARGUMENT = -2006,
	SCEILSOCKERR_INVALID_SIZE = -2007,
	SCEILSOCKERR_INVALID_ADDRESS = -2008,
	SCEILSOCKERR_NO_SUCH_NODE = -2021
};

typedef struct { // 0x168
	/* 0x000 */ sceSifClientData cd_sceILsockInit;
	/* 0x028 */ sceSifClientData cd_sceILsockReset;
	/* 0x050 */ sceSifClientData cd_sceILsockOpen;
	/* 0x078 */ sceSifClientData cd_sceILsockClose;
	/* 0x0a0 */ sceSifClientData cd_sceILsockBind;
	/* 0x0c8 */ sceSifClientData cd_sceILsockConnect;
	/* 0x0f0 */ sceSifClientData cd_sceILsockSend;
	/* 0x118 */ sceSifClientData cd_sceILsockRecvFrom;
	/* 0x140 */ sceSifClientData cd_sce1394SbEui64;
} ILINK_SOCKET_SIF_MANAGER;

typedef struct { // 0x10
	/* 0x0 */ u_int *pCurrent;
	/* 0x4 */ u_long128 *pBase;
	/* 0x8 */ u_long128 *pDmaTag;
	/* 0xc */ u_int pad03;
} sceDmaPacket;

typedef struct { // 0x20
	/* 0x00 */ u_int *pCurrent;
	/* 0x04 */ u_long128 *pBase;
	/* 0x08 */ u_long128 *pDmaTag;
	/* 0x0c */ u_int *pVifCode;
	/* 0x10 */ u_int numlen;
	/* 0x14 */ u_int pad11;
	/* 0x18 */ u_int pad12;
	/* 0x1c */ u_int pad13;
} sceVif0Packet;

typedef struct { // 0x20
	/* 0x00 */ u_int *pCurrent;
	/* 0x04 */ u_long128 *pBase;
	/* 0x08 */ u_long128 *pDmaTag;
	/* 0x0c */ u_int *pVifCode;
	/* 0x10 */ u_int numlen;
	/* 0x14 */ u_long *pGifTag;
	/* 0x18 */ u_int pad12;
	/* 0x1c */ u_int pad13;
} sceVif1Packet;

typedef struct { // 0x10
	/* 0x0 */ unsigned int data;
	/* 0x4 */ unsigned int addr;
	/* 0x8 */ unsigned int size;
	/* 0xc */ unsigned int mode;
} sceSifDmaData;

enum {
	PACKET_REQUESTCONNECT = -1,
	PACKET_ACCEPTCONNECT = -2,
	PACKET_AREYOUSTILLTHERE = -3,
	PACKET_YESIAMSTILLHERE = -4,
	PACKET_ARE_THERE_SERVERS = -5,
	PACKET_IM_A_SERVER = -6
};

enum {
	APACHEMODE_FLY_IN = 0,
	APACHEMODE_ATTACK = 1,
	APACHEMODE_CIRCLE = 2,
	APACHEMODE_CRASHING = 3,
	APACHEMODE_DEAD = 4
};

typedef union { // 0x8
	/* 0x0 */ double value;
	/* 0x0 */ struct { // 0x8
		/* 0x0 */ __uint32_t lsw;
		/* 0x4 */ __uint32_t msw;
	} parts;
} ieee_double_shape_type;

typedef union { // 0x4
	/* 0x0 */ float value;
	/* 0x0 */ __uint32_t word;
} ieee_float_shape_type;

enum cmp_type {
	CMP_SI = 0,
	CMP_DI = 1,
	CMP_SF = 2,
	CMP_DF = 3,
	CMP_MAX = 4
};

enum delay_type {
	DELAY_NONE = 0,
	DELAY_LOAD = 1,
	DELAY_HILO = 2,
	DELAY_HILO1 = 3,
	DELAY_FCMP = 4
};

enum processor_type {
	PROCESSOR_DEFAULT = 0,
	PROCESSOR_R3000 = 1,
	PROCESSOR_R3900 = 2,
	PROCESSOR_R6000 = 3,
	PROCESSOR_R4000 = 4,
	PROCESSOR_R4100 = 5,
	PROCESSOR_R4300 = 6,
	PROCESSOR_R4600 = 7,
	PROCESSOR_R4650 = 8,
	PROCESSOR_R5000 = 9,
	PROCESSOR_R5400 = 10,
	PROCESSOR_R5900 = 11,
	PROCESSOR_R8000 = 12
};

enum mips_abicalls_type {
	MIPS_ABICALLS_NO = 0,
	MIPS_ABICALLS_YES = 1
};

enum block_move_type {
	BLOCK_MOVE_NORMAL = 0,
	BLOCK_MOVE_NOT_LAST = 1,
	BLOCK_MOVE_LAST = 2
};

enum reg_class {
	NO_REGS = 0,
	M16_NA_REGS = 1,
	M16_REGS = 2,
	T_REG = 3,
	M16_T_REGS = 4,
	GR_REGS = 5,
	FP_REGS = 6,
	HI_REG = 7,
	LO_REG = 8,
	HILO_REG = 9,
	MD_REGS = 10,
	HI_AND_GR_REGS = 11,
	LO_AND_GR_REGS = 12,
	HILO_AND_GR_REGS = 13,
	HI1_REG = 14,
	LO1_REG = 15,
	HILO1_REG = 16,
	MD1_REGS = 17,
	HI1_AND_GR_REGS = 18,
	LO1_AND_GR_REGS = 19,
	HILO1_AND_GR_REGS = 20,
	HI01_REG = 21,
	LO01_REG = 22,
	HILO01_REG = 23,
	MD01_REGS = 24,
	HI01_AND_GR_REGS = 25,
	LO01_AND_GR_REGS = 26,
	HILO01_AND_GR_REGS = 27,
	ST_REGS = 28,
	ALL_REGS = 29,
	LIM_REG_CLASSES = 30
};

struct mips_frame_info { // 0x70
	/* 0x00 */ long int total_size;
	/* 0x08 */ long int var_size;
	/* 0x10 */ long int args_size;
	/* 0x18 */ long int extra_size;
	/* 0x20 */ int gp_reg_size;
	/* 0x24 */ int fp_reg_size;
	/* 0x28 */ long int mask;
	/* 0x30 */ long int fmask;
	/* 0x38 */ long int gp_save_offset;
	/* 0x40 */ long int fp_save_offset;
	/* 0x48 */ long int gp_sp_offset;
	/* 0x50 */ long int fp_sp_offset;
	/* 0x58 */ int initialized;
	/* 0x5c */ int num_gp;
	/* 0x60 */ int num_fp;
	/* 0x68 */ long int insns_len;
};

struct mips_args { // 0x3c
	/* 0x00 */ int gp_reg_found;
	/* 0x04 */ int arg_number;
	/* 0x08 */ int arg_words;
	/* 0x0c */ int fp_arg_words;
	/* 0x10 */ int last_arg_fp;
	/* 0x14 */ int fp_code;
	/* 0x18 */ int num_adjusts;
	/* 0x1c */ rtx_def *adjust[8];
};

typedef mips_args CUMULATIVE_ARGS;

enum machine_mode {
	VOIDmode = 0,
	PQImode = 1,
	QImode = 2,
	PHImode = 3,
	HImode = 4,
	PSImode = 5,
	SImode = 6,
	PDImode = 7,
	DImode = 8,
	TImode = 9,
	OImode = 10,
	QFmode = 11,
	HFmode = 12,
	TQFmode = 13,
	SFmode = 14,
	DFmode = 15,
	XFmode = 16,
	TFmode = 17,
	QCmode = 18,
	HCmode = 19,
	SCmode = 20,
	DCmode = 21,
	XCmode = 22,
	TCmode = 23,
	CQImode = 24,
	CHImode = 25,
	CSImode = 26,
	CDImode = 27,
	CTImode = 28,
	COImode = 29,
	BLKmode = 30,
	CCmode = 31,
	MAX_MACHINE_MODE = 32
};

enum mode_class {
	MODE_RANDOM = 0,
	MODE_INT = 1,
	MODE_FLOAT = 2,
	MODE_PARTIAL_INT = 3,
	MODE_CC = 4,
	MODE_COMPLEX_INT = 5,
	MODE_COMPLEX_FLOAT = 6,
	MAX_MODE_CLASS = 7
};

typedef int ptrdiff_t;
typedef unsigned int wint_t;
typedef unsigned char UQItype;
typedef int SItype;
typedef unsigned int USItype;
typedef long int DItype;
typedef long unsigned int UDItype;
typedef float SFtype;
typedef double DFtype;
typedef long int word_type;

struct DIstruct { // 0x8
	/* 0x0 */ SItype low;
	/* 0x4 */ SItype high;
};

typedef union { // 0x8
	/* 0x0 */ DIstruct s;
	/* 0x0 */ DItype ll;
} DIunion;

typedef void (*func_ptr)(/* parameters unknown */);
typedef short int HItype;
typedef short unsigned int UHItype;
// warning: multiple differing types with the same name (type name not equal)
typedef UDItype fractype;
// warning: multiple differing types with the same name (type name not equal)
typedef USItype halffractype;
// warning: multiple differing types with the same name (type name not equal)
typedef DFtype FLO_type;
// warning: multiple differing types with the same name (type name not equal)
typedef DItype intfrac;

typedef enum {
	CLASS_SNAN = 0,
	CLASS_QNAN = 1,
	CLASS_ZERO = 2,
	CLASS_NUMBER = 3,
	CLASS_INFINITY = 4
} fp_class_type;

// warning: multiple differing types with the same name (size not equal)
typedef struct { // 0x18
	/* 0x00 */ fp_class_type class;
	/* 0x04 */ unsigned int sign;
	/* 0x08 */ int normal_exp;
	/* 0x10 */ union { // 0x8
		/* 0x10 */ fractype ll;
		/* 0x10 */ halffractype l[2];
	} fraction;
} fp_number_type;

// warning: multiple differing types with the same name (size not equal)
typedef union { // 0x8
	/* 0x0 */ FLO_type value;
	/* 0x0 */ fractype value_raw;
	/* 0x0 */ halffractype words[2];
	/* 0x0 */ struct { // 0x8
		/* 0x0:0 */ fractype fraction : 52;
		/* 0x6:4 */ unsigned int exp : 11;
		/* 0x7:7 */ unsigned int sign : 1;
	} bits;
} FLO_union_type;

// warning: multiple differing types with the same name (type name not equal)
typedef USItype fractype;
// warning: multiple differing types with the same name (type name not equal)
typedef UHItype halffractype;
// warning: multiple differing types with the same name (type name not equal)
typedef SFtype FLO_type;
// warning: multiple differing types with the same name (type name not equal)
typedef SItype intfrac;

// warning: multiple differing types with the same name (size not equal)
typedef struct { // 0x10
	/* 0x0 */ fp_class_type class;
	/* 0x4 */ unsigned int sign;
	/* 0x8 */ int normal_exp;
	/* 0xc */ union { // 0x4
		/* 0xc */ fractype ll;
		/* 0xc */ halffractype l[2];
	} fraction;
} fp_number_type;

// warning: multiple differing types with the same name (size not equal)
typedef union { // 0x4
	/* 0x0 */ FLO_type value;
	/* 0x0 */ fractype value_raw;
	/* 0x0 */ struct { // 0x4
		/* 0x0:0 */ fractype fraction : 23;
		/* 0x2:7 */ unsigned int exp : 8;
		/* 0x3:7 */ unsigned int sign : 1;
	} bits;
} FLO_union_type;

typedef long int _off_t;
typedef long int _ssize_t;
typedef short unsigned int ushort;
typedef unsigned int uint;
typedef long int daddr_t;
typedef char *caddr_t;
typedef short unsigned int ino_t;
typedef short int dev_t;
typedef long int off_t;
typedef short unsigned int uid_t;
typedef short unsigned int gid_t;
typedef int pid_t;
typedef long int key_t;
typedef long int ssize_t;
typedef unsigned int mode_t;
typedef short unsigned int nlink_t;
typedef long int fd_mask;

typedef struct { // 0x8
	/* 0x0 */ fd_mask fds_bits[1];
} _types_fd_set;

struct mallinfo { // 0x28
	/* 0x00 */ int arena;
	/* 0x04 */ int ordblks;
	/* 0x08 */ int smblks;
	/* 0x0c */ int hblks;
	/* 0x10 */ int hblkhd;
	/* 0x14 */ int usmblks;
	/* 0x18 */ int fsmblks;
	/* 0x1c */ int uordblks;
	/* 0x20 */ int fordblks;
	/* 0x24 */ int keepcost;
};

struct malloc_chunk { // 0x10
	/* 0x0 */ size_t prev_size;
	/* 0x4 */ size_t size;
	/* 0x8 */ malloc_chunk *fd;
	/* 0xc */ malloc_chunk *bk;
};

typedef malloc_chunk *mchunkptr;
typedef malloc_chunk *mbinptr;

struct flock { // 0x20
	/* 0x00 */ short int l_type;
	/* 0x02 */ short int l_whence;
	/* 0x08 */ long int l_start;
	/* 0x10 */ long int l_len;
	/* 0x18 */ short int l_pid;
	/* 0x1a */ short int l_xxx;
};

struct eflock { // 0x30
	/* 0x00 */ short int l_type;
	/* 0x02 */ short int l_whence;
	/* 0x08 */ long int l_start;
	/* 0x10 */ long int l_len;
	/* 0x18 */ short int l_pid;
	/* 0x1a */ short int l_xxx;
	/* 0x20 */ long int l_rpid;
	/* 0x28 */ long int l_rsys;
};

struct stat { // 0x68
	/* 0x00 */ dev_t st_dev;
	/* 0x02 */ ino_t st_ino;
	/* 0x04 */ mode_t st_mode;
	/* 0x08 */ nlink_t st_nlink;
	/* 0x0a */ uid_t st_uid;
	/* 0x0c */ gid_t st_gid;
	/* 0x0e */ dev_t st_rdev;
	/* 0x10 */ off_t st_size;
	/* 0x18 */ time_t st_atime;
	/* 0x20 */ long int st_spare1;
	/* 0x28 */ time_t st_mtime;
	/* 0x30 */ long int st_spare2;
	/* 0x38 */ time_t st_ctime;
	/* 0x40 */ long int st_spare3;
	/* 0x48 */ long int st_blksize;
	/* 0x50 */ long int st_blocks;
	/* 0x58 */ long int st_spare4[2];
};

// warning: multiple differing types with the same name (type name not equal)
typedef unsigned int ULong;

struct __siov { // 0x8
	/* 0x0 */ void *iov_base;
	/* 0x4 */ size_t iov_len;
};

struct __suio { // 0xc
	/* 0x0 */ __siov *uio_iov;
	/* 0x4 */ int uio_iovcnt;
	/* 0x8 */ int uio_resid;
};

typedef union { // 0x10
	/* 0x0 */ double value;
	/* 0x0 */ struct { // 0x8
		/* 0x0 */ unsigned int fraction1;
		/* 0x4:0 */ unsigned int fraction0 : 20;
		/* 0x6:4 */ unsigned int exponent : 11;
		/* 0x7:7 */ unsigned int sign : 1;
	} number;
	/* 0x0 */ struct { // 0x8
		/* 0x0 */ unsigned int function1;
		/* 0x4:0 */ unsigned int function0 : 19;
		/* 0x6:3 */ unsigned int quiet : 1;
		/* 0x6:4 */ unsigned int exponent : 11;
		/* 0x7:7 */ unsigned int sign : 1;
	} nan;
	/* 0x0 */ struct { // 0x10
		/* 0x0 */ long unsigned int lsw;
		/* 0x8 */ long unsigned int msw;
	} parts;
	/* 0x0 */ long int aslong[2];
} __ieee_double_shape_type;

typedef union { // 0x8
	/* 0x0 */ float value;
	/* 0x0 */ struct { // 0x4
		/* 0x0:0 */ unsigned int fraction0 : 7;
		/* 0x0:7 */ unsigned int fraction1 : 16;
		/* 0x2:7 */ unsigned int exponent : 8;
		/* 0x3:7 */ unsigned int sign : 1;
	} number;
	/* 0x0 */ struct { // 0x4
		/* 0x0:0 */ unsigned int function1 : 16;
		/* 0x2:0 */ unsigned int function0 : 6;
		/* 0x2:6 */ unsigned int quiet : 1;
		/* 0x2:7 */ unsigned int exponent : 8;
		/* 0x3:7 */ unsigned int sign : 1;
	} nan;
	/* 0x0 */ long int p1;
} __ieee_float_shape_type;

typedef int fp_rnd;
typedef int fp_except;
typedef int fp_rdi;

union double_union { // 0x8
	/* 0x0 */ double d;
	/* 0x0 */ __uint32_t i[2];
};

enum {
	OCT = 0,
	DEC = 1,
	HEX = 2
};

struct lconv { // 0x30
	/* 0x00 */ char *decimal_point;
	/* 0x04 */ char *thousands_sep;
	/* 0x08 */ char *grouping;
	/* 0x0c */ char *int_curr_symbol;
	/* 0x10 */ char *currency_symbol;
	/* 0x14 */ char *mon_decimal_point;
	/* 0x18 */ char *mon_thousands_sep;
	/* 0x1c */ char *mon_grouping;
	/* 0x20 */ char *positive_sign;
	/* 0x24 */ char *negative_sign;
	/* 0x28 */ char int_frac_digits;
	/* 0x29 */ char frac_digits;
	/* 0x2a */ char p_cs_precedes;
	/* 0x2b */ char p_sep_by_space;
	/* 0x2c */ char n_cs_precedes;
	/* 0x2d */ char n_sep_by_space;
	/* 0x2e */ char p_sign_posn;
	/* 0x2f */ char n_sign_posn;
};

typedef long unsigned int sigset_t;

struct sigaction { // 0x18
	/* 0x00 */ void (*sa_handler)(/* parameters unknown */);
	/* 0x08 */ sigset_t sa_mask;
	/* 0x10 */ int sa_flags;
};

typedef int sig_atomic_t;
typedef void (*_sig_func_ptr)(/* parameters unknown */);
struct rtx_def;
